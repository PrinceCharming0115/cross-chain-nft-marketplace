{
  "address": "0x9DF66E7019fd1C02346ae835B06d67a68096F6eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "maxSupply_",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeanAddressNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRedeemer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMoreTokenIds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedByRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemBeanNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistryNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsafeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongFrom",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "beanId",
          "type": "uint256"
        }
      ],
      "name": "BeanRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegistryActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilteringEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "beanIds",
          "type": "uint256[]"
        }
      ],
      "name": "redeemBeans",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "redeemBeanOpen",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "beanAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURIPermanent",
          "type": "string"
        }
      ],
      "name": "setBaseURIPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setBeanAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isRegistryActive",
          "type": "bool"
        }
      ],
      "name": "setIsRegistryActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "setIsUriPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        }
      ],
      "name": "setNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setOperatorFilteringEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_redeemBeanOpen",
          "type": "bool"
        }
      ],
      "name": "setRedeemBeanState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferLowerOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRealOwner",
          "type": "address"
        }
      ],
      "name": "transferRealOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8c1aa6c233781868c9feac4417dcd53a89875eba135b04159dd210076a7019e",
  "receipt": {
    "to": null,
    "from": "0x43b1DB0EC2167C8811cA0216A35B3bEfc339689c",
    "contractAddress": "0x9DF66E7019fd1C02346ae835B06d67a68096F6eb",
    "transactionIndex": 46,
    "gasUsed": "2220478",
    "logsBloom": "0x
    "blockHash": "0x5bf62c8ee70480a1de9233a6cf552b177aad2be36a007e3e1118c19ebf99cc6c",
    "transactionHash": "0xd8c1aa6c233781868c9feac4417dcd53a89875eba135b04159dd210076a7019e",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 5294560,
        "transactionHash": "0xd8c1aa6c233781868c9feac4417dcd53a89875eba135b04159dd210076a7019e",
        "address": "0x9DF66E7019fd1C02346ae835B06d67a68096F6eb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000043b1db0ec2167c8811ca0216a35b3befc339689c"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x5bf62c8ee70480a1de9233a6cf552b177aad2be36a007e3e1118c19ebf99cc6c"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 5294560,
        "transactionHash": "0xd8c1aa6c233781868c9feac4417dcd53a89875eba135b04159dd210076a7019e",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb59",
          "0x0000000000000000000000009df66e7019fd1c02346ae835b06d67a68096f6eb",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 78,
        "blockHash": "0x5bf62c8ee70480a1de9233a6cf552b177aad2be36a007e3e1118c19ebf99cc6c"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 5294560,
        "transactionHash": "0xd8c1aa6c233781868c9feac4417dcd53a89875eba135b04159dd210076a7019e",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x0038c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8",
          "0x0000000000000000000000009df66e7019fd1c02346ae835b06d67a68096f6eb",
          "0x0000000000000000000000003cc6cdda760b79bafa08df41ecfa224f810dceb6",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x5bf62c8ee70480a1de9233a6cf552b177aad2be36a007e3e1118c19ebf99cc6c"
      }
    ],
    "blockNumber": 5294560,
    "cumulativeGasUsed": "6241778",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Elemental",
    "ELEM",
    20000
  ],
  "numDeployments": 1,
  "solcInputHash": "97d2274a533cec76ead5db9c8f567870",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeanAddressNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRedeemer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMoreTokenIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedByRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemBeanNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistryNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongFrom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"beanId\",\"type\":\"uint256\"}],\"name\":\"BeanRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilteringEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"beanIds\",\"type\":\"uint256[]\"}],\"name\":\"redeemBeans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"redeemBeanOpen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beanAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURIPermanent\",\"type\":\"string\"}],\"name\":\"setBaseURIPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setBeanAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegistryActive\",\"type\":\"bool\"}],\"name\":\"setIsRegistryActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"setIsUriPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setOperatorFilteringEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_redeemBeanOpen\",\"type\":\"bool\"}],\"name\":\"setRedeemBeanState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLowerOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRealOwner\",\"type\":\"address\"}],\"name\":\"transferRealOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NotMinted()\":[{\"notice\":\"----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------\"}]},\"events\":{\"Transfer(address,address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- Events -----------------------------------------------------------------------\"}},\"kind\":\"user\",\"methods\":{\"getApproved(uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------\"},\"name()\":{\"notice\":\"----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Azuki/Elemental.sol\":\"Elemental\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/Azuki/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Modern, minimalist, and gas-optimized ERC721 implementation.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721 {\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Events\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\r\\n\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Custom Errors\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    error NotMinted();\\r\\n\\r\\n    error ZeroAddress();\\r\\n\\r\\n    error Unauthorized();\\r\\n\\r\\n    error WrongFrom();\\r\\n\\r\\n    error InvalidRecipient();\\r\\n\\r\\n    error UnsafeRecipient();\\r\\n\\r\\n    error AlreadyMinted();\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Metadata Storage/Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Balance/Owner Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) internal _ownerOf;\\r\\n\\r\\n    mapping(address => uint256) internal _balanceOf;\\r\\n\\r\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\r\\n        if ((owner = _ownerOf[id]) == address(0)) revert NotMinted();\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        if (owner == address(0)) revert ZeroAddress();\\r\\n        return _balanceOf[owner];\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Approval Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Constructor\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function approve(address spender, uint256 id) public virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert Unauthorized();\\r\\n\\r\\n        getApproved[id] = spender;\\r\\n\\r\\n        emit Approval(owner, spender, id);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\r\\n        if (from != _ownerOf[id]) revert WrongFrom();\\r\\n\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id])\\r\\n            revert Unauthorized();\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            _balanceOf[from]--;\\r\\n\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC165 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Mint/Burn Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (_ownerOf[id] != address(0)) revert AlreadyMinted();\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (owner == address(0)) revert NotMinted();\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            _balanceOf[owner]--;\\r\\n        }\\r\\n\\r\\n        delete _ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, address(0), id);\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Safe Mint Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721TokenReceiver {\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\\r\\n        return ERC721TokenReceiver.onERC721Received.selector;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7b3222924d7601a0f0a91b464a0567a61c02d0c288f920723b3ce893f8cc1020\",\"license\":\"MIT\"},\"contracts/Azuki/Elemental.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\r\\n\\r\\nimport \\\"./closedsea/OperatorFilterer.sol\\\";\\r\\nimport \\\"./MultisigOwnable.sol\\\";\\r\\n\\r\\nerror NotAllowedByRegistry();\\r\\nerror RegistryNotSet();\\r\\nerror InvalidTokenId();\\r\\nerror BeanAddressNotSet();\\r\\nerror RedeemBeanNotOpen();\\r\\nerror InvalidRedeemer();\\r\\nerror NoMoreTokenIds();\\r\\n\\r\\ninterface IRegistry {\\r\\n    function isAllowedOperator(address operator) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract Elemental is ERC2981, ERC721, MultisigOwnable, OperatorFilterer {\\r\\n    using Strings for uint256;\\r\\n    using BitMaps for BitMaps.BitMap;\\r\\n\\r\\n    event BeanRedeemed(\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed beanId\\r\\n    );\\r\\n\\r\\n    bool public operatorFilteringEnabled = true;\\r\\n    bool public isRegistryActive = false;\\r\\n    address public registryAddress;\\r\\n\\r\\n    struct RedeemInfo {\\r\\n        bool redeemBeanOpen;\\r\\n        address beanAddress;\\r\\n    }\\r\\n    RedeemInfo public redeemInfo;\\r\\n\\r\\n    uint16 public immutable MAX_SUPPLY;\\r\\n    uint16 internal _numAvailableRemainingTokens;\\r\\n    // Data structure used for Fisher Yates shuffle\\r\\n    uint16[65536] internal _availableRemainingTokens;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint16 maxSupply_\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        MAX_SUPPLY = maxSupply_;\\r\\n        _numAvailableRemainingTokens = maxSupply_;\\r\\n\\r\\n        _registerForOperatorFiltering();\\r\\n        operatorFilteringEnabled = true;\\r\\n    }\\r\\n\\r\\n    // ---------------\\r\\n    // Name and symbol\\r\\n    // ---------------\\r\\n    function setNameAndSymbol(\\r\\n        string calldata _newName,\\r\\n        string calldata _newSymbol\\r\\n    ) external onlyOwner {\\r\\n        name = _newName;\\r\\n        symbol = _newSymbol;\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Redeem beans\\r\\n    // ------------\\r\\n    function redeemBeans(address to, uint256[] calldata beanIds)\\r\\n        public\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        RedeemInfo memory info = redeemInfo;\\r\\n\\r\\n        if (!info.redeemBeanOpen) {\\r\\n            revert RedeemBeanNotOpen();\\r\\n        }\\r\\n        if (msg.sender != info.beanAddress) {\\r\\n            revert InvalidRedeemer();\\r\\n        }\\r\\n\\r\\n        uint256 amount = beanIds.length;\\r\\n        uint256[] memory tokenIds = new uint256[](amount);\\r\\n\\r\\n        // Assume data has already been validated by the bean contract\\r\\n        for (uint256 i; i < amount; ) {\\r\\n            uint256 beanId = beanIds[i];\\r\\n\\r\\n            uint256 tokenId = _useRandomAvailableTokenId();\\r\\n            // Don't need safeMint, as the calling address has a MysteryBean in it already\\r\\n            _mint(to, tokenId);\\r\\n            emit BeanRedeemed(to, tokenId, beanId);\\r\\n            tokenIds[i] = tokenId;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    // Generates a pseudorandom number between [0,MAX_SUPPLY) that has not yet been generated before, in O(1) time.\\r\\n    //\\r\\n    // Uses Durstenfeld's version of the Yates Shuffle https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\\r\\n    // with a twist to avoid having to manually spend gas to preset an array's values to be values 0...n.\\r\\n    // It does this by interpreting zero-values for an index X as meaning that index X itself is an available value\\r\\n    // that is returnable.\\r\\n    //\\r\\n    // How it works:\\r\\n    //  - zero-initialize a mapping (_availableRemainingTokens) and track its length (_numAvailableRemainingTokens). functionally similar to an array with dynamic sizing\\r\\n    //    - this mapping will track all remaining valid values that haven't been generated yet, through a combination of its indices and values\\r\\n    //      - if _availableRemainingTokens[x] == 0, that means x has not been generated yet\\r\\n    //      - if _availableRemainingTokens[x] != 0, that means _availableRemainingTokens[x] has not been generated yet\\r\\n    //  - when prompted for a random number between [0,MAX_SUPPLY) that hasn't already been used:\\r\\n    //    - generate a random index randIndex between [0,_numAvailableRemainingTokens)\\r\\n    //    - examine the value at _availableRemainingTokens[randIndex]\\r\\n    //        - if the value is zero, it means randIndex has not been used, so we can return randIndex\\r\\n    //        - if the value is non-zero, it means the value has not been used, so we can return _availableRemainingTokens[randIndex]\\r\\n    //    - update the _availableRemainingTokens mapping state\\r\\n    //        - set _availableRemainingTokens[randIndex] to either the index or the value of the last entry in the mapping (depends on the last entry's state)\\r\\n    //        - decrement _numAvailableRemainingTokens to mimic the shrinking of an array\\r\\n    function _useRandomAvailableTokenId() internal returns (uint256) {\\r\\n        uint256 numAvailableRemainingTokens = _numAvailableRemainingTokens;\\r\\n        if (numAvailableRemainingTokens == 0) {\\r\\n            revert NoMoreTokenIds();\\r\\n        }\\r\\n\\r\\n        uint256 randomNum = _getRandomNum(numAvailableRemainingTokens);\\r\\n        uint256 randomIndex = randomNum % numAvailableRemainingTokens;\\r\\n        uint256 valAtIndex = _availableRemainingTokens[randomIndex];\\r\\n\\r\\n        uint256 result;\\r\\n        if (valAtIndex == 0) {\\r\\n            // This means the index itself is still an available token\\r\\n            result = randomIndex;\\r\\n        } else {\\r\\n            // This means the index itself is not an available token, but the val at that index is.\\r\\n            result = valAtIndex;\\r\\n        }\\r\\n\\r\\n        uint256 lastIndex = numAvailableRemainingTokens - 1;\\r\\n        if (randomIndex != lastIndex) {\\r\\n            // Replace the value at randomIndex, now that it's been used.\\r\\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\\r\\n            uint256 lastValInArray = _availableRemainingTokens[lastIndex];\\r\\n            if (lastValInArray == 0) {\\r\\n                // This means the index itself is still an available token\\r\\n                // Cast is safe as we know that lastIndex cannot > MAX_SUPPLY, which is a uint16\\r\\n                _availableRemainingTokens[randomIndex] = uint16(lastIndex);\\r\\n            } else {\\r\\n                // This means the index itself is not an available token, but the val at that index is.\\r\\n                // Cast is safe as we know that lastValInArray cannot > MAX_SUPPLY, which is a uint16\\r\\n                _availableRemainingTokens[randomIndex] = uint16(lastValInArray);\\r\\n                delete _availableRemainingTokens[lastIndex];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        --_numAvailableRemainingTokens;\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // On-chain randomness tradeoffs are acceptable here as it's only used for the Elemental's id number itself, not the resulting Elemental's metadata (which is determined by the source MysteryBean).\\r\\n    function _getRandomNum(uint256 numAvailableRemainingTokens)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        block.prevrandao,\\r\\n                        blockhash(block.number - 1),\\r\\n                        address(this),\\r\\n                        numAvailableRemainingTokens\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setBeanAddress(address contractAddress) external onlyOwner {\\r\\n        redeemInfo = RedeemInfo(redeemInfo.redeemBeanOpen, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRedeemBeanState(bool _redeemBeanOpen) external onlyOwner {\\r\\n        address beanAddress = redeemInfo.beanAddress;\\r\\n        if (beanAddress == address(0)) {\\r\\n            revert BeanAddressNotSet();\\r\\n        }\\r\\n        redeemInfo = RedeemInfo(_redeemBeanOpen, beanAddress);\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Total Supply\\r\\n    // ------------\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        unchecked {\\r\\n            // Does not need to account for burns as they aren't supported.\\r\\n            return MAX_SUPPLY - _numAvailableRemainingTokens;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // Metadata\\r\\n    // --------\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_ownerOf[tokenId] == address(0)) {\\r\\n            revert InvalidTokenId();\\r\\n        }\\r\\n        string memory baseURI = _getBaseURIForToken(tokenId);\\r\\n        return\\r\\n            bytes(baseURI).length > 0\\r\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    string private _baseTokenURI;\\r\\n    string private _baseTokenURIPermanent;\\r\\n    // Keys are Elemental token ids\\r\\n    BitMaps.BitMap private _isUriPermanentForToken;\\r\\n\\r\\n    function _getBaseURIForToken(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            _isUriPermanentForToken.get(tokenId)\\r\\n                ? _baseTokenURIPermanent\\r\\n                : _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURIPermanent(string calldata baseURIPermanent)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _baseTokenURIPermanent = baseURIPermanent;\\r\\n    }\\r\\n\\r\\n    function setIsUriPermanent(uint256[] calldata tokenIds) external onlyOwner {\\r\\n        for (uint256 i = 0; i < tokenIds.length; ) {\\r\\n            _isUriPermanentForToken.set(tokenIds[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // EIP-2981\\r\\n    // --------\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(\\r\\n        uint256 tokenId,\\r\\n        address receiver,\\r\\n        uint96 feeNumerator\\r\\n    ) external onlyOwner {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------\\r\\n    // OperatorFilterer overrides (overrides, values etc.)\\r\\n    // ---------------------------------------------------\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        override\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        super.setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n    function setOperatorFilteringEnabled(bool value) public onlyOwner {\\r\\n        operatorFilteringEnabled = value;\\r\\n    }\\r\\n\\r\\n    function _operatorFilteringEnabled() internal view override returns (bool) {\\r\\n        return operatorFilteringEnabled;\\r\\n    }\\r\\n\\r\\n    function approve(address operator, uint256 tokenId)\\r\\n        public\\r\\n        override\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        super.approve(operator, tokenId);\\r\\n    }\\r\\n\\r\\n    // --------------\\r\\n    // Registry check\\r\\n    // --------------\\r\\n    // Solbase ERC721 calls transferFrom internally in its two safeTransferFrom functions, so we don't need to override those.\\r\\n    // Also, onlyAllowedOperator is from closedsea\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public override onlyAllowedOperator(from) {\\r\\n        if (!_isValidAgainstRegistry(msg.sender)) {\\r\\n            revert NotAllowedByRegistry();\\r\\n        }\\r\\n        super.transferFrom(from, to, id);\\r\\n    }\\r\\n\\r\\n    function _isValidAgainstRegistry(address operator)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (isRegistryActive) {\\r\\n            IRegistry registry = IRegistry(registryAddress);\\r\\n            return registry.isAllowedOperator(operator);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setIsRegistryActive(bool _isRegistryActive) external onlyOwner {\\r\\n        if (registryAddress == address(0)) revert RegistryNotSet();\\r\\n        isRegistryActive = _isRegistryActive;\\r\\n    }\\r\\n\\r\\n    function setRegistryAddress(address _registryAddress) external onlyOwner {\\r\\n        registryAddress = _registryAddress;\\r\\n    }\\r\\n\\r\\n    // -------\\r\\n    // EIP-165\\r\\n    // -------\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC2981)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            ERC721.supportsInterface(interfaceId) ||\\r\\n            ERC2981.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4d5ea35ee150e47cd37b03c2d1add90d23cfed9a2d43639fea55c24e577b4d74\",\"license\":\"MIT\"},\"contracts/Azuki/MultisigOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\r\\n// Source: https://github.com/tubby-cats/dual-ownership-nft\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\nabstract contract MultisigOwnable is Ownable {\\r\\n  address public realOwner;\\r\\n\\r\\n  constructor() {\\r\\n    realOwner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyRealOwner() {\\r\\n    require(\\r\\n      realOwner == msg.sender,\\r\\n      'MultisigOwnable: caller is not the real owner'\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function transferRealOwnership(address newRealOwner) public onlyRealOwner {\\r\\n    realOwner = newRealOwner;\\r\\n  }\\r\\n\\r\\n  function transferLowerOwnership(address newOwner) public onlyRealOwner {\\r\\n    transferOwnership(newOwner);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x3d1435ebece0a40b4106757b85cc37cefb9226a715fff0e85d4a73e8b84ec2d3\",\"license\":\"CC0-1.0\"},\"contracts/Azuki/closedsea/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\\r\\n/// mandatory on-chain royalty enforcement in order for new collections to\\r\\n/// receive royalties.\\r\\n/// For more information, see:\\r\\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\\r\\nabstract contract OperatorFilterer {\\r\\n    /// @dev The default OpenSea operator blocklist subscription.\\r\\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\r\\n\\r\\n    /// @dev The OpenSea operator filter registry.\\r\\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\\r\\n\\r\\n    /// @dev Registers the current contract to OpenSea's operator filter,\\r\\n    /// and subscribe to the default OpenSea operator blocklist.\\r\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\r\\n    function _registerForOperatorFiltering() internal virtual {\\r\\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\\r\\n    }\\r\\n\\r\\n    /// @dev Registers the current contract to OpenSea's operator filter.\\r\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\r\\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\\r\\n\\r\\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\\r\\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\\r\\n\\r\\n            for {} iszero(subscribe) {} {\\r\\n                if iszero(subscriptionOrRegistrantToCopy) {\\r\\n                    functionSelector := 0x4420e486 // `register(address)`.\\r\\n                    break\\r\\n                }\\r\\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\\r\\n                break\\r\\n            }\\r\\n            // Store the function selector.\\r\\n            mstore(0x00, shl(224, functionSelector))\\r\\n            // Store the `address(this)`.\\r\\n            mstore(0x04, address())\\r\\n            // Store the `subscriptionOrRegistrantToCopy`.\\r\\n            mstore(0x24, subscriptionOrRegistrantToCopy)\\r\\n            // Register into the registry.\\r\\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\\r\\n                // If the function selector has not been overwritten,\\r\\n                // it is an out-of-gas error.\\r\\n                if eq(shr(224, mload(0x00)), functionSelector) {\\r\\n                    // To prevent gas under-estimation.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n            }\\r\\n            // Restore the part of the free memory pointer that was overwritten,\\r\\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\\r\\n            mstore(0x24, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\\r\\n    modifier onlyAllowedOperator(address from) virtual {\\r\\n        if (from != msg.sender) {\\r\\n            if (!_isPriorityOperator(msg.sender)) {\\r\\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier to guard a function from approving a blocked operator..\\r\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\r\\n        if (!_isPriorityOperator(operator)) {\\r\\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\\r\\n    function _revertIfBlocked(address operator) private view {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Store the function selector of `isOperatorAllowed(address,address)`,\\r\\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\\r\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\r\\n            mstore(0x00, 0xc6171134001122334455)\\r\\n            // Store the `address(this)`.\\r\\n            mstore(0x1a, address())\\r\\n            // Store the `operator`.\\r\\n            mstore(0x3a, operator)\\r\\n\\r\\n            // `isOperatorAllowed` always returns true if it does not revert.\\r\\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\\r\\n                // Bubble up the revert if the staticcall reverts.\\r\\n                returndatacopy(0x00, 0x00, returndatasize())\\r\\n                revert(0x00, returndatasize())\\r\\n            }\\r\\n\\r\\n            // We'll skip checking if `from` is inside the blacklist.\\r\\n            // Even though that can block transferring out of wrapper contracts,\\r\\n            // we don't want tokens to be stuck.\\r\\n\\r\\n            // Restore the part of the free memory pointer that was overwritten,\\r\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\r\\n            mstore(0x3a, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev For deriving contracts to override, so that operator filtering\\r\\n    /// can be turned on / off.\\r\\n    /// Returns true by default.\\r\\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\\r\\n    /// skip operator filtering, helping users save gas.\\r\\n    /// Returns false for all inputs by default.\\r\\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9fb30ab66084a489ec76d887969dfc6805d1aceb3a9792a5e90c77715deca54c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526009805461ffff60a01b1916600160a01b1790553480156200002557600080fd5b50604051620027e6380380620027e683398101604081905262000048916200028c565b82826002620000588382620003a1565b506003620000678282620003a1565b505050620000846200007e620000d460201b60201c565b620000d8565b600980546001600160a01b0319163317905561ffff81166080819052600c805461ffff19169091179055620000b86200012a565b50506009805460ff60a01b1916600160a01b179055506200046d565b3390565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200014b733cc6cdda760b79bafa08df41ecfa224f810dceb660016200014d565b565b6001600160a01b0390911690637d3e3dbe816200017d5782620001765750634420e4866200017d565b5063a0af29035b8060e01b60005230600452826024526004600060446000806daaeb6d7670e522a718067333cd4e5af1620001bd578060005160e01c03620001bd57600080fd5b5060006024525050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001ef57600080fd5b81516001600160401b03808211156200020c576200020c620001c7565b604051601f8301601f19908116603f01168101908282118183101715620002375762000237620001c7565b816040528381526020925086838588010111156200025457600080fd5b600091505b8382101562000278578582018301518183018401529082019062000259565b600093810190920192909252949350505050565b600080600060608486031215620002a257600080fd5b83516001600160401b0380821115620002ba57600080fd5b620002c887838801620001dd565b94506020860151915080821115620002df57600080fd5b50620002ee86828701620001dd565b925050604084015161ffff811681146200030757600080fd5b809150509250925092565b600181811c908216806200032757607f821691505b6020821081036200034857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039c57600081815260208120601f850160051c81016020861015620003775750805b601f850160051c820191505b81811015620003985782815560010162000383565b5050505b505050565b81516001600160401b03811115620003bd57620003bd620001c7565b620003d581620003ce845462000312565b846200034e565b602080601f8311600181146200040d5760008415620003f45750858301515b600019600386901b1c1916600185901b17855562000398565b600085815260208120601f198616915b828110156200043e578886015182559484019460019091019084016200041d565b50858210156200045d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161235662000490600039600081816102fb015261039b01526123566000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80636352211e11610130578063abd017ea116100b8578063e985e9c51161007c578063e985e9c514610555578063ed9aab5114610583578063efe7aa4914610596578063f2fde38b146105d2578063fb796e6c146105e557600080fd5b8063abd017ea146104e8578063b7c0b8e8146104fc578063b88d4fde1461050f578063c87b56dd14610522578063d443af801461053557600080fd5b80638e0d9fcc116100ff5780638e0d9fcc1461049457806390d9c86a146104a757806395d89b41146104ba578063a22cb465146104c2578063ab7b4993146104d557600080fd5b80636352211e1461045557806370a0823114610468578063715018a61461047b5780638da5cb5b1461048357600080fd5b80632a55205a116101be57806346fff98d1161018257806346fff98d146103f657806354ecf3091461040957806355f804b31461041c5780635944c7531461042f5780635a4462151461044257600080fd5b80632a55205a146103515780632cff67701461038357806332cb6b0c146103965780633c115fa6146103d057806342842e0e146103e357600080fd5b8063095ea7b311610205578063095ea7b3146102ca57806309af3f9a146102dd57806318160ddd146102f05780631df270f31461032b57806323b872dd1461033e57600080fd5b806301ffc9a71461023757806304634d8d1461025f57806306fdde0314610274578063081812fc14610289575b600080fd5b61024a610245366004611af2565b6105f9565b60405190151581526020015b60405180910390f35b61027261026d366004611b3d565b610619565b005b61027c61062f565b6040516102569190611b94565b6102b2610297366004611bc7565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610256565b6102726102d8366004611be0565b6106bd565b6102726102eb366004611c0a565b6106e8565b600c5461ffff9081167f000000000000000000000000000000000000000000000000000000000000000003165b604051908152602001610256565b6009546102b2906001600160a01b031681565b61027261034c366004611c25565b610727565b61036461035f366004611c61565b61078a565b604080516001600160a01b039093168352602083019190915201610256565b610272610391366004611c0a565b610838565b6103bd7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610256565b6102726103de366004611cc5565b610884565b6102726103f1366004611c25565b61089a565b610272610404366004611d15565b610968565b610272610417366004611c0a565b6109b7565b61027261042a366004611cc5565b610a10565b61027261043d366004611d32565b610a26565b610272610450366004611d6e565b610a39565b6102b2610463366004611bc7565b610a63565b61031d610476366004611c0a565b610a9e565b610272610ae3565b6008546001600160a01b03166102b2565b6102726104a2366004611e1f565b610af7565b6102726104b5366004611d15565b610b3f565b61027c610bc5565b6102726104d0366004611e55565b610bd2565b6102726104e3366004611c0a565b610bf8565b60095461024a90600160a81b900460ff1681565b61027261050a366004611d15565b610c22565b61027261051d366004611e8c565b610c48565b61027c610530366004611bc7565b610d04565b610548610543366004611efb565b610d99565b6040516102569190611f4e565b61024a610563366004611f92565b600760209081526000928352604080842090915290825290205460ff1681565b600a546102b2906001600160a01b031681565b600b546105b39060ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b03909116602083015201610256565b6102726105e0366004611c0a565b610f0b565b60095461024a90600160a01b900460ff1681565b600061060482610f81565b80610613575061061382610fcf565b92915050565b610621611004565b61062b828261105e565b5050565b6002805461063c90611fbc565b80601f016020809104026020016040519081016040528092919081815260200182805461066890611fbc565b80156106b55780601f1061068a576101008083540402835291602001916106b5565b820191906000526020600020905b81548152906001019060200180831161069857829003601f168201915b505050505081565b81600954600160a01b900460ff16156106d9576106d981611118565b6106e3838361115c565b505050565b6009546001600160a01b0316331461071b5760405162461bcd60e51b815260040161071290611ff6565b60405180910390fd5b61072481610f0b565b50565b826001600160a01b038116331461075357600954600160a01b900460ff16156107535761075333611118565b61075c33611221565b610779576040516326406c5f60e11b815260040160405180910390fd5b6107848484846112ae565b50505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916107ff5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061081e906001600160601b031687612059565b6108289190612086565b91519350909150505b9250929050565b6009546001600160a01b031633146108625760405162461bcd60e51b815260040161071290611ff6565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b61088c611004565b61100e6106e38284836120fe565b6108a5838383610727565b6001600160a01b0382163b156106e357604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094091906121be565b6001600160e01b031916146106e357604051633da6393160e01b815260040160405180910390fd5b610970611004565b600a546001600160a01b031661099957604051630e048e7160e41b815260040160405180910390fd5b60098054911515600160a81b0260ff60a81b19909216919091179055565b6109bf611004565b60408051808201909152600b805460ff811615158084526001600160a01b039490941660209093018390526001600160a81b031916610100600160a81b031990931692909217610100909102179055565b610a18611004565b61100d6106e38284836120fe565b610a2e611004565b6106e383838361141b565b610a41611004565b6002610a4e8486836120fe565b506003610a5c8284836120fe565b5050505050565b6000818152600460205260409020546001600160a01b031680610a9957604051634d5e5fb360e01b815260040160405180910390fd5b919050565b60006001600160a01b038216610ac75760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205490565b610aeb611004565b610af560006114e6565b565b610aff611004565b60005b818110156106e357610b37838383818110610b1f57610b1f6121db565b9050602002013561100f61153890919063ffffffff16565b600101610b02565b610b47611004565b600b5461010090046001600160a01b031680610b76576040516313142f0760e31b815260040160405180910390fd5b604080518082019091529115158083526001600160a01b039091166020909201829052600b8054610100909302610100600160a81b03199092166001600160a81b031990931692909217179055565b6003805461063c90611fbc565b81600954600160a01b900460ff1615610bee57610bee81611118565b6106e38383611561565b610c00611004565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b610c2a611004565b60098054911515600160a01b0260ff60a01b19909216919091179055565b610c53858585610727565b6001600160a01b0384163b15610a5c57604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290610c999033908a908990899089906004016121f1565b6020604051808303816000875af1158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc91906121be565b6001600160e01b03191614610a5c57604051633da6393160e01b815260040160405180910390fd5b6000818152600460205260409020546060906001600160a01b0316610d3c576040516307ed98ed60e31b815260040160405180910390fd5b6000610d47836115cd565b90506000815111610d675760405180602001604052806000815250610d92565b80610d718461168d565b604051602001610d82929190612245565b6040516020818303038152906040525b9392505050565b60408051808201909152600b5460ff811615158083526101009091046001600160a01b0316602083015260609190610de4576040516372a58b2b60e11b815260040160405180910390fd5b80602001516001600160a01b0316336001600160a01b031614610e1a5760405163d8546cf160e01b815260040160405180910390fd5b8260008167ffffffffffffffff811115610e3657610e3661209a565b604051908082528060200260200182016040528015610e5f578160200160208202803683370190505b50905060005b82811015610f00576000878783818110610e8157610e816121db565b9050602002013590506000610e94611720565b9050610ea08a826118ee565b81818b6001600160a01b03167f71e92ec5a8e5a2b5c4717c4520cea4ce2cfe75c53bba10efe28c4328b31047cb60405160405180910390a480848481518110610eeb57610eeb6121db565b60209081029190910101525050600101610e65565b509695505050505050565b610f13611004565b6001600160a01b038116610f785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610712565b610724816114e6565b60006301ffc9a760e01b6001600160e01b031983161480610fb257506380ac58cd60e01b6001600160e01b03198316145b806106135750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b148061061357506301ffc9a760e01b6001600160e01b0319831614610613565b6008546001600160a01b03163314610af55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610712565b6127106001600160601b03821611156110895760405162461bcd60e51b815260040161071290612274565b6001600160a01b0382166110df5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610712565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b69c617113400112233445560005230601a5280603a52600080604460166daaeb6d7670e522a718067333cd4e5afa611154573d6000803e3d6000fd5b6000603a5250565b6000818152600460205260409020546001600160a01b03163381148015906111a857506001600160a01b038116600090815260076020908152604080832033845290915290205460ff16155b156111c5576040516282b42960e81b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600954600090600160a81b900460ff16156112a657600a546040516370c5e04560e11b81526001600160a01b03848116600483015290911690819063e18bc08a90602401602060405180830381865afa158015611282573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9291906122be565b506001919050565b6000818152600460205260409020546001600160a01b038481169116146112e85760405163c6de3f2560e01b815260040160405180910390fd5b6001600160a01b03821661130f57604051634e46966960e11b815260040160405180910390fd5b336001600160a01b0384161480159061134c57506001600160a01b038316600090815260076020908152604080832033845290915290205460ff16155b801561136f57506000818152600660205260409020546001600160a01b03163314155b1561138c576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0380841660008181526005602090815260408083208054600019019055938616808352848320805460010190558583526004825284832080546001600160a01b03199081168317909155600690925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6127106001600160601b03821611156114465760405162461bcd60e51b815260040161071290612274565b6001600160a01b03821661149c5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610712565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600881901c600090815260209290925260409091208054600160ff9093169290921b9091179055565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600881901c600090815261100f6020526040902054606090600160ff84161b166115f95761100d6115fd565b61100e5b805461160890611fbc565b80601f016020809104026020016040519081016040528092919081815260200182805461163490611fbc565b80156116815780601f1061165657610100808354040283529160200191611681565b820191906000526020600020905b81548152906001019060200180831161166457829003601f168201915b50505050509050919050565b6060600061169a836119b6565b600101905060008167ffffffffffffffff8111156116ba576116ba61209a565b6040519080825280601f01601f1916602001820160405280156116e4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846116ee57509392505050565b600c5460009061ffff1680820361174a5760405163aeb0cc9b60e01b815260040160405180910390fd5b600061175582611a8e565b9050600061176383836122db565b90506000600d8262010000811061177c5761177c6121db565b601091828204019190066002029054906101000a900461ffff1661ffff1690506000816000036117ad5750816117b0565b50805b60006117bd6001876122ef565b90508084146118b4576000600d826201000081106117dd576117dd6121db565b601091828204019190066002029054906101000a900461ffff1661ffff169050806000036118455781600d8662010000811061181b5761181b6121db565b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055506118b2565b80600d8662010000811061185b5761185b6121db565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600d82620100008110611895576118956121db565b601091828204019190066002026101000a81549061ffff02191690555b505b600c80546000906118c89061ffff16612302565b91906101000a81548161ffff021916908361ffff16021790555081965050505050505090565b6001600160a01b03821661191557604051634e46966960e11b815260040160405180910390fd5b6000818152600460205260409020546001600160a01b03161561194b57604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106119f55772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611a21576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611a3f57662386f26fc10000830492506010015b6305f5e1008310611a57576305f5e100830492506008015b6127108310611a6b57612710830492506004015b60648310611a7d576064830492506002015b600a83106106135760010192915050565b600044611a9c6001436122ef565b6040805160208101939093529040908201523060608201526080810183905260a00160408051601f19818403018152919052805160209091012092915050565b6001600160e01b03198116811461072457600080fd5b600060208284031215611b0457600080fd5b8135610d9281611adc565b80356001600160a01b0381168114610a9957600080fd5b80356001600160601b0381168114610a9957600080fd5b60008060408385031215611b5057600080fd5b611b5983611b0f565b9150611b6760208401611b26565b90509250929050565b60005b83811015611b8b578181015183820152602001611b73565b50506000910152565b6020815260008251806020840152611bb3816040850160208701611b70565b601f01601f19169190910160400192915050565b600060208284031215611bd957600080fd5b5035919050565b60008060408385031215611bf357600080fd5b611bfc83611b0f565b946020939093013593505050565b600060208284031215611c1c57600080fd5b610d9282611b0f565b600080600060608486031215611c3a57600080fd5b611c4384611b0f565b9250611c5160208501611b0f565b9150604084013590509250925092565b60008060408385031215611c7457600080fd5b50508035926020909101359150565b60008083601f840112611c9557600080fd5b50813567ffffffffffffffff811115611cad57600080fd5b60208301915083602082850101111561083157600080fd5b60008060208385031215611cd857600080fd5b823567ffffffffffffffff811115611cef57600080fd5b611cfb85828601611c83565b90969095509350505050565b801515811461072457600080fd5b600060208284031215611d2757600080fd5b8135610d9281611d07565b600080600060608486031215611d4757600080fd5b83359250611d5760208501611b0f565b9150611d6560408501611b26565b90509250925092565b60008060008060408587031215611d8457600080fd5b843567ffffffffffffffff80821115611d9c57600080fd5b611da888838901611c83565b90965094506020870135915080821115611dc157600080fd5b50611dce87828801611c83565b95989497509550505050565b60008083601f840112611dec57600080fd5b50813567ffffffffffffffff811115611e0457600080fd5b6020830191508360208260051b850101111561083157600080fd5b60008060208385031215611e3257600080fd5b823567ffffffffffffffff811115611e4957600080fd5b611cfb85828601611dda565b60008060408385031215611e6857600080fd5b611e7183611b0f565b91506020830135611e8181611d07565b809150509250929050565b600080600080600060808688031215611ea457600080fd5b611ead86611b0f565b9450611ebb60208701611b0f565b935060408601359250606086013567ffffffffffffffff811115611ede57600080fd5b611eea88828901611c83565b969995985093965092949392505050565b600080600060408486031215611f1057600080fd5b611f1984611b0f565b9250602084013567ffffffffffffffff811115611f3557600080fd5b611f4186828701611dda565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b81811015611f8657835183529284019291840191600101611f6a565b50909695505050505050565b60008060408385031215611fa557600080fd5b611fae83611b0f565b9150611b6760208401611b0f565b600181811c90821680611fd057607f821691505b602082108103611ff057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4d756c74697369674f776e61626c653a2063616c6c6572206973206e6f74207460408201526c3432903932b0b61037bbb732b960991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761061357610613612043565b634e487b7160e01b600052601260045260246000fd5b60008261209557612095612070565b500490565b634e487b7160e01b600052604160045260246000fd5b601f8211156106e357600081815260208120601f850160051c810160208610156120d75750805b601f850160051c820191505b818110156120f6578281556001016120e3565b505050505050565b67ffffffffffffffff8311156121165761211661209a565b61212a836121248354611fbc565b836120b0565b6000601f84116001811461215e57600085156121465750838201355b600019600387901b1c1916600186901b178355610a5c565b600083815260209020601f19861690835b8281101561218f578685013582556020948501946001909201910161216f565b50868210156121ac5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602082840312156121d057600080fd5b8151610d9281611adc565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60008351612257818460208801611b70565b83519083019061226b818360208801611b70565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6000602082840312156122d057600080fd5b8151610d9281611d07565b6000826122ea576122ea612070565b500690565b8181038181111561061357610613612043565b600061ffff82168061231657612316612043565b600019019291505056fea2646970667358221220be4a3cdf31993c547f665bcae953ae9c5c8751d4d4ccf9467a695740e965361c64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotMinted()": [
        {
          "notice": "----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------"
        }
      ]
    },
    "events": {
      "Transfer(address,address,uint256)": {
        "notice": "----------------------------------------------------------------------- Events -----------------------------------------------------------------------"
      }
    },
    "kind": "user",
    "methods": {
      "getApproved(uint256)": {
        "notice": "----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------"
      },
      "name()": {
        "notice": "----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 148,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)145_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)"
      },
      {
        "astId": 2758,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2760,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2772,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2776,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2826,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "getApproved",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2832,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4055,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "realOwner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3364,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "operatorFilteringEnabled",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 3367,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "isRegistryActive",
        "offset": 21,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 3369,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "registryAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3377,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "redeemInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(RedeemInfo)3374_storage"
      },
      {
        "astId": 3381,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_numAvailableRemainingTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 3385,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_availableRemainingTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint16)65536_storage"
      },
      {
        "astId": 3767,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "4109",
        "type": "t_string_storage"
      },
      {
        "astId": 3769,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_baseTokenURIPermanent",
        "offset": 0,
        "slot": "4110",
        "type": "t_string_storage"
      },
      {
        "astId": 3772,
        "contract": "contracts/Azuki/Elemental.sol:Elemental",
        "label": "_isUriPermanentForToken",
        "offset": 0,
        "slot": "4111",
        "type": "t_struct(BitMap)1969_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)65536_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[65536]",
        "numberOfBytes": "131072"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)145_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)1969_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 1968,
            "contract": "contracts/Azuki/Elemental.sol:Elemental",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RedeemInfo)3374_storage": {
        "encoding": "inplace",
        "label": "struct Elemental.RedeemInfo",
        "members": [
          {
            "astId": 3371,
            "contract": "contracts/Azuki/Elemental.sol:Elemental",
            "label": "redeemBeanOpen",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3373,
            "contract": "contracts/Azuki/Elemental.sol:Elemental",
            "label": "beanAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)145_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/Azuki/Elemental.sol:Elemental",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/Azuki/Elemental.sol:Elemental",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}