{
  "language": "Solidity",
  "sources": {
    "@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint _start,\n        uint _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n                _gas, // gas\n                _target, // recipient\n                0, // ether value\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n                _gas, // gas\n                _target, // recipient\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\n        require(_buf.length >= 4);\n        uint _mask = LOW_28_MASK;\n        assembly {\n            // load the first word of\n            let _word := mload(add(_buf, 0x20))\n            // mask out the top 4 bytes\n            // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address _userApplication,\n        uint _configType\n    ) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ILayerZeroReceiver.sol\";\nimport \"./interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\nimport \"../libraries/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    using BytesLib for bytes;\n\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\n\n    ILayerZeroEndpoint public immutable lzEndpoint;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\n    address public precrime;\n\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\n\n    constructor(address _endpoint) {\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\n    }\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual override {\n        // lzReceive must be called by the endpoint for security\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\n\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n        require(\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\n            \"LzApp: invalid source sending contract\"\n        );\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function _lzSend(\n        uint16 _dstChainId,\n        bytes memory _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams,\n        uint _nativeFee\n    ) internal virtual {\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\n        _checkPayloadSize(_dstChainId, _payload.length);\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function _checkGasLimit(\n        uint16 _dstChainId,\n        uint16 _type,\n        bytes memory _adapterParams,\n        uint _extraGas\n    ) internal view virtual {\n        uint providedGasLimit = _getGasLimit(_adapterParams);\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n        require(providedGasLimit >= minGasLimit + _extraGas, \"LzApp: gas limit is too low\");\n    }\n\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\n        if (payloadSizeLimit == 0) {\n            // use default if not set\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\n        }\n        require(_payloadSize <= payloadSizeLimit, \"LzApp: payload size is too large\");\n    }\n\n    //---------------------------UserApplication config----------------------------------------\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address,\n        uint _configType\n    ) external view returns (bytes memory) {\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n    }\n\n    // generic config for LayerZero user Application\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external override onlyOwner {\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setSendVersion(_version);\n    }\n\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setReceiveVersion(_version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    // _path = abi.encodePacked(remoteAddress, localAddress)\n    // this function set the trusted path for the cross-chain communication\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = _path;\n        emit SetTrustedRemote(_remoteChainId, _path);\n    }\n\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n    }\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\n        require(path.length != 0, \"LzApp: no trusted path record\");\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n    }\n\n    function setPrecrime(address _precrime) external onlyOwner {\n        precrime = _precrime;\n        emit SetPrecrime(_precrime);\n    }\n\n    function setMinDstGas(\n        uint16 _dstChainId,\n        uint16 _packetType,\n        uint _minGas\n    ) external onlyOwner {\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n    }\n\n    // if the size is 0, it means default size limit\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\n        payloadSizeLimitLookup[_dstChainId] = _size;\n    }\n\n    //--------------------------- VIEW FUNCTION ----------------------------------------\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n        return keccak256(trustedSource) == keccak256(_srcAddress);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"../libraries/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\n            gasleft(),\n            150,\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\n        );\n        if (!success) {\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function _storeFailedMessage(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload,\n        bytes memory _reason\n    ) internal virtual {\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\n    }\n\n    function nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function retryMessage(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/onft721/interfaces/IONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./IONFT721Core.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @dev Interface of the ONFT standard\n */\ninterface IONFT721 is IONFT721Core, IERC721 {\n\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/onft721/interfaces/IONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the ONFT Core standard\n */\ninterface IONFT721Core is IERC165 {\n    /**\n     * @dev Emitted when `_tokenIds[]` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n     * `_nonce` is the outbound nonce from\n     */\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint[] _tokenIds);\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint[] _tokenIds);\n    event SetMinGasToTransferAndStore(uint _minGasToTransferAndStore);\n    event SetDstChainIdToTransferGas(uint16 _dstChainId, uint _dstChainIdToTransferGas);\n    event SetDstChainIdToBatchLimit(uint16 _dstChainId, uint _dstChainIdToBatchLimit);\n\n    /**\n     * @dev Emitted when `_payload` was received from lz, but not enough gas to deliver all tokenIds\n     */\n    event CreditStored(bytes32 _hashedPayload, bytes _payload);\n    /**\n     * @dev Emitted when `_hashedPayload` has been completely delivered\n     */\n    event CreditCleared(bytes32 _hashedPayload);\n\n    /**\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint _tokenId,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    /**\n     * @dev send tokens `_tokenIds[]` to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendBatchFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint[] calldata _tokenIds,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _tokenId - token Id to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint _tokenId,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _tokenIds[] - token Ids to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendBatchFee(\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint[] calldata _tokenIds,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint nativeFee, uint zroFee);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/onft721/ONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IONFT721.sol\";\nimport \"./ONFT721Core.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n// NOTE: this ONFT contract has no public minting logic.\n// must implement your own minting logic in child classes\ncontract ONFT721 is ONFT721Core, ERC721, IONFT721 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint _minGasToTransfer,\n        address _lzEndpoint\n    ) ERC721(_name, _symbol) ONFT721Core(_minGasToTransfer, _lzEndpoint) {}\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721Core, ERC721, IERC165) returns (bool) {\n        return interfaceId == type(IONFT721).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function _debitFrom(\n        address _from,\n        uint16,\n        bytes memory,\n        uint _tokenId\n    ) internal virtual override {\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \"ONFT721: send caller is not owner nor approved\");\n        require(ERC721.ownerOf(_tokenId) == _from, \"ONFT721: send from incorrect owner\");\n        _transfer(_from, address(this), _tokenId);\n    }\n\n    function _creditTo(\n        uint16,\n        address _toAddress,\n        uint _tokenId\n    ) internal virtual override {\n        require(!_exists(_tokenId) || (_exists(_tokenId) && ERC721.ownerOf(_tokenId) == address(this)));\n        if (!_exists(_tokenId)) {\n            _safeMint(_toAddress, _tokenId);\n        } else {\n            _transfer(address(this), _toAddress, _tokenId);\n        }\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/onft721/ONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IONFT721Core.sol\";\nimport \"../../lzApp/NonblockingLzApp.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, ReentrancyGuard, IONFT721Core {\n    uint16 public constant FUNCTION_TYPE_SEND = 1;\n\n    struct StoredCredit {\n        uint16 srcChainId;\n        address toAddress;\n        uint index; // which index of the tokenIds remain\n        bool creditsRemain;\n    }\n\n    uint public minGasToTransferAndStore; // min amount of gas required to transfer, and also store the payload\n    mapping(uint16 => uint) public dstChainIdToBatchLimit;\n    mapping(uint16 => uint) public dstChainIdToTransferGas; // per transfer amount of gas required to mint/transfer on the dst\n    mapping(bytes32 => StoredCredit) public storedCredits;\n\n    constructor(uint _minGasToTransferAndStore, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\n        require(_minGasToTransferAndStore > 0, \"minGasToTransferAndStore must be > 0\");\n        minGasToTransferAndStore = _minGasToTransferAndStore;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes memory _toAddress,\n        uint _tokenId,\n        bool _useZro,\n        bytes memory _adapterParams\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\n        return estimateSendBatchFee(_dstChainId, _toAddress, _toSingletonArray(_tokenId), _useZro, _adapterParams);\n    }\n\n    function estimateSendBatchFee(\n        uint16 _dstChainId,\n        bytes memory _toAddress,\n        uint[] memory _tokenIds,\n        bool _useZro,\n        bytes memory _adapterParams\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\n    }\n\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes memory _toAddress,\n        uint _tokenId,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) public payable virtual override {\n        _send(_from, _dstChainId, _toAddress, _toSingletonArray(_tokenId), _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function sendBatchFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes memory _toAddress,\n        uint[] memory _tokenIds,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) public payable virtual override {\n        _send(_from, _dstChainId, _toAddress, _tokenIds, _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function _send(\n        address _from,\n        uint16 _dstChainId,\n        bytes memory _toAddress,\n        uint[] memory _tokenIds,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) internal virtual {\n        // allow 1 by default\n        require(_tokenIds.length > 0, \"tokenIds[] is empty\");\n        require(_tokenIds.length == 1 || _tokenIds.length <= dstChainIdToBatchLimit[_dstChainId], \"batch size exceeds dst batch limit\");\n\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            _debitFrom(_from, _dstChainId, _toAddress, _tokenIds[i]);\n        }\n\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\n\n        _checkGasLimit(_dstChainId, FUNCTION_TYPE_SEND, _adapterParams, dstChainIdToTransferGas[_dstChainId] * _tokenIds.length);\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\n        emit SendToChain(_dstChainId, _from, _toAddress, _tokenIds);\n    }\n\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64, /*_nonce*/\n        bytes memory _payload\n    ) internal virtual override {\n        // decode and load the toAddress\n        (bytes memory toAddressBytes, uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\n\n        address toAddress;\n        assembly {\n            toAddress := mload(add(toAddressBytes, 20))\n        }\n\n        uint nextIndex = _creditTill(_srcChainId, toAddress, 0, tokenIds);\n        if (nextIndex < tokenIds.length) {\n            // not enough gas to complete transfers, store to be cleared in another tx\n            bytes32 hashedPayload = keccak256(_payload);\n            storedCredits[hashedPayload] = StoredCredit(_srcChainId, toAddress, nextIndex, true);\n            emit CreditStored(hashedPayload, _payload);\n        }\n\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenIds);\n    }\n\n    // Public function for anyone to clear and deliver the remaining batch sent tokenIds\n    function clearCredits(bytes memory _payload) external virtual nonReentrant {\n        bytes32 hashedPayload = keccak256(_payload);\n        require(storedCredits[hashedPayload].creditsRemain, \"no credits stored\");\n\n        (, uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\n\n        uint nextIndex = _creditTill(\n            storedCredits[hashedPayload].srcChainId,\n            storedCredits[hashedPayload].toAddress,\n            storedCredits[hashedPayload].index,\n            tokenIds\n        );\n        require(nextIndex > storedCredits[hashedPayload].index, \"not enough gas to process credit transfer\");\n\n        if (nextIndex == tokenIds.length) {\n            // cleared the credits, delete the element\n            delete storedCredits[hashedPayload];\n            emit CreditCleared(hashedPayload);\n        } else {\n            // store the next index to mint\n            storedCredits[hashedPayload] = StoredCredit(\n                storedCredits[hashedPayload].srcChainId,\n                storedCredits[hashedPayload].toAddress,\n                nextIndex,\n                true\n            );\n        }\n    }\n\n    // When a srcChain has the ability to transfer more chainIds in a single tx than the dst can do.\n    // Needs the ability to iterate and stop if the minGasToTransferAndStore is not met\n    function _creditTill(\n        uint16 _srcChainId,\n        address _toAddress,\n        uint _startIndex,\n        uint[] memory _tokenIds\n    ) internal returns (uint) {\n        uint i = _startIndex;\n        while (i < _tokenIds.length) {\n            // if not enough gas to process, store this index for next loop\n            if (gasleft() < minGasToTransferAndStore) break;\n\n            _creditTo(_srcChainId, _toAddress, _tokenIds[i]);\n            i++;\n        }\n\n        // indicates the next index to send of tokenIds,\n        // if i == tokenIds.length, we are finished\n        return i;\n    }\n\n    function setMinGasToTransferAndStore(uint _minGasToTransferAndStore) external onlyOwner {\n        require(_minGasToTransferAndStore > 0, \"minGasToTransferAndStore must be > 0\");\n        minGasToTransferAndStore = _minGasToTransferAndStore;\n        emit SetMinGasToTransferAndStore(_minGasToTransferAndStore);\n    }\n\n    // ensures enough gas in adapter params to handle batch transfer gas amounts on the dst\n    function setDstChainIdToTransferGas(uint16 _dstChainId, uint _dstChainIdToTransferGas) external onlyOwner {\n        require(_dstChainIdToTransferGas > 0, \"dstChainIdToTransferGas must be > 0\");\n        dstChainIdToTransferGas[_dstChainId] = _dstChainIdToTransferGas;\n        emit SetDstChainIdToTransferGas(_dstChainId, _dstChainIdToTransferGas);\n    }\n\n    // limit on src the amount of tokens to batch send\n    function setDstChainIdToBatchLimit(uint16 _dstChainId, uint _dstChainIdToBatchLimit) external onlyOwner {\n        require(_dstChainIdToBatchLimit > 0, \"dstChainIdToBatchLimit must be > 0\");\n        dstChainIdToBatchLimit[_dstChainId] = _dstChainIdToBatchLimit;\n        emit SetDstChainIdToBatchLimit(_dstChainId, _dstChainIdToBatchLimit);\n    }\n\n    function _debitFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes memory _toAddress,\n        uint _tokenId\n    ) internal virtual;\n\n    function _creditTo(\n        uint16 _srcChainId,\n        address _toAddress,\n        uint _tokenId\n    ) internal virtual;\n\n    function _toSingletonArray(uint element) internal pure returns (uint[] memory) {\n        uint[] memory array = new uint[](1);\n        array[0] = element;\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "contracts/SpheraHead/closedsea/OperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\r\n/// mandatory on-chain royalty enforcement in order for new collections to\r\n/// receive royalties.\r\n/// For more information, see:\r\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\r\nabstract contract OperatorFilterer {\r\n    /// @dev The default OpenSea operator blocklist subscription.\r\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\r\n\r\n    /// @dev The OpenSea operator filter registry.\r\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\r\n\r\n    /// @dev Registers the current contract to OpenSea's operator filter,\r\n    /// and subscribe to the default OpenSea operator blocklist.\r\n    /// Note: Will not revert nor update existing settings for repeated registration.\r\n    function _registerForOperatorFiltering() internal virtual {\r\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\r\n    }\r\n\r\n    /// @dev Registers the current contract to OpenSea's operator filter.\r\n    /// Note: Will not revert nor update existing settings for repeated registration.\r\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\r\n        internal\r\n        virtual\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\r\n\r\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\r\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\r\n\r\n            for {} iszero(subscribe) {} {\r\n                if iszero(subscriptionOrRegistrantToCopy) {\r\n                    functionSelector := 0x4420e486 // `register(address)`.\r\n                    break\r\n                }\r\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\r\n                break\r\n            }\r\n            // Store the function selector.\r\n            mstore(0x00, shl(224, functionSelector))\r\n            // Store the `address(this)`.\r\n            mstore(0x04, address())\r\n            // Store the `subscriptionOrRegistrantToCopy`.\r\n            mstore(0x24, subscriptionOrRegistrantToCopy)\r\n            // Register into the registry.\r\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\r\n                // If the function selector has not been overwritten,\r\n                // it is an out-of-gas error.\r\n                if eq(shr(224, mload(0x00)), functionSelector) {\r\n                    // To prevent gas under-estimation.\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n            // Restore the part of the free memory pointer that was overwritten,\r\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\r\n            mstore(0x24, 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\r\n    modifier onlyAllowedOperator(address from) virtual {\r\n        if (from != msg.sender) {\r\n            if (!_isPriorityOperator(msg.sender)) {\r\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to guard a function from approving a blocked operator..\r\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n        if (!_isPriorityOperator(operator)) {\r\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\r\n    function _revertIfBlocked(address operator) private view {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Store the function selector of `isOperatorAllowed(address,address)`,\r\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\r\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\r\n            mstore(0x00, 0xc6171134001122334455)\r\n            // Store the `address(this)`.\r\n            mstore(0x1a, address())\r\n            // Store the `operator`.\r\n            mstore(0x3a, operator)\r\n\r\n            // `isOperatorAllowed` always returns true if it does not revert.\r\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\r\n                // Bubble up the revert if the staticcall reverts.\r\n                returndatacopy(0x00, 0x00, returndatasize())\r\n                revert(0x00, returndatasize())\r\n            }\r\n\r\n            // We'll skip checking if `from` is inside the blacklist.\r\n            // Even though that can block transferring out of wrapper contracts,\r\n            // we don't want tokens to be stuck.\r\n\r\n            // Restore the part of the free memory pointer that was overwritten,\r\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\r\n            mstore(0x3a, 0)\r\n        }\r\n    }\r\n\r\n    /// @dev For deriving contracts to override, so that operator filtering\r\n    /// can be turned on / off.\r\n    /// Returns true by default.\r\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\r\n    /// skip operator filtering, helping users save gas.\r\n    /// Returns false for all inputs by default.\r\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\r\n        return false;\r\n    }\r\n}"
    },
    "contracts/SpheraHead/MultisigOwnable.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\r\n// Source: https://github.com/tubby-cats/dual-ownership-nft\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nabstract contract MultisigOwnable is Ownable {\r\n    address public realOwner;\r\n\r\n    constructor() {\r\n        realOwner = msg.sender;\r\n    }\r\n\r\n    modifier onlyRealOwner() {\r\n        require(realOwner == msg.sender, \"MultisigOwnable: caller is not the real owner\");\r\n        _;\r\n    }\r\n\r\n    function transferRealOwnership(address newRealOwner) public onlyRealOwner {\r\n        realOwner = newRealOwner;\r\n    }\r\n\r\n    function transferLowerOwnership(address newOwner) public onlyRealOwner {\r\n        transferOwnership(newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/SpheraHead/SpheraHead.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@layerzerolabs/solidity-examples/contracts/token/onft721/ONFT721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\nimport {BitMaps} from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\r\n\r\nimport \"./closedsea/OperatorFilterer.sol\";\r\nimport \"./MultisigOwnable.sol\";\r\n\r\nerror NotAllowedByRegistry();\r\nerror RegistryNotSet();\r\nerror InvalidTokenId();\r\nerror BagAddressNotSet();\r\nerror RedeemBagNotOpen();\r\nerror InvalidRedeemer();\r\nerror NoMoreTokenIds();\r\n\r\ninterface IRegistry {\r\n    function isAllowedOperator(address operator) external view returns (bool);\r\n}\r\n\r\ncontract SpheraHead is ERC2981, ONFT721, MultisigOwnable, OperatorFilterer {\r\n    using Strings for uint;\r\n    using BitMaps for BitMaps.BitMap;\r\n\r\n    event BagRedeemed(address indexed to, uint indexed tokenId, uint indexed bagId);\r\n\r\n    bool public operatorFilteringEnabled = true;\r\n    bool public isRegistryActive = false;\r\n    address public registryAddress;\r\n\r\n    struct RedeemInfo {\r\n        bool redeemBagOpen;\r\n        address bagAddress;\r\n    }\r\n    RedeemInfo public redeemInfo;\r\n\r\n    uint16 public immutable MAX_SUPPLY;\r\n    uint16 internal _numAvailableRemainingTokens;\r\n    // Data structure used for Fisher Yates shuffle\r\n    uint16[65536] internal _availableRemainingTokens;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint16 maxSupply_, uint _minGasToStore, address _lzEndpoint) ONFT721(_name, _symbol, _minGasToStore, _lzEndpoint) {\r\n        MAX_SUPPLY = maxSupply_;\r\n        _numAvailableRemainingTokens = maxSupply_;\r\n\r\n        _registerForOperatorFiltering();\r\n        operatorFilteringEnabled = true;\r\n    }\r\n\r\n    // ------------\r\n    // Redeem bags\r\n    // ------------\r\n    function redeemBags(address to, uint[] calldata bagIds) public returns (uint[] memory) {\r\n        RedeemInfo memory info = redeemInfo;\r\n\r\n        if (!info.redeemBagOpen) {\r\n            revert RedeemBagNotOpen();\r\n        }\r\n        if (msg.sender != info.bagAddress) {\r\n            revert InvalidRedeemer();\r\n        }\r\n\r\n        uint amount = bagIds.length;\r\n        uint[] memory tokenIds = new uint[](amount);\r\n\r\n        // Assume data has already been validated by the bag contract\r\n        for (uint i; i < amount; ) {\r\n            uint bagId = bagIds[i];\r\n\r\n            uint tokenId = _useRandomAvailableTokenId();\r\n            // Don't need safeMint, as the calling address has a SpheraKitBag in it already\r\n            _mint(to, tokenId);\r\n            emit BagRedeemed(to, tokenId, bagId);\r\n            tokenIds[i] = tokenId;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return tokenIds;\r\n    }\r\n\r\n    // Generates a pseudorandom number between [1,MAX_SUPPLY) that has not yet been generated before, in O(1) time.\r\n    //\r\n    // Uses Durstenfeld's version of the Yates Shuffle https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\r\n    // with a twist to avoid having to manually spend gas to preset an array's values to be values 0...n.\r\n    // It does this by interpreting zero-values for an index X as meaning that index X itself is an available value\r\n    // that is returnable.\r\n    //\r\n    // How it works:\r\n    //  - zero-initialize a mapping (_availableRemainingTokens) and track its length (_numAvailableRemainingTokens). functionally similar to an array with dynamic sizing\r\n    //    - this mapping will track all remaining valid values that haven't been generated yet, through a combination of its indices and values\r\n    //      - if _availableRemainingTokens[x] == 0, that means x has not been generated yet\r\n    //      - if _availableRemainingTokens[x] != 0, that means _availableRemainingTokens[x] has not been generated yet\r\n    //  - when prompted for a random number between [0,MAX_SUPPLY) that hasn't already been used:\r\n    //    - generate a random index randIndex between [0,_numAvailableRemainingTokens)\r\n    //    - examine the value at _availableRemainingTokens[randIndex]\r\n    //        - if the value is zero, it means randIndex has not been used, so we can return randIndex\r\n    //        - if the value is non-zero, it means the value has not been used, so we can return _availableRemainingTokens[randIndex]\r\n    //    - update the _availableRemainingTokens mapping state\r\n    //        - set _availableRemainingTokens[randIndex] to either the index or the value of the last entry in the mapping (depends on the last entry's state)\r\n    //        - decrement _numAvailableRemainingTokens to mimic the shrinking of an array\r\n    function _useRandomAvailableTokenId() internal returns (uint) {\r\n        uint numAvailableRemainingTokens = _numAvailableRemainingTokens;\r\n        if (numAvailableRemainingTokens == 0) {\r\n            revert NoMoreTokenIds();\r\n        }\r\n\r\n        uint randomNum = _getRandomNum(numAvailableRemainingTokens);\r\n        uint randomIndex = (randomNum % numAvailableRemainingTokens) + 1;\r\n        uint valAtIndex = _availableRemainingTokens[randomIndex];\r\n\r\n        uint result;\r\n        if (valAtIndex == 0) {\r\n            // This means the index itself is still an available token\r\n            result = randomIndex;\r\n        } else {\r\n            // This means the index itself is not an available token, but the val at that index is.\r\n            result = valAtIndex;\r\n        }\r\n\r\n        uint lastIndex = numAvailableRemainingTokens;\r\n        if (randomIndex != lastIndex) {\r\n            // Replace the value at randomIndex, now that it's been used.\r\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\r\n            uint lastValInArray = _availableRemainingTokens[lastIndex];\r\n            if (lastValInArray == 0) {\r\n                // This means the index itself is still an available token\r\n                // Cast is safe as we know that lastIndex cannot > MAX_SUPPLY, which is a uint16\r\n                _availableRemainingTokens[randomIndex] = uint16(lastIndex);\r\n            } else {\r\n                // This means the index itself is not an available token, but the val at that index is.\r\n                // Cast is safe as we know that lastValInArray cannot > MAX_SUPPLY, which is a uint16\r\n                _availableRemainingTokens[randomIndex] = uint16(lastValInArray);\r\n                delete _availableRemainingTokens[lastIndex];\r\n            }\r\n        }\r\n\r\n        --_numAvailableRemainingTokens;\r\n\r\n        return result;\r\n    }\r\n\r\n    // On-chain randomness tradeoffs are acceptable here as it's only used for the SpheraHead's id number itself, not the resulting Elemental's metadata (which is determined by the source SpheraKitBag).\r\n    function _getRandomNum(uint numAvailableRemainingTokens) internal view returns (uint) {\r\n        return uint(keccak256(abi.encode(block.prevrandao, blockhash(block.number - 1), address(this), numAvailableRemainingTokens)));\r\n    }\r\n\r\n    function setBagAddress(address contractAddress) external onlyOwner {\r\n        redeemInfo = RedeemInfo(redeemInfo.redeemBagOpen, contractAddress);\r\n    }\r\n\r\n    function setRedeemBagState(bool _redeemBagOpen) external onlyOwner {\r\n        address bagAddress = redeemInfo.bagAddress;\r\n        if (bagAddress == address(0)) {\r\n            revert BagAddressNotSet();\r\n        }\r\n        redeemInfo = RedeemInfo(_redeemBagOpen, bagAddress);\r\n    }\r\n\r\n    // ------------\r\n    // Total Supply\r\n    // ------------\r\n    function totalSupply() external view returns (uint) {\r\n        unchecked {\r\n            // Does not need to account for burns as they aren't supported.\r\n            return MAX_SUPPLY - _numAvailableRemainingTokens;\r\n        }\r\n    }\r\n\r\n    // --------\r\n    // Metadata\r\n    // --------\r\n    function tokenURI(uint tokenId) public view override returns (string memory) {\r\n        if (ownerOf(tokenId) == address(0)) {\r\n            revert InvalidTokenId();\r\n        }\r\n        string memory baseURI = _getBaseURIForToken(tokenId);\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    string private _baseTokenURI;\r\n    string private _baseTokenURIPermanent;\r\n    // Keys are SpheraHead token ids\r\n    BitMaps.BitMap private _isUriPermanentForToken;\r\n\r\n    function _getBaseURIForToken(uint tokenId) private view returns (string memory) {\r\n        return _isUriPermanentForToken.get(tokenId) ? _baseTokenURIPermanent : _baseTokenURI;\r\n    }\r\n\r\n    function setBaseURI(string calldata baseURI) external onlyOwner {\r\n        _baseTokenURI = baseURI;\r\n    }\r\n\r\n    function setBaseURIPermanent(string calldata baseURIPermanent) external onlyOwner {\r\n        _baseTokenURIPermanent = baseURIPermanent;\r\n    }\r\n\r\n    function setIsUriPermanent(uint[] calldata tokenIds) external onlyOwner {\r\n        for (uint i = 0; i < tokenIds.length; ) {\r\n            _isUriPermanentForToken.set(tokenIds[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // --------\r\n    // EIP-2981\r\n    // --------\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\r\n        _setDefaultRoyalty(receiver, feeNumerator);\r\n    }\r\n\r\n    function setTokenRoyalty(uint tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\r\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\r\n    }\r\n\r\n    // ---------------------------------------------------\r\n    // OperatorFilterer overrides (overrides, values etc.)\r\n    // ---------------------------------------------------\r\n    function setApprovalForAll(address operator, bool approved) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    function setOperatorFilteringEnabled(bool value) public onlyOwner {\r\n        operatorFilteringEnabled = value;\r\n    }\r\n\r\n    function _operatorFilteringEnabled() internal view override returns (bool) {\r\n        return operatorFilteringEnabled;\r\n    }\r\n\r\n    function approve(address operator, uint tokenId) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    // --------------\r\n    // Registry check\r\n    // --------------\r\n    // Solbase ERC721 calls transferFrom internally in its two safeTransferFrom functions, so we don't need to override those.\r\n    // Also, onlyAllowedOperator is from closedsea\r\n    function transferFrom(address from, address to, uint id) public override(ERC721, IERC721) onlyAllowedOperator(from) {\r\n        if (!_isValidAgainstRegistry(msg.sender)) {\r\n            revert NotAllowedByRegistry();\r\n        }\r\n        super.transferFrom(from, to, id);\r\n    }\r\n\r\n    function _isValidAgainstRegistry(address operator) internal view returns (bool) {\r\n        if (isRegistryActive) {\r\n            IRegistry registry = IRegistry(registryAddress);\r\n            return registry.isAllowedOperator(operator);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setIsRegistryActive(bool _isRegistryActive) external onlyOwner {\r\n        if (registryAddress == address(0)) revert RegistryNotSet();\r\n        isRegistryActive = _isRegistryActive;\r\n    }\r\n\r\n    function setRegistryAddress(address _registryAddress) external onlyOwner {\r\n        registryAddress = _registryAddress;\r\n    }\r\n\r\n    // -------\r\n    // EIP-165\r\n    // -------\r\n    function supportsInterface(bytes4 interfaceId) public view override(ONFT721, ERC2981) returns (bool) {\r\n        return ONFT721.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/SpheraHead/SpheraKitBag.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n//import \"@layerzerolabs/solidity-examples/contracts/token/onft721/ONFT721A.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"erc721a/contracts/ERC721A.sol\";\r\nimport \"./closedsea/OperatorFilterer.sol\";\r\nimport \"./MultisigOwnable.sol\";\r\nimport \"./Whitelist.sol\";\r\n\r\nerror InvalidPeriodSetup();\r\nerror MaxPeriodMintSupplyReached();\r\nerror RedeemBagNotOpen();\r\nerror BagRedeemerNotSet();\r\nerror RegistryNotSet();\r\nerror NotAllowedByRegistry();\r\nerror WithdrawFailed();\r\nerror InitialTransferLockOn();\r\nerror InsufficientFunds();\r\nerror OverMaxSupply();\r\nerror PeriodNotOpen();\r\nerror MintingTooMuchInPeriod();\r\n\r\n//The interface of a sphera head nft contract\r\ninterface IBagRedeemer {\r\n    function redeemBags(address to, uint[] calldata BagIds) external returns (uint[] memory);\r\n}\r\n\r\n//Used for openzeppelin contract registry\r\ninterface IRegistry {\r\n    function isAllowedOperator(address operator) external view returns (bool);\r\n}\r\n\r\ncontract SpheraKitBag is ERC2981, MultisigOwnable, OperatorFilterer, ERC721A, Whitelist {\r\n    event PeriodMint(address indexed minter, uint period, uint16 indexed amount); // Period mint event\r\n\r\n    bool public operatorFilteringEnabled = true; //Operator Filtering for Openzepplin contract registry\r\n    bool public initialTransferLockOn = true; //Initial lock on transfer functionality\r\n    bool public isRegistryActive = false; //Openzeppelin registry checker\r\n    address public registryAddress; //Openzeppelin registry address\r\n\r\n    uint public immutable MAX_SUPPLY;\r\n\r\n    //----- Period mint variables definition start -----\r\n    // Constants for period\r\n    uint public constant GTD_PERIOD = 1;\r\n    uint public constant FCFS_PERIOD = 2;\r\n    uint public constant PUBLIC_PERIOD = 3;\r\n\r\n    //Structure for Period Information\r\n    struct PeriodInfo {\r\n        uint32 startTime;\r\n        uint32 endTime;\r\n        uint64 price;\r\n        uint64 MAX_MINT_ALLOWED;\r\n        uint64 MAX_SUPPLY;\r\n    }\r\n\r\n    //Period-mint related functions\r\n    uint public currentPeriod;\r\n    mapping(uint => PeriodInfo) public periodInfo;\r\n    mapping(uint => mapping(address => uint)) public individualMintedInPeriod;\r\n    mapping(uint => uint64) public totalMintedInPeriod;\r\n    //----- Period mint variables definition end -----\r\n    struct RedeemInfo {\r\n        bool redeemBagOpen;\r\n        address BagRedeemer;\r\n    }\r\n    RedeemInfo public redeemInfo;\r\n\r\n    string private _baseTokenURI;\r\n\r\n    address payable public immutable WITHDRAW_ADDRESS;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint _maxSupply, address payable _withdrawAddress) ERC721A(_name, _symbol) {\r\n        MAX_SUPPLY = _maxSupply;\r\n        WITHDRAW_ADDRESS = _withdrawAddress;\r\n    }\r\n\r\n    // This function allows users to mint tokens during a specific period, with certain conditions and validations.\r\n    function periodMint(\r\n        uint _period, // The period during which the minting is allowed.\r\n        uint16 amount, // The number of tokens the user wants to mint.\r\n        bytes32[] memory proof // Proof of eligibility, required for GTD and FCFS periods.\r\n    ) external payable {\r\n        // Retrieve the period information from the contract's storage.\r\n        PeriodInfo memory info = periodInfo[_period];\r\n\r\n        // Check if the current period matches the requested period and if the minting period is open.\r\n        if (\r\n            currentPeriod != _period || // Ensure the requested period is the current active period.\r\n            info.startTime == 0 || // Check if the period has been set up.\r\n            block.timestamp < info.startTime || // Ensure the current time is after the start of the period.\r\n            block.timestamp >= info.endTime // Ensure the current time is before the end of the period.\r\n        ) {\r\n            revert PeriodNotOpen(); // If any of the above conditions are not met, revert the transaction.\r\n        }\r\n\r\n        // For GTD and FCFS periods, validate the sender's address using the provided proof.\r\n        if (_period == GTD_PERIOD) {\r\n            require(gtd_validateAddress(proof, msg.sender) == true, \"Invalid minter.\");\r\n        } else if (_period == FCFS_PERIOD) {\r\n            require(fcfs_validateAddress(proof, msg.sender) == true, \"Invalid minter.\");\r\n        }\r\n\r\n        // Retrieve the number of tokens already minted by the sender in this period.\r\n        uint numMintedInPeriodLoc = individualMintedInPeriod[_period][msg.sender];\r\n\r\n        // Check if the sender is trying to mint more tokens than allowed in this period.\r\n        if (amount > info.MAX_MINT_ALLOWED - individualMintedInPeriod[_period][msg.sender]) {\r\n            revert MintingTooMuchInPeriod(); // Revert if the sender exceeds their limit.\r\n        }\r\n\r\n        // Retrieve the total number of tokens minted in this period so far.\r\n        uint64 totalPeriodMintedLocal = totalMintedInPeriod[_period];\r\n\r\n        // Check if the sender is trying to mint more tokens than the period's total supply limit.\r\n        if (amount + totalPeriodMintedLocal > info.MAX_SUPPLY) {\r\n            revert MaxPeriodMintSupplyReached(); // Revert if the total supply limit is exceeded.\r\n        }\r\n\r\n        // Check if the minting would exceed the contract's overall supply limit.\r\n        if (_totalMinted() + amount > MAX_SUPPLY) {\r\n            revert OverMaxSupply(); // Revert if the overall supply limit is exceeded.\r\n        }\r\n\r\n        // Calculate the total cost of minting the requested amount of tokens.\r\n        uint totalCost = uint(info.price) * amount;\r\n\r\n        // Ensure the sender has sent enough Ether to cover the cost.\r\n        if (msg.value < totalCost) {\r\n            revert InsufficientFunds(); // Revert if the sender has not sent enough Ether.\r\n        }\r\n\r\n        // Update the number of tokens minted by the sender in this period and the total minted in this period.\r\n        unchecked {\r\n            individualMintedInPeriod[_period][msg.sender] = amount + numMintedInPeriodLoc;\r\n            totalMintedInPeriod[_period] = totalPeriodMintedLocal + amount;\r\n        }\r\n\r\n        //Send current balance of the contract to withdraw address\r\n        assert(WITHDRAW_ADDRESS != address(0));\r\n        (bool sent, ) = WITHDRAW_ADDRESS.call{value: address(this).balance}(\"\");\r\n        if (!sent) {\r\n            revert WithdrawFailed();\r\n        }\r\n\r\n        // Mint the requested amount of tokens to the sender's address.\r\n        _mint(msg.sender, amount);\r\n\r\n        // Emit an event to log the minting transaction.\r\n        emit PeriodMint(msg.sender, _period, amount);\r\n    }\r\n\r\n    /*\r\n        This function sets which stage are we in.\r\n        1:GTD phase\r\n        2:FCFS phase\r\n        3:public phase\r\n    */\r\n    function openPeriod(uint _period) public onlyOwner {\r\n        currentPeriod = _period;\r\n    }\r\n\r\n    // This function allows the contract owner to set the parameters for a specific minting period.\r\n    function setPeriodParams(\r\n        uint _period, // The identifier of the period for which parameters are being set.\r\n        uint32 _startTime, // The start time of the period in seconds since the Unix epoch.\r\n        uint32 _endTime, // The end time of the period in seconds since the Unix epoch.\r\n        uint64 _price, // The price per token in wei for this period.\r\n        uint64 _MAX_MINT_ALLOWED, // The maximum number of tokens allowed to be minted by a single address during this period.\r\n        uint64 _MAX_SUPPLY // The maximum total supply of tokens for this period.\r\n    ) external onlyOwner {\r\n        // Validate the input parameters to ensure they are valid and do not conflict.\r\n        if (\r\n            _startTime == 0 || _endTime == 0 || _price == 0 // Ensure that start time, end time, and price are not zero.\r\n        ) {\r\n            revert InvalidPeriodSetup(); // Revert if any of the required parameters are missing or invalid.\r\n        }\r\n        if (_startTime >= _endTime) {\r\n            // Ensure the start time is before the end time.\r\n            revert InvalidPeriodSetup(); // Revert if the start time is not before the end time.\r\n        }\r\n\r\n        // Set the period information in the contract's storage.\r\n        periodInfo[_period] = PeriodInfo(_startTime, _endTime, _price, _MAX_MINT_ALLOWED, _MAX_SUPPLY);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        (bool sent, ) = WITHDRAW_ADDRESS.call{value: address(this).balance}(\"\");\r\n        if (!sent) {\r\n            revert WithdrawFailed();\r\n        }\r\n    }\r\n\r\n    // -----------\r\n    // Redeem Bag\r\n    // -----------\r\n    function redeemBags(uint[] calldata BagIds) external returns (uint[] memory) {\r\n        RedeemInfo memory info = redeemInfo;\r\n        if (!info.redeemBagOpen) {\r\n            revert RedeemBagNotOpen();\r\n        }\r\n        return _redeemBagsImpl(msg.sender, BagIds, true, info.BagRedeemer);\r\n    }\r\n\r\n    function _redeemBagsImpl(address BagOwner, uint[] memory BagIds, bool burnOwnerOrApprovedCheck, address BagRedeemer) private returns (uint[] memory) {\r\n        for (uint i; i < BagIds.length; ) {\r\n            _burn(BagIds[i], burnOwnerOrApprovedCheck);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return IBagRedeemer(BagRedeemer).redeemBags(BagOwner, BagIds);\r\n    }\r\n\r\n    function openRedeemBagState() external onlyOwner {\r\n        RedeemInfo memory info = redeemInfo;\r\n        if (info.BagRedeemer == address(0)) {\r\n            revert BagRedeemerNotSet();\r\n        }\r\n        redeemInfo = RedeemInfo(true, info.BagRedeemer);\r\n    }\r\n\r\n    function setBagRedeemer(address contractAddress) external onlyOwner {\r\n        redeemInfo = RedeemInfo(redeemInfo.redeemBagOpen, contractAddress);\r\n    }\r\n\r\n    // -------------------\r\n    // Break transfer lock\r\n    // -------------------\r\n    function breakTransferLock() external onlyOwner {\r\n        initialTransferLockOn = false;\r\n    }\r\n\r\n    // --------\r\n    // Metadata\r\n    // --------\r\n\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function setBaseURI(string calldata baseURI) external onlyOwner {\r\n        _baseTokenURI = baseURI;\r\n    }\r\n\r\n    // --------\r\n    // EIP-2981\r\n    // --------\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\r\n        _setDefaultRoyalty(receiver, feeNumerator);\r\n    }\r\n\r\n    function setTokenRoyalty(uint tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\r\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\r\n    }\r\n\r\n    // ---------------------------------------------------\r\n    // OperatorFilterer overrides (overrides, values etc.)\r\n    // ---------------------------------------------------\r\n    function setApprovalForAll(address operator, bool approved) public override(ERC721A) onlyAllowedOperatorApproval(operator) {\r\n        if (initialTransferLockOn) revert InitialTransferLockOn();\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    function setOperatorFilteringEnabled(bool value) public onlyOwner {\r\n        operatorFilteringEnabled = value;\r\n    }\r\n\r\n    function _operatorFilteringEnabled() internal view override returns (bool) {\r\n        return operatorFilteringEnabled;\r\n    }\r\n\r\n    function approve(address operator, uint tokenId) public payable override(ERC721A) onlyAllowedOperatorApproval(operator) {\r\n        if (initialTransferLockOn) revert InitialTransferLockOn();\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    // ERC721A calls transferFrom internally in its two safeTransferFrom functions, so we don't need to override those.\r\n    function transferFrom(address from, address to, uint tokenId) public payable override(ERC721A) onlyAllowedOperator(from) {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    // --------------\r\n    // Registry check\r\n    // --------------\r\n    function _beforeTokenTransfers(address from, address to, uint startTokenId, uint quantity) internal override {\r\n        if (initialTransferLockOn && from != address(0) && to != address(0)) revert InitialTransferLockOn();\r\n        if (_isValidAgainstRegistry(msg.sender)) {\r\n            super._beforeTokenTransfers(from, to, startTokenId, quantity);\r\n        } else {\r\n            revert NotAllowedByRegistry();\r\n        }\r\n    }\r\n\r\n    function _isValidAgainstRegistry(address operator) internal view returns (bool) {\r\n        if (isRegistryActive) {\r\n            IRegistry registry = IRegistry(registryAddress);\r\n            return registry.isAllowedOperator(operator);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setIsRegistryActive(bool _isRegistryActive) external onlyOwner {\r\n        if (registryAddress == address(0)) revert RegistryNotSet();\r\n        isRegistryActive = _isRegistryActive;\r\n    }\r\n\r\n    function setRegistryAddress(address _registryAddress) external onlyOwner {\r\n        registryAddress = _registryAddress;\r\n    }\r\n\r\n    // ----------------------------------------------\r\n    // EIP-165\r\n    // ----------------------------------------------\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721A, ERC2981) returns (bool) {\r\n        return ERC721A.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\r\n    }\r\n\r\n    //Overriden\r\n    function _startTokenId() internal view virtual override returns (uint) {\r\n        return 1;\r\n    }\r\n}\r\n"
    },
    "contracts/SpheraHead/Whitelist.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract Whitelist is Ownable {\r\n    bytes32 private gtdMerkleRoot;\r\n    bytes32 private fcfsMerkleRoot;\r\n\r\n    function setGtdMerkleRoot(bytes32 _gtdMerkleRoot) public onlyOwner returns (bytes32) {\r\n        gtdMerkleRoot = _gtdMerkleRoot;\r\n        return gtdMerkleRoot;\r\n    }\r\n\r\n    function setFcfsMerkleRoot(bytes32 _fcfsMerkleRoot) public onlyOwner returns (bytes32) {\r\n        fcfsMerkleRoot = _fcfsMerkleRoot;\r\n        return fcfsMerkleRoot;\r\n    }\r\n\r\n    function gtd_validateAddress(bytes32[] memory _merkleProof, address addr) public view returns (bool) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(addr));\r\n        return MerkleProof.verify(_merkleProof, gtdMerkleRoot, leaf);\r\n    }\r\n\r\n    function fcfs_validateAddress(bytes32[] memory _merkleProof, address addr) public view returns (bool) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(addr));\r\n        return MerkleProof.verify(_merkleProof, fcfsMerkleRoot, leaf);\r\n    }\r\n}\r\n"
    },
    "contracts/SpheraMarketplace/HederaResponseCodes.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.9 <0.9.0;\n\nlibrary HederaResponseCodes {\n    // response codes\n    int32 internal constant OK = 0; // The transaction passed the precheck validations.\n    int32 internal constant INVALID_TRANSACTION = 1; // For any error not handled by specific error codes listed below.\n    int32 internal constant PAYER_ACCOUNT_NOT_FOUND = 2; //Payer account does not exist.\n    int32 internal constant INVALID_NODE_ACCOUNT = 3; //Node Account provided does not match the node account of the node the transaction was submitted to.\n    int32 internal constant TRANSACTION_EXPIRED = 4; // Pre-Check error when TransactionValidStart + transactionValidDuration is less than current consensus time.\n    int32 internal constant INVALID_TRANSACTION_START = 5; // Transaction start time is greater than current consensus time\n    int32 internal constant INVALID_TRANSACTION_DURATION = 6; //valid transaction duration is a positive non zero number that does not exceed 120 seconds\n    int32 internal constant INVALID_SIGNATURE = 7; // The transaction signature is not valid\n    int32 internal constant MEMO_TOO_LONG = 8; //Transaction memo size exceeded 100 bytes\n    int32 internal constant INSUFFICIENT_TX_FEE = 9; // The fee provided in the transaction is insufficient for this type of transaction\n    int32 internal constant INSUFFICIENT_PAYER_BALANCE = 10; // The payer account has insufficient cryptocurrency to pay the transaction fee\n    int32 internal constant DUPLICATE_TRANSACTION = 11; // This transaction ID is a duplicate of one that was submitted to this node or reached consensus in the last 180 seconds (receipt period)\n    int32 internal constant BUSY = 12; //If API is throttled out\n    int32 internal constant NOT_SUPPORTED = 13; //The API is not currently supported\n\n    int32 internal constant INVALID_FILE_ID = 14; //The file id is invalid or does not exist\n    int32 internal constant INVALID_ACCOUNT_ID = 15; //The account id is invalid or does not exist\n    int32 internal constant INVALID_CONTRACT_ID = 16; //The contract id is invalid or does not exist\n    int32 internal constant INVALID_TRANSACTION_ID = 17; //Transaction id is not valid\n    int32 internal constant RECEIPT_NOT_FOUND = 18; //Receipt for given transaction id does not exist\n    int32 internal constant RECORD_NOT_FOUND = 19; //Record for given transaction id does not exist\n    int32 internal constant INVALID_SOLIDITY_ID = 20; //The solidity id is invalid or entity with this solidity id does not exist\n\n    int32 internal constant UNKNOWN = 21; // The responding node has submitted the transaction to the network. Its final status is still unknown.\n    int32 internal constant SUCCESS = 22; // The transaction succeeded\n    int32 internal constant FAIL_INVALID = 23; // There was a system error and the transaction failed because of invalid request parameters.\n    int32 internal constant FAIL_FEE = 24; // There was a system error while performing fee calculation, reserved for future.\n    int32 internal constant FAIL_BALANCE = 25; // There was a system error while performing balance checks, reserved for future.\n\n    int32 internal constant KEY_REQUIRED = 26; //Key not provided in the transaction body\n    int32 internal constant BAD_ENCODING = 27; //Unsupported algorithm/encoding used for keys in the transaction\n    int32 internal constant INSUFFICIENT_ACCOUNT_BALANCE = 28; //When the account balance is not sufficient for the transfer\n    int32 internal constant INVALID_SOLIDITY_ADDRESS = 29; //During an update transaction when the system is not able to find the Users Solidity address\n\n    int32 internal constant INSUFFICIENT_GAS = 30; //Not enough gas was supplied to execute transaction\n    int32 internal constant CONTRACT_SIZE_LIMIT_EXCEEDED = 31; //contract byte code size is over the limit\n    int32 internal constant LOCAL_CALL_MODIFICATION_EXCEPTION = 32; //local execution (query) is requested for a function which changes state\n    int32 internal constant CONTRACT_REVERT_EXECUTED = 33; //Contract REVERT OPCODE executed\n    int32 internal constant CONTRACT_EXECUTION_EXCEPTION = 34; //For any contract execution related error not handled by specific error codes listed above.\n    int32 internal constant INVALID_RECEIVING_NODE_ACCOUNT = 35; //In Query validation, account with +ve(amount) value should be Receiving node account, the receiver account should be only one account in the list\n    int32 internal constant MISSING_QUERY_HEADER = 36; // Header is missing in Query request\n\n    int32 internal constant ACCOUNT_UPDATE_FAILED = 37; // The update of the account failed\n    int32 internal constant INVALID_KEY_ENCODING = 38; // Provided key encoding was not supported by the system\n    int32 internal constant NULL_SOLIDITY_ADDRESS = 39; // null solidity address\n\n    int32 internal constant CONTRACT_UPDATE_FAILED = 40; // update of the contract failed\n    int32 internal constant INVALID_QUERY_HEADER = 41; // the query header is invalid\n\n    int32 internal constant INVALID_FEE_SUBMITTED = 42; // Invalid fee submitted\n    int32 internal constant INVALID_PAYER_SIGNATURE = 43; // Payer signature is invalid\n\n    int32 internal constant KEY_NOT_PROVIDED = 44; // The keys were not provided in the request.\n    int32 internal constant INVALID_EXPIRATION_TIME = 45; // Expiration time provided in the transaction was invalid.\n    int32 internal constant NO_WACL_KEY = 46; //WriteAccess Control Keys are not provided for the file\n    int32 internal constant FILE_CONTENT_EMPTY = 47; //The contents of file are provided as empty.\n    int32 internal constant INVALID_ACCOUNT_AMOUNTS = 48; // The crypto transfer credit and debit do not sum equal to 0\n    int32 internal constant EMPTY_TRANSACTION_BODY = 49; // Transaction body provided is empty\n    int32 internal constant INVALID_TRANSACTION_BODY = 50; // Invalid transaction body provided\n\n    int32 internal constant INVALID_SIGNATURE_TYPE_MISMATCHING_KEY = 51; // the type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of signature (base ed25519 signature, SignatureList, or ThresholdKeySignature)\n    int32 internal constant INVALID_SIGNATURE_COUNT_MISMATCHING_KEY = 52; // the number of key (KeyList, or ThresholdKey) does not match that of signature (SignatureList, or ThresholdKeySignature). e.g. if a keyList has 3 base keys, then the corresponding signatureList should also have 3 base signatures.\n\n    int32 internal constant EMPTY_LIVE_HASH_BODY = 53; // the livehash body is empty\n    int32 internal constant EMPTY_LIVE_HASH = 54; // the livehash data is missing\n    int32 internal constant EMPTY_LIVE_HASH_KEYS = 55; // the keys for a livehash are missing\n    int32 internal constant INVALID_LIVE_HASH_SIZE = 56; // the livehash data is not the output of a SHA-384 digest\n\n    int32 internal constant EMPTY_QUERY_BODY = 57; // the query body is empty\n    int32 internal constant EMPTY_LIVE_HASH_QUERY = 58; // the crypto livehash query is empty\n    int32 internal constant LIVE_HASH_NOT_FOUND = 59; // the livehash is not present\n    int32 internal constant ACCOUNT_ID_DOES_NOT_EXIST = 60; // the account id passed has not yet been created.\n    int32 internal constant LIVE_HASH_ALREADY_EXISTS = 61; // the livehash already exists for a given account\n\n    int32 internal constant INVALID_FILE_WACL = 62; // File WACL keys are invalid\n    int32 internal constant SERIALIZATION_FAILED = 63; // Serialization failure\n    int32 internal constant TRANSACTION_OVERSIZE = 64; // The size of the Transaction is greater than transactionMaxBytes\n    int32 internal constant TRANSACTION_TOO_MANY_LAYERS = 65; // The Transaction has more than 50 levels\n    int32 internal constant CONTRACT_DELETED = 66; //Contract is marked as deleted\n\n    int32 internal constant PLATFORM_NOT_ACTIVE = 67; // the platform node is either disconnected or lagging behind.\n    int32 internal constant KEY_PREFIX_MISMATCH = 68; // one internal key matches more than one prefixes on the signature map\n    int32 internal constant PLATFORM_TRANSACTION_NOT_CREATED = 69; // transaction not created by platform due to large backlog\n    int32 internal constant INVALID_RENEWAL_PERIOD = 70; // auto renewal period is not a positive number of seconds\n    int32 internal constant INVALID_PAYER_ACCOUNT_ID = 71; // the response code when a smart contract id is passed for a crypto API request\n    int32 internal constant ACCOUNT_DELETED = 72; // the account has been marked as deleted\n    int32 internal constant FILE_DELETED = 73; // the file has been marked as deleted\n    int32 internal constant ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS = 74; // same accounts repeated in the transfer account list\n    int32 internal constant SETTING_NEGATIVE_ACCOUNT_BALANCE = 75; // attempting to set negative balance value for crypto account\n    int32 internal constant OBTAINER_REQUIRED = 76; // when deleting smart contract that has crypto balance either transfer account or transfer smart contract is required\n    int32 internal constant OBTAINER_SAME_CONTRACT_ID = 77; //when deleting smart contract that has crypto balance you can not use the same contract id as transferContractId as the one being deleted\n    int32 internal constant OBTAINER_DOES_NOT_EXIST = 78; //transferAccountId or transferContractId specified for contract delete does not exist\n    int32 internal constant MODIFYING_IMMUTABLE_CONTRACT = 79; //attempting to modify (update or delete a immutable smart contract, i.e. one created without a admin key)\n    int32 internal constant FILE_SYSTEM_EXCEPTION = 80; //Unexpected exception thrown by file system functions\n    int32 internal constant AUTORENEW_DURATION_NOT_IN_RANGE = 81; // the duration is not a subset of [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION]\n    int32 internal constant ERROR_DECODING_BYTESTRING = 82; // Decoding the smart contract binary to a byte array failed. Check that the input is a valid hex string.\n    int32 internal constant CONTRACT_FILE_EMPTY = 83; // File to create a smart contract was of length zero\n    int32 internal constant CONTRACT_BYTECODE_EMPTY = 84; // Bytecode for smart contract is of length zero\n    int32 internal constant INVALID_INITIAL_BALANCE = 85; // Attempt to set negative initial balance\n    int32 internal constant INVALID_RECEIVE_RECORD_THRESHOLD = 86; // [Deprecated]. attempt to set negative receive record threshold\n    int32 internal constant INVALID_SEND_RECORD_THRESHOLD = 87; // [Deprecated]. attempt to set negative send record threshold\n    int32 internal constant ACCOUNT_IS_NOT_GENESIS_ACCOUNT = 88; // Special Account Operations should be performed by only Genesis account, return this code if it is not Genesis Account\n    int32 internal constant PAYER_ACCOUNT_UNAUTHORIZED = 89; // The fee payer account doesn't have permission to submit such Transaction\n    int32 internal constant INVALID_FREEZE_TRANSACTION_BODY = 90; // FreezeTransactionBody is invalid\n    int32 internal constant FREEZE_TRANSACTION_BODY_NOT_FOUND = 91; // FreezeTransactionBody does not exist\n    int32 internal constant TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 92; //Exceeded the number of accounts (both from and to) allowed for crypto transfer list\n    int32 internal constant RESULT_SIZE_LIMIT_EXCEEDED = 93; // Smart contract result size greater than specified maxResultSize\n    int32 internal constant NOT_SPECIAL_ACCOUNT = 94; //The payer account is not a special account(account 0.0.55)\n    int32 internal constant CONTRACT_NEGATIVE_GAS = 95; // Negative gas was offered in smart contract call\n    int32 internal constant CONTRACT_NEGATIVE_VALUE = 96; // Negative value / initial balance was specified in a smart contract call / create\n    int32 internal constant INVALID_FEE_FILE = 97; // Failed to update fee file\n    int32 internal constant INVALID_EXCHANGE_RATE_FILE = 98; // Failed to update exchange rate file\n    int32 internal constant INSUFFICIENT_LOCAL_CALL_GAS = 99; // Payment tendered for contract local call cannot cover both the fee and the gas\n    int32 internal constant ENTITY_NOT_ALLOWED_TO_DELETE = 100; // Entities with Entity ID below 1000 are not allowed to be deleted\n    int32 internal constant AUTHORIZATION_FAILED = 101; // Violating one of these rules: 1) treasury account can update all entities below 0.0.1000, 2) account 0.0.50 can update all entities from 0.0.51 - 0.0.80, 3) Network Function Master Account A/c 0.0.50 - Update all Network Function accounts & perform all the Network Functions listed below, 4) Network Function Accounts: i) A/c 0.0.55 - Update Address Book files (0.0.101/102), ii) A/c 0.0.56 - Update Fee schedule (0.0.111), iii) A/c 0.0.57 - Update Exchange Rate (0.0.112).\n    int32 internal constant FILE_UPLOADED_PROTO_INVALID = 102; // Fee Schedule Proto uploaded but not valid (append or update is required)\n    int32 internal constant FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK = 103; // Fee Schedule Proto uploaded but not valid (append or update is required)\n    int32 internal constant FEE_SCHEDULE_FILE_PART_UPLOADED = 104; // Fee Schedule Proto File Part uploaded\n    int32 internal constant EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED = 105; // The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage\n    int32 internal constant MAX_CONTRACT_STORAGE_EXCEEDED = 106; // Contract permanent storage exceeded the currently allowable limit\n    int32 internal constant TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT = 107; // Transfer Account should not be same as Account to be deleted\n    int32 internal constant TOTAL_LEDGER_BALANCE_INVALID = 108;\n    int32 internal constant EXPIRATION_REDUCTION_NOT_ALLOWED = 110; // The expiration date/time on a smart contract may not be reduced\n    int32 internal constant MAX_GAS_LIMIT_EXCEEDED = 111; //Gas exceeded currently allowable gas limit per transaction\n    int32 internal constant MAX_FILE_SIZE_EXCEEDED = 112; // File size exceeded the currently allowable limit\n\n    int32 internal constant INVALID_TOPIC_ID = 150; // The Topic ID specified is not in the system.\n    int32 internal constant INVALID_ADMIN_KEY = 155; // A provided admin key was invalid.\n    int32 internal constant INVALID_SUBMIT_KEY = 156; // A provided submit key was invalid.\n    int32 internal constant UNAUTHORIZED = 157; // An attempted operation was not authorized (ie - a deleteTopic for a topic with no adminKey).\n    int32 internal constant INVALID_TOPIC_MESSAGE = 158; // A ConsensusService message is empty.\n    int32 internal constant INVALID_AUTORENEW_ACCOUNT = 159; // The autoRenewAccount specified is not a valid, active account.\n    int32 internal constant AUTORENEW_ACCOUNT_NOT_ALLOWED = 160; // An adminKey was not specified on the topic, so there must not be an autoRenewAccount.\n    // The topic has expired, was not automatically renewed, and is in a 7 day grace period before the topic will be\n    // deleted unrecoverably. This error response code will not be returned until autoRenew functionality is supported\n    // by HAPI.\n    int32 internal constant TOPIC_EXPIRED = 162;\n    int32 internal constant INVALID_CHUNK_NUMBER = 163; // chunk number must be from 1 to total (chunks) inclusive.\n    int32 internal constant INVALID_CHUNK_TRANSACTION_ID = 164; // For every chunk, the payer account that is part of initialTransactionID must match the Payer Account of this transaction. The entire initialTransactionID should match the transactionID of the first chunk, but this is not checked or enforced by Hedera except when the chunk number is 1.\n    int32 internal constant ACCOUNT_FROZEN_FOR_TOKEN = 165; // Account is frozen and cannot transact with the token\n    int32 internal constant TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED = 166; // An involved account already has more than <tt>tokens.maxPerAccount</tt> associations with non-deleted tokens.\n    int32 internal constant INVALID_TOKEN_ID = 167; // The token is invalid or does not exist\n    int32 internal constant INVALID_TOKEN_DECIMALS = 168; // Invalid token decimals\n    int32 internal constant INVALID_TOKEN_INITIAL_SUPPLY = 169; // Invalid token initial supply\n    int32 internal constant INVALID_TREASURY_ACCOUNT_FOR_TOKEN = 170; // Treasury Account does not exist or is deleted\n    int32 internal constant INVALID_TOKEN_SYMBOL = 171; // Token Symbol is not UTF-8 capitalized alphabetical string\n    int32 internal constant TOKEN_HAS_NO_FREEZE_KEY = 172; // Freeze key is not set on token\n    int32 internal constant TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN = 173; // Amounts in transfer list are not net zero\n    int32 internal constant MISSING_TOKEN_SYMBOL = 174; // A token symbol was not provided\n    int32 internal constant TOKEN_SYMBOL_TOO_LONG = 175; // The provided token symbol was too long\n    int32 internal constant ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN = 176; // KYC must be granted and account does not have KYC granted\n    int32 internal constant TOKEN_HAS_NO_KYC_KEY = 177; // KYC key is not set on token\n    int32 internal constant INSUFFICIENT_TOKEN_BALANCE = 178; // Token balance is not sufficient for the transaction\n    int32 internal constant TOKEN_WAS_DELETED = 179; // Token transactions cannot be executed on deleted token\n    int32 internal constant TOKEN_HAS_NO_SUPPLY_KEY = 180; // Supply key is not set on token\n    int32 internal constant TOKEN_HAS_NO_WIPE_KEY = 181; // Wipe key is not set on token\n    int32 internal constant INVALID_TOKEN_MINT_AMOUNT = 182; // The requested token mint amount would cause an invalid total supply\n    int32 internal constant INVALID_TOKEN_BURN_AMOUNT = 183; // The requested token burn amount would cause an invalid total supply\n    int32 internal constant TOKEN_NOT_ASSOCIATED_TO_ACCOUNT = 184; // A required token-account relationship is missing\n    int32 internal constant CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT = 185; // The target of a wipe operation was the token treasury account\n    int32 internal constant INVALID_KYC_KEY = 186; // The provided KYC key was invalid.\n    int32 internal constant INVALID_WIPE_KEY = 187; // The provided wipe key was invalid.\n    int32 internal constant INVALID_FREEZE_KEY = 188; // The provided freeze key was invalid.\n    int32 internal constant INVALID_SUPPLY_KEY = 189; // The provided supply key was invalid.\n    int32 internal constant MISSING_TOKEN_NAME = 190; // Token Name is not provided\n    int32 internal constant TOKEN_NAME_TOO_LONG = 191; // Token Name is too long\n    int32 internal constant INVALID_WIPING_AMOUNT = 192; // The provided wipe amount must not be negative, zero or bigger than the token holder balance\n    int32 internal constant TOKEN_IS_IMMUTABLE = 193; // Token does not have Admin key set, thus update/delete transactions cannot be performed\n    int32 internal constant TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT = 194; // An <tt>associateToken</tt> operation specified a token already associated to the account\n    int32 internal constant TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES = 195; // An attempted operation is invalid until all token balances for the target account are zero\n    int32 internal constant ACCOUNT_IS_TREASURY = 196; // An attempted operation is invalid because the account is a treasury\n    int32 internal constant TOKEN_ID_REPEATED_IN_TOKEN_LIST = 197; // Same TokenIDs present in the token list\n    int32 internal constant TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 198; // Exceeded the number of token transfers (both from and to) allowed for token transfer list\n    int32 internal constant EMPTY_TOKEN_TRANSFER_BODY = 199; // TokenTransfersTransactionBody has no TokenTransferList\n    int32 internal constant EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS = 200; // TokenTransfersTransactionBody has a TokenTransferList with no AccountAmounts\n    int32 internal constant INVALID_SCHEDULE_ID = 201; // The Scheduled entity does not exist; or has now expired, been deleted, or been executed\n    int32 internal constant SCHEDULE_IS_IMMUTABLE = 202; // The Scheduled entity cannot be modified. Admin key not set\n    int32 internal constant INVALID_SCHEDULE_PAYER_ID = 203; // The provided Scheduled Payer does not exist\n    int32 internal constant INVALID_SCHEDULE_ACCOUNT_ID = 204; // The Schedule Create Transaction TransactionID account does not exist\n    int32 internal constant NO_NEW_VALID_SIGNATURES = 205; // The provided sig map did not contain any new valid signatures from required signers of the scheduled transaction\n    int32 internal constant UNRESOLVABLE_REQUIRED_SIGNERS = 206; // The required signers for a scheduled transaction cannot be resolved, for example because they do not exist or have been deleted\n    int32 internal constant SCHEDULED_TRANSACTION_NOT_IN_WHITELIST = 207; // Only whitelisted transaction types may be scheduled\n    int32 internal constant SOME_SIGNATURES_WERE_INVALID = 208; // At least one of the signatures in the provided sig map did not represent a valid signature for any required signer\n    int32 internal constant TRANSACTION_ID_FIELD_NOT_ALLOWED = 209; // The scheduled field in the TransactionID may not be set to true\n    int32 internal constant IDENTICAL_SCHEDULE_ALREADY_CREATED = 210; // A schedule already exists with the same identifying fields of an attempted ScheduleCreate (that is, all fields other than scheduledPayerAccountID)\n    int32 internal constant INVALID_ZERO_BYTE_IN_STRING = 211; // A string field in the transaction has a UTF-8 encoding with the prohibited zero byte\n    int32 internal constant SCHEDULE_ALREADY_DELETED = 212; // A schedule being signed or deleted has already been deleted\n    int32 internal constant SCHEDULE_ALREADY_EXECUTED = 213; // A schedule being signed or deleted has already been executed\n    int32 internal constant MESSAGE_SIZE_TOO_LARGE = 214; // ConsensusSubmitMessage request's message size is larger than allowed.\n    int32 internal constant OPERATION_REPEATED_IN_BUCKET_GROUPS = 215; // An operation was assigned to more than one throttle group in a given bucket\n    int32 internal constant BUCKET_CAPACITY_OVERFLOW = 216; // The capacity needed to satisfy all opsPerSec groups in a bucket overflowed a signed 8-byte integral type\n    int32 internal constant NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION = 217; // Given the network size in the address book, the node-level capacity for an operation would never be enough to accept a single request; usually means a bucket burstPeriod should be increased\n    int32 internal constant BUCKET_HAS_NO_THROTTLE_GROUPS = 218; // A bucket was defined without any throttle groups\n    int32 internal constant THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC = 219; // A throttle group was granted zero opsPerSec\n    int32 internal constant SUCCESS_BUT_MISSING_EXPECTED_OPERATION = 220; // The throttle definitions file was updated, but some supported operations were not assigned a bucket\n    int32 internal constant UNPARSEABLE_THROTTLE_DEFINITIONS = 221; // The new contents for the throttle definitions system file were not valid protobuf\n    int32 internal constant INVALID_THROTTLE_DEFINITIONS = 222; // The new throttle definitions system file were invalid, and no more specific error could be divined\n    int32 internal constant ACCOUNT_EXPIRED_AND_PENDING_REMOVAL = 223; // The transaction references an account which has passed its expiration without renewal funds available, and currently remains in the ledger only because of the grace period given to expired entities\n    int32 internal constant INVALID_TOKEN_MAX_SUPPLY = 224; // Invalid token max supply\n    int32 internal constant INVALID_TOKEN_NFT_SERIAL_NUMBER = 225; // Invalid token nft serial number\n    int32 internal constant INVALID_NFT_ID = 226; // Invalid nft id\n    int32 internal constant METADATA_TOO_LONG = 227; // Nft metadata is too long\n    int32 internal constant BATCH_SIZE_LIMIT_EXCEEDED = 228; // Repeated operations count exceeds the limit\n    int32 internal constant INVALID_QUERY_RANGE = 229; // The range of data to be gathered is out of the set boundaries\n    int32 internal constant FRACTION_DIVIDES_BY_ZERO = 230; // A custom fractional fee set a denominator of zero\n    int32 internal constant INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE = 231; // The transaction payer could not afford a custom fee\n    int32 internal constant CUSTOM_FEES_LIST_TOO_LONG = 232; // More than 10 custom fees were specified\n    int32 internal constant INVALID_CUSTOM_FEE_COLLECTOR = 233; // Any of the feeCollector accounts for customFees is invalid\n    int32 internal constant INVALID_TOKEN_ID_IN_CUSTOM_FEES = 234; // Any of the token Ids in customFees is invalid\n    int32 internal constant TOKEN_NOT_ASSOCIATED_TO_FEE_COLLECTOR = 235; // Any of the token Ids in customFees are not associated to feeCollector\n    int32 internal constant TOKEN_MAX_SUPPLY_REACHED = 236; // A token cannot have more units minted due to its configured supply ceiling\n    int32 internal constant SENDER_DOES_NOT_OWN_NFT_SERIAL_NO = 237; // The transaction attempted to move an NFT serial number from an account other than its owner\n    int32 internal constant CUSTOM_FEE_NOT_FULLY_SPECIFIED = 238; // A custom fee schedule entry did not specify either a fixed or fractional fee\n    int32 internal constant CUSTOM_FEE_MUST_BE_POSITIVE = 239; // Only positive fees may be assessed at this time\n    int32 internal constant TOKEN_HAS_NO_FEE_SCHEDULE_KEY = 240; // Fee schedule key is not set on token\n    int32 internal constant CUSTOM_FEE_OUTSIDE_NUMERIC_RANGE = 241; // A fractional custom fee exceeded the range of a 64-bit signed integer\n    int32 internal constant ROYALTY_FRACTION_CANNOT_EXCEED_ONE = 242; // A royalty cannot exceed the total fungible value exchanged for an NFT\n    int32 internal constant FRACTIONAL_FEE_MAX_AMOUNT_LESS_THAN_MIN_AMOUNT = 243; // Each fractional custom fee must have its maximum_amount, if specified, at least its minimum_amount\n    int32 internal constant CUSTOM_SCHEDULE_ALREADY_HAS_NO_FEES = 244; // A fee schedule update tried to clear the custom fees from a token whose fee schedule was already empty\n    int32 internal constant CUSTOM_FEE_DENOMINATION_MUST_BE_FUNGIBLE_COMMON = 245; // Only tokens of type FUNGIBLE_COMMON can be used to as fee schedule denominations\n    int32 internal constant CUSTOM_FRACTIONAL_FEE_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 246; // Only tokens of type FUNGIBLE_COMMON can have fractional fees\n    int32 internal constant INVALID_CUSTOM_FEE_SCHEDULE_KEY = 247; // The provided custom fee schedule key was invalid\n    int32 internal constant INVALID_TOKEN_MINT_METADATA = 248; // The requested token mint metadata was invalid\n    int32 internal constant INVALID_TOKEN_BURN_METADATA = 249; // The requested token burn metadata was invalid\n    int32 internal constant CURRENT_TREASURY_STILL_OWNS_NFTS = 250; // The treasury for a unique token cannot be changed until it owns no NFTs\n    int32 internal constant ACCOUNT_STILL_OWNS_NFTS = 251; // An account cannot be dissociated from a unique token if it owns NFTs for the token\n    int32 internal constant TREASURY_MUST_OWN_BURNED_NFT = 252; // A NFT can only be burned when owned by the unique token's treasury\n    int32 internal constant ACCOUNT_DOES_NOT_OWN_WIPED_NFT = 253; // An account did not own the NFT to be wiped\n    int32 internal constant ACCOUNT_AMOUNT_TRANSFERS_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 254; // An AccountAmount token transfers list referenced a token type other than FUNGIBLE_COMMON\n    int32 internal constant MAX_NFTS_IN_PRICE_REGIME_HAVE_BEEN_MINTED = 255; // All the NFTs allowed in the current price regime have already been minted\n    int32 internal constant PAYER_ACCOUNT_DELETED = 256; // The payer account has been marked as deleted\n    int32 internal constant CUSTOM_FEE_CHARGING_EXCEEDED_MAX_RECURSION_DEPTH = 257; // The reference chain of custom fees for a transferred token exceeded the maximum length of 2\n    int32 internal constant CUSTOM_FEE_CHARGING_EXCEEDED_MAX_ACCOUNT_AMOUNTS = 258; // More than 20 balance adjustments were to satisfy a CryptoTransfer and its implied custom fee payments\n    int32 internal constant INSUFFICIENT_SENDER_ACCOUNT_BALANCE_FOR_CUSTOM_FEE = 259; // The sender account in the token transfer transaction could not afford a custom fee\n    int32 internal constant SERIAL_NUMBER_LIMIT_REACHED = 260; // Currently no more than 4,294,967,295 NFTs may be minted for a given unique token type\n    int32 internal constant CUSTOM_ROYALTY_FEE_ONLY_ALLOWED_FOR_NON_FUNGIBLE_UNIQUE = 261; // Only tokens of type NON_FUNGIBLE_UNIQUE can have royalty fees\n    int32 internal constant NO_REMAINING_AUTOMATIC_ASSOCIATIONS = 262; // The account has reached the limit on the automatic associations count.\n    int32 internal constant EXISTING_AUTOMATIC_ASSOCIATIONS_EXCEED_GIVEN_LIMIT = 263; // Already existing automatic associations are more than the new maximum automatic associations.\n    int32 internal constant REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT = 264; // Cannot set the number of automatic associations for an account more than the maximum allowed tokens.maxPerAccount.\n    int32 internal constant TOKEN_IS_PAUSED = 265; // Token is paused. This Token cannot be a part of any kind of Transaction until unpaused.\n    int32 internal constant TOKEN_HAS_NO_PAUSE_KEY = 266; // Pause key is not set on token\n    int32 internal constant INVALID_PAUSE_KEY = 267; // The provided pause key was invalid\n    int32 internal constant FREEZE_UPDATE_FILE_DOES_NOT_EXIST = 268; // The update file in a freeze transaction body must exist.\n    int32 internal constant FREEZE_UPDATE_FILE_HASH_DOES_NOT_MATCH = 269; // The hash of the update file in a freeze transaction body must match the in-memory hash.\n    int32 internal constant NO_UPGRADE_HAS_BEEN_PREPARED = 270; // A FREEZE_UPGRADE transaction was handled with no previous update prepared.\n    int32 internal constant NO_FREEZE_IS_SCHEDULED = 271; // A FREEZE_ABORT transaction was handled with no scheduled freeze.\n    int32 internal constant UPDATE_FILE_HASH_CHANGED_SINCE_PREPARE_UPGRADE = 272; // The update file hash when handling a FREEZE_UPGRADE transaction differs from the file hash at the time of handling the PREPARE_UPGRADE transaction.\n    int32 internal constant FREEZE_START_TIME_MUST_BE_FUTURE = 273; // The given freeze start time was in the (consensus) past.\n    int32 internal constant PREPARED_UPDATE_FILE_IS_IMMUTABLE = 274; // The prepared update file cannot be updated or appended until either the upgrade has been completed, or a FREEZE_ABORT has been handled.\n    int32 internal constant FREEZE_ALREADY_SCHEDULED = 275; // Once a freeze is scheduled, it must be aborted before any other type of freeze can be performed.\n    int32 internal constant FREEZE_UPGRADE_IN_PROGRESS = 276; // If an NMT upgrade has been prepared, the following operation must be a FREEZE_UPGRADE (To issue a FREEZE_ONLY, submit a FREEZE_ABORT first.)\n    int32 internal constant UPDATE_FILE_ID_DOES_NOT_MATCH_PREPARED = 277; // If an NMT upgrade has been prepared, the subsequent FREEZE_UPGRADE transaction must confirm the id of the file to be used in the upgrade.\n    int32 internal constant UPDATE_FILE_HASH_DOES_NOT_MATCH_PREPARED = 278; // If an NMT upgrade has been prepared, the subsequent FREEZE_UPGRADE transaction must confirm the hash of the file to be used in the upgrade.\n    int32 internal constant CONSENSUS_GAS_EXHAUSTED = 279; // Consensus throttle did not allow execution of this transaction. System is throttled at consensus level.\n    int32 internal constant REVERTED_SUCCESS = 280; // A precompiled contract succeeded, but was later reverted.\n    int32 internal constant MAX_STORAGE_IN_PRICE_REGIME_HAS_BEEN_USED = 281; // All contract storage allocated to the current price regime has been consumed.\n    int32 internal constant INVALID_ALIAS_KEY = 282; // An alias used in a CryptoTransfer transaction is not the serialization of a primitive Key message -- that is, a Key with a single Ed25519 or ECDSA(secp256k1) public key and no unknown protobuf fields.\n    int32 internal constant UNEXPECTED_TOKEN_DECIMALS = 283; // A fungible token transfer expected a different number of decimals than the involved type actually has.\n    int32 internal constant INVALID_PROXY_ACCOUNT_ID = 284; // [Deprecated] The proxy account id is invalid or does not exist.\n    int32 internal constant INVALID_TRANSFER_ACCOUNT_ID = 285; // The transfer account id in CryptoDelete transaction is invalid or does not exist.\n    int32 internal constant INVALID_FEE_COLLECTOR_ACCOUNT_ID = 286; // The fee collector account id in TokenFeeScheduleUpdate is invalid or does not exist.\n    int32 internal constant ALIAS_IS_IMMUTABLE = 287; // The alias already set on an account cannot be updated using CryptoUpdate transaction.\n    int32 internal constant SPENDER_ACCOUNT_SAME_AS_OWNER = 288; // An approved allowance specifies a spender account that is the same as the hbar/token owner account.\n    int32 internal constant AMOUNT_EXCEEDS_TOKEN_MAX_SUPPLY = 289; // The establishment or adjustment of an approved allowance cause the token allowance to exceed the token maximum supply.\n    int32 internal constant NEGATIVE_ALLOWANCE_AMOUNT = 290; // The specified amount for an approved allowance cannot be negative.\n    int32 internal constant CANNOT_APPROVE_FOR_ALL_FUNGIBLE_COMMON = 291; // [Deprecated] The approveForAll flag cannot be set for a fungible token.\n    int32 internal constant SPENDER_DOES_NOT_HAVE_ALLOWANCE = 292; // The spender does not have an existing approved allowance with the hbar/token owner.\n    int32 internal constant AMOUNT_EXCEEDS_ALLOWANCE = 293; // The transfer amount exceeds the current approved allowance for the spender account.\n    int32 internal constant MAX_ALLOWANCES_EXCEEDED = 294; // The payer account of an approveAllowances or adjustAllowance transaction is attempting to go beyond the maximum allowed number of allowances.\n    int32 internal constant EMPTY_ALLOWANCES = 295; // No allowances have been specified in the approval transaction.\n    int32 internal constant SPENDER_ACCOUNT_REPEATED_IN_ALLOWANCES = 296; // [Deprecated] Spender is repeated more than once in Crypto or Token or NFT allowance lists in a single CryptoApproveAllowance transaction.\n    int32 internal constant REPEATED_SERIAL_NUMS_IN_NFT_ALLOWANCES = 297; // [Deprecated] Serial numbers are repeated in nft allowance for a single spender account\n    int32 internal constant FUNGIBLE_TOKEN_IN_NFT_ALLOWANCES = 298; // Fungible common token used in NFT allowances\n    int32 internal constant NFT_IN_FUNGIBLE_TOKEN_ALLOWANCES = 299; // Non fungible token used in fungible token allowances\n    int32 internal constant INVALID_ALLOWANCE_OWNER_ID = 300; // The account id specified as the owner is invalid or does not exist.\n    int32 internal constant INVALID_ALLOWANCE_SPENDER_ID = 301; // The account id specified as the spender is invalid or does not exist.\n    int32 internal constant REPEATED_ALLOWANCES_TO_DELETE = 302; // [Deprecated] If the CryptoDeleteAllowance transaction has repeated crypto or token or Nft allowances to delete.\n    int32 internal constant INVALID_DELEGATING_SPENDER = 303; // If the account Id specified as the delegating spender is invalid or does not exist.\n    int32 internal constant DELEGATING_SPENDER_CANNOT_GRANT_APPROVE_FOR_ALL = 304; // The delegating Spender cannot grant approveForAll allowance on a NFT token type for another spender.\n    int32 internal constant DELEGATING_SPENDER_DOES_NOT_HAVE_APPROVE_FOR_ALL = 305; // The delegating Spender cannot grant allowance on a NFT serial for another spender as it doesnt not have approveForAll granted on token-owner.\n    int32 internal constant SCHEDULE_EXPIRATION_TIME_TOO_FAR_IN_FUTURE = 306; // The scheduled transaction could not be created because it's expiration_time was too far in the future.\n    int32 internal constant SCHEDULE_EXPIRATION_TIME_MUST_BE_HIGHER_THAN_CONSENSUS_TIME = 307; // The scheduled transaction could not be created because it's expiration_time was less than or equal to the consensus time.\n    int32 internal constant SCHEDULE_FUTURE_THROTTLE_EXCEEDED = 308; // The scheduled transaction could not be created because it would cause throttles to be violated on the specified expiration_time.\n    int32 internal constant SCHEDULE_FUTURE_GAS_LIMIT_EXCEEDED = 309; // The scheduled transaction could not be created because it would cause the gas limit to be violated on the specified expiration_time.\n    int32 internal constant INVALID_ETHEREUM_TRANSACTION = 310; // The ethereum transaction either failed parsing or failed signature validation, or some other EthereumTransaction error not covered by another response code.\n    int32 internal constant WRONG_CHAIN_ID = 311; // EthereumTransaction was signed against a chainId that this network does not support.\n    int32 internal constant WRONG_NONCE = 312; // This transaction specified an ethereumNonce that is not the current ethereumNonce of the account.\n    int32 internal constant ACCESS_LIST_UNSUPPORTED = 313; // The ethereum transaction specified an access list, which the network does not support.\n    int32 internal constant SCHEDULE_PENDING_EXPIRATION = 314; // A schedule being signed or deleted has passed it's expiration date and is pending execution if needed and then expiration.\n    int32 internal constant CONTRACT_IS_TOKEN_TREASURY = 315; // A selfdestruct or ContractDelete targeted a contract that is a token treasury.\n    int32 internal constant CONTRACT_HAS_NON_ZERO_TOKEN_BALANCES = 316; // A selfdestruct or ContractDelete targeted a contract with non-zero token balances.\n    int32 internal constant CONTRACT_EXPIRED_AND_PENDING_REMOVAL = 317; // A contract referenced by a transaction is \"detached\"; that is, expired and lacking any hbar funds for auto-renewal payment---but still within its post-expiry grace period.\n    int32 internal constant CONTRACT_HAS_NO_AUTO_RENEW_ACCOUNT = 318; // A ContractUpdate requested removal of a contract's auto-renew account, but that contract has no auto-renew account.\n    int32 internal constant PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION = 319; // A delete transaction submitted via HAPI set permanent_removal=true\n    int32 internal constant PROXY_ACCOUNT_ID_FIELD_IS_DEPRECATED = 320; // A CryptoCreate or ContractCreate used the deprecated proxyAccountID field.\n    int32 internal constant SELF_STAKING_IS_NOT_ALLOWED = 321; // An account set the staked_account_id to itself in CryptoUpdate or ContractUpdate transactions.\n    int32 internal constant INVALID_STAKING_ID = 322; // The staking account id or staking node id given is invalid or does not exist.\n    int32 internal constant STAKING_NOT_ENABLED = 323; // Native staking, while implemented, has not yet enabled by the council.\n    int32 internal constant INVALID_PRNG_RANGE = 324; // The range provided in UtilPrng transaction is negative.\n    int32 internal constant MAX_ENTITIES_IN_PRICE_REGIME_HAVE_BEEN_CREATED = 325; // The maximum number of entities allowed in the current price regime have been created.\n    int32 internal constant INVALID_FULL_PREFIX_SIGNATURE_FOR_PRECOMPILE = 326; // The full prefix signature for precompile is not valid\n    int32 internal constant INSUFFICIENT_BALANCES_FOR_STORAGE_RENT = 327; // The combined balances of a contract and its auto-renew account (if any) did not cover the rent charged for net new storage used in a transaction.\n    int32 internal constant MAX_CHILD_RECORDS_EXCEEDED = 328; // A contract transaction tried to use more than the allowed number of child records, via either system contract records or internal contract creations.\n    int32 internal constant INSUFFICIENT_BALANCES_FOR_RENEWAL_FEES = 329; // The combined balances of a contract and its auto-renew account (if any) or balance of an account did not cover the auto-renewal fees in a transaction.\n}\n"
    },
    "contracts/SpheraMarketplace/HederaTokenService.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.5.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"./HederaResponseCodes.sol\";\nimport \"./IHederaTokenService.sol\";\n\nabstract contract HederaTokenService {\n    address constant precompileAddress = address(0x167);\n    // 90 days in seconds\n    int32 constant defaultAutoRenewPeriod = 7776000;\n\n    modifier nonEmptyExpiry(IHederaTokenService.HederaToken memory token) {\n        if (token.expiry.second == 0 && token.expiry.autoRenewPeriod == 0) {\n            token.expiry.autoRenewPeriod = defaultAutoRenewPeriod;\n        }\n        _;\n    }\n\n    /// Generic event\n    event CallResponseEvent(bool, bytes);\n\n    /// Performs transfers among combinations of tokens and hbars\n    /// @param transferList the list of hbar transfers to do\n    /// @param tokenTransfers the list of transfers to do\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @custom:version 0.3.0 the signature of the previous version was cryptoTransfer(TokenTransferList[] memory tokenTransfers)\n    function cryptoTransfer(IHederaTokenService.TransferList memory transferList, IHederaTokenService.TokenTransferList[] memory tokenTransfers) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.cryptoTransfer.selector, transferList, tokenTransfers));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Mints an amount of the token to the defined treasury account\n    /// @param token The token for which to mint tokens. If token does not exist, transaction results in\n    ///              INVALID_TOKEN_ID\n    /// @param amount Applicable to tokens of type FUNGIBLE_COMMON. The amount to mint to the Treasury Account.\n    ///               Amount must be a positive non-zero number represented in the lowest denomination of the\n    ///               token. The new supply must be lower than 2^63.\n    /// @param metadata Applicable to tokens of type NON_FUNGIBLE_UNIQUE. A list of metadata that are being created.\n    ///                 Maximum allowed size of each metadata is 100 bytes\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    /// @return serialNumbers If the token is an NFT the newly generate serial numbers, otherwise empty.\n    function mintToken(address token, int64 amount, bytes[] memory metadata) internal returns (int responseCode, int64 newTotalSupply, int64[] memory serialNumbers) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.mintToken.selector, token, amount, metadata));\n        (responseCode, newTotalSupply, serialNumbers) = success ? abi.decode(result, (int32, int64, int64[])) : (HederaResponseCodes.UNKNOWN, int64(0), new int64[](0));\n    }\n\n    /// Burns an amount of the token from the defined treasury account\n    /// @param token The token for which to burn tokens. If token does not exist, transaction results in\n    ///              INVALID_TOKEN_ID\n    /// @param amount  Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the Treasury Account.\n    ///                Amount must be a positive non-zero number, not bigger than the token balance of the treasury\n    ///                account (0; balance], represented in the lowest denomination.\n    /// @param serialNumbers Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be burned.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    function burnToken(address token, int64 amount, int64[] memory serialNumbers) internal returns (int responseCode, int64 newTotalSupply) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.burnToken.selector, token, amount, serialNumbers));\n        (responseCode, newTotalSupply) = success ? abi.decode(result, (int32, int64)) : (HederaResponseCodes.UNKNOWN, int64(0));\n    }\n\n    ///  Associates the provided account with the provided tokens. Must be signed by the provided\n    ///  Account's key or called from the accounts contract key\n    ///  If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\n    ///  If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\n    ///  If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\n    ///  If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\n    ///  If an association between the provided account and any of the tokens already exists, the\n    ///  transaction will resolve to TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.\n    ///  If the provided account's associations count exceed the constraint of maximum token associations\n    ///    per account, the transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.\n    ///  On success, associations between the provided account and tokens are made and the account is\n    ///    ready to interact with the tokens.\n    /// @param account The account to be associated with the provided tokens\n    /// @param tokens The tokens to be associated with the provided account. In the case of NON_FUNGIBLE_UNIQUE\n    ///               Type, once an account is associated, it can hold any number of NFTs (serial numbers) of that\n    ///               token type\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function associateTokens(address account, address[] memory tokens) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.associateTokens.selector, account, tokens));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    function associateToken(address account, address token) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.associateToken.selector, account, token));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Dissociates the provided account with the provided tokens. Must be signed by the provided\n    /// Account's key.\n    /// If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\n    /// If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\n    /// If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\n    /// If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\n    /// If an association between the provided account and any of the tokens does not exist, the\n    /// transaction will resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.\n    /// If a token has not been deleted and has not expired, and the user has a nonzero balance, the\n    /// transaction will resolve to TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES.\n    /// If a <b>fungible token</b> has expired, the user can disassociate even if their token balance is\n    /// not zero.\n    /// If a <b>non fungible token</b> has expired, the user can <b>not</b> disassociate if their token\n    /// balance is not zero. The transaction will resolve to TRANSACTION_REQUIRED_ZERO_TOKEN_BALANCES.\n    /// On success, associations between the provided account and tokens are removed.\n    /// @param account The account to be dissociated from the provided tokens\n    /// @param tokens The tokens to be dissociated from the provided account.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function dissociateTokens(address account, address[] memory tokens) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.dissociateTokens.selector, account, tokens));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    function dissociateToken(address account, address token) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.dissociateToken.selector, account, token));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Creates a Fungible Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @param initialTotalSupply Specifies the initial supply of tokens to be put in circulation. The\n    /// initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.\n    /// @param decimals the number of decimal places a token is divisible by\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createFungibleToken(IHederaTokenService.HederaToken memory token, int64 initialTotalSupply, int32 decimals) internal nonEmptyExpiry(token) returns (int responseCode, address tokenAddress) {\n        (bool success, bytes memory result) = precompileAddress.call{value: msg.value}(abi.encodeWithSelector(IHederaTokenService.createFungibleToken.selector, token, initialTotalSupply, decimals));\n\n        (responseCode, tokenAddress) = success ? abi.decode(result, (int32, address)) : (HederaResponseCodes.UNKNOWN, address(0));\n    }\n\n    /// Creates a Fungible Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @param initialTotalSupply Specifies the initial supply of tokens to be put in circulation. The\n    /// initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.\n    /// @param decimals the number of decimal places a token is divisible by\n    /// @param fixedFees list of fixed fees to apply to the token\n    /// @param fractionalFees list of fractional fees to apply to the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createFungibleTokenWithCustomFees(IHederaTokenService.HederaToken memory token, int64 initialTotalSupply, int32 decimals, IHederaTokenService.FixedFee[] memory fixedFees, IHederaTokenService.FractionalFee[] memory fractionalFees)\n        internal\n        nonEmptyExpiry(token)\n        returns (int responseCode, address tokenAddress)\n    {\n        (bool success, bytes memory result) = precompileAddress.call{value: msg.value}(abi.encodeWithSelector(IHederaTokenService.createFungibleTokenWithCustomFees.selector, token, initialTotalSupply, decimals, fixedFees, fractionalFees));\n        (responseCode, tokenAddress) = success ? abi.decode(result, (int32, address)) : (HederaResponseCodes.UNKNOWN, address(0));\n    }\n\n    /// Creates an Non Fungible Unique Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createNonFungibleToken(IHederaTokenService.HederaToken memory token) internal nonEmptyExpiry(token) returns (int responseCode, address tokenAddress) {\n        (bool success, bytes memory result) = precompileAddress.call{value: msg.value}(abi.encodeWithSelector(IHederaTokenService.createNonFungibleToken.selector, token));\n        (responseCode, tokenAddress) = success ? abi.decode(result, (int32, address)) : (HederaResponseCodes.UNKNOWN, address(0));\n    }\n\n    /// Creates an Non Fungible Unique Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @param fixedFees list of fixed fees to apply to the token\n    /// @param royaltyFees list of royalty fees to apply to the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createNonFungibleTokenWithCustomFees(IHederaTokenService.HederaToken memory token, IHederaTokenService.FixedFee[] memory fixedFees, IHederaTokenService.RoyaltyFee[] memory royaltyFees) internal nonEmptyExpiry(token) returns (int responseCode, address tokenAddress) {\n        (bool success, bytes memory result) = precompileAddress.call{value: msg.value}(abi.encodeWithSelector(IHederaTokenService.createNonFungibleTokenWithCustomFees.selector, token, fixedFees, royaltyFees));\n        (responseCode, tokenAddress) = success ? abi.decode(result, (int32, address)) : (HederaResponseCodes.UNKNOWN, address(0));\n    }\n\n    /// Retrieves fungible specific token info for a fungible token\n    /// @param token The ID of the token as a solidity address\n    function getFungibleTokenInfo(address token) internal returns (int responseCode, IHederaTokenService.FungibleTokenInfo memory tokenInfo) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getFungibleTokenInfo.selector, token));\n        IHederaTokenService.FungibleTokenInfo memory defaultTokenInfo;\n        (responseCode, tokenInfo) = success ? abi.decode(result, (int32, IHederaTokenService.FungibleTokenInfo)) : (HederaResponseCodes.UNKNOWN, defaultTokenInfo);\n    }\n\n    /// Retrieves general token info for a given token\n    /// @param token The ID of the token as a solidity address\n    function getTokenInfo(address token) internal returns (int responseCode, IHederaTokenService.TokenInfo memory tokenInfo) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getTokenInfo.selector, token));\n        IHederaTokenService.TokenInfo memory defaultTokenInfo;\n        (responseCode, tokenInfo) = success ? abi.decode(result, (int32, IHederaTokenService.TokenInfo)) : (HederaResponseCodes.UNKNOWN, defaultTokenInfo);\n    }\n\n    /// Retrieves non-fungible specific token info for a given NFT\n    /// @param token The ID of the token as a solidity address\n    function getNonFungibleTokenInfo(address token, int64 serialNumber) internal returns (int responseCode, IHederaTokenService.NonFungibleTokenInfo memory tokenInfo) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getNonFungibleTokenInfo.selector, token, serialNumber));\n        IHederaTokenService.NonFungibleTokenInfo memory defaultTokenInfo;\n        (responseCode, tokenInfo) = success ? abi.decode(result, (int32, IHederaTokenService.NonFungibleTokenInfo)) : (HederaResponseCodes.UNKNOWN, defaultTokenInfo);\n    }\n\n    /// Query token custom fees\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return fixedFees Set of fixed fees for `token`\n    /// @return fractionalFees Set of fractional fees for `token`\n    /// @return royaltyFees Set of royalty fees for `token`\n    function getTokenCustomFees(address token) internal returns (int64 responseCode, IHederaTokenService.FixedFee[] memory fixedFees, IHederaTokenService.FractionalFee[] memory fractionalFees, IHederaTokenService.RoyaltyFee[] memory royaltyFees) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getTokenCustomFees.selector, token));\n        IHederaTokenService.FixedFee[] memory defaultFixedFees;\n        IHederaTokenService.FractionalFee[] memory defaultFractionalFees;\n        IHederaTokenService.RoyaltyFee[] memory defaultRoyaltyFees;\n        (responseCode, fixedFees, fractionalFees, royaltyFees) = success ? abi.decode(result, (int32, IHederaTokenService.FixedFee[], IHederaTokenService.FractionalFee[], IHederaTokenService.RoyaltyFee[])) : (HederaResponseCodes.UNKNOWN, defaultFixedFees, defaultFractionalFees, defaultRoyaltyFees);\n    }\n\n    /// Allows spender to withdraw from your account multiple times, up to the value amount. If this function is called\n    /// again it overwrites the current allowance with value.\n    /// Only Applicable to Fungible Tokens\n    /// @param token The hedera token address to approve\n    /// @param spender the account authorized to spend\n    /// @param amount the amount of tokens authorized to spend.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function approve(address token, address spender, uint amount) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.approve.selector, token, spender, amount));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Transfers `amount` tokens from `from` to `to` using the\n    //  allowance mechanism. `amount` is then deducted from the caller's allowance.\n    /// Only applicable to fungible tokens\n    /// @param token The address of the fungible Hedera token to transfer\n    /// @param from The account address of the owner of the token, on the behalf of which to transfer `amount` tokens\n    /// @param to The account address of the receiver of the `amount` tokens\n    /// @param amount The amount of tokens to transfer from `from` to `to`\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function transferFrom(address token, address from, address to, uint amount) external returns (int64 responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.transferFrom.selector, token, from, to, amount));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Transfers `serialNumber` of `token` from `from` to `to` using the allowance mechanism.\n    /// Only applicable to NFT tokens\n    /// @param token The address of the non-fungible Hedera token to transfer\n    /// @param from The account address of the owner of `serialNumber` of `token`\n    /// @param to The account address of the receiver of `serialNumber`\n    /// @param serialNumber The NFT serial number to transfer\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function transferFromNFT(address token, address from, address to, uint serialNumber) external returns (int64 responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.transferFromNFT.selector, token, from, to, serialNumber));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Returns the amount which spender is still allowed to withdraw from owner.\n    /// Only Applicable to Fungible Tokens\n    /// @param token The Hedera token address to check the allowance of\n    /// @param owner the owner of the tokens to be spent\n    /// @param spender the spender of the tokens\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function allowance(address token, address owner, address spender) internal returns (int responseCode, uint amount) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.allowance.selector, token, owner, spender));\n        (responseCode, amount) = success ? abi.decode(result, (int32, uint)) : (HederaResponseCodes.UNKNOWN, 0);\n    }\n\n    /// Allow or reaffirm the approved address to transfer an NFT the approved address does not own.\n    /// Only Applicable to NFT Tokens\n    /// @param token The Hedera NFT token address to approve\n    /// @param approved The new approved NFT controller.  To revoke approvals pass in the zero address.\n    /// @param serialNumber The NFT serial number  to approve\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function approveNFT(address token, address approved, uint serialNumber) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.approveNFT.selector, token, approved, serialNumber));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Get the approved address for a single NFT\n    /// Only Applicable to NFT Tokens\n    /// @param token The Hedera NFT token address to check approval\n    /// @param serialNumber The NFT to find the approved address for\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return approved The approved address for this NFT, or the zero address if there is none\n    function getApproved(address token, uint serialNumber) internal returns (int responseCode, address approved) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getApproved.selector, token, serialNumber));\n        (responseCode, approved) = success ? abi.decode(result, (int32, address)) : (HederaResponseCodes.UNKNOWN, address(0));\n    }\n\n    /// Query if token account is frozen\n    /// @param token The token address to check\n    /// @param account The account address associated with the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return frozen True if `account` is frozen for `token`\n    function isFrozen(address token, address account) internal returns (int64 responseCode, bool frozen) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.isFrozen.selector, token, account));\n        (responseCode, frozen) = success ? abi.decode(result, (int32, bool)) : (HederaResponseCodes.UNKNOWN, false);\n    }\n\n    /// Query if token account has kyc granted\n    /// @param token The token address to check\n    /// @param account The account address associated with the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return kycGranted True if `account` has kyc granted for `token`\n    function isKyc(address token, address account) internal returns (int64 responseCode, bool kycGranted) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.isKyc.selector, token, account));\n        (responseCode, kycGranted) = success ? abi.decode(result, (int32, bool)) : (HederaResponseCodes.UNKNOWN, false);\n    }\n\n    /// Operation to freeze token account\n    /// @param token The token address\n    /// @param account The account address to be frozen\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function freezeToken(address token, address account) internal returns (int64 responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.freezeToken.selector, token, account));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to unfreeze token account\n    /// @param token The token address\n    /// @param account The account address to be unfrozen\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function unfreezeToken(address token, address account) internal returns (int64 responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.unfreezeToken.selector, token, account));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to grant kyc to token account\n    /// @param token The token address\n    /// @param account The account address to grant kyc\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function grantTokenKyc(address token, address account) internal returns (int64 responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.grantTokenKyc.selector, token, account));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to revoke kyc to token account\n    /// @param token The token address\n    /// @param account The account address to revoke kyc\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function revokeTokenKyc(address token, address account) internal returns (int64 responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.revokeTokenKyc.selector, token, account));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @param token The Hedera NFT token address to approve\n    /// @param operator Address to add to the set of authorized operators\n    /// @param approved True if the operator is approved, false to revoke approval\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function setApprovalForAll(address token, address operator, bool approved) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.setApprovalForAll.selector, token, operator, approved));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Query if an address is an authorized operator for another address\n    /// Only Applicable to NFT Tokens\n    /// @param token The Hedera NFT token address to approve\n    /// @param owner The address that owns the NFTs\n    /// @param operator The address that acts on behalf of the owner\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return approved True if `operator` is an approved operator for `owner`, false otherwise\n    function isApprovedForAll(address token, address owner, address operator) internal returns (int responseCode, bool approved) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.isApprovedForAll.selector, token, owner, operator));\n        (responseCode, approved) = success ? abi.decode(result, (int32, bool)) : (HederaResponseCodes.UNKNOWN, false);\n    }\n\n    /// Query token default freeze status\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return defaultFreezeStatus True if `token` default freeze status is frozen.\n    function getTokenDefaultFreezeStatus(address token) internal returns (int responseCode, bool defaultFreezeStatus) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getTokenDefaultFreezeStatus.selector, token));\n        (responseCode, defaultFreezeStatus) = success ? abi.decode(result, (int32, bool)) : (HederaResponseCodes.UNKNOWN, false);\n    }\n\n    /// Query token default kyc status\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return defaultKycStatus True if `token` default kyc status is KycNotApplicable and false if Revoked.\n    function getTokenDefaultKycStatus(address token) internal returns (int responseCode, bool defaultKycStatus) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getTokenDefaultKycStatus.selector, token));\n        (responseCode, defaultKycStatus) = success ? abi.decode(result, (int32, bool)) : (HederaResponseCodes.UNKNOWN, false);\n    }\n\n    /**********************\n     * ABI v1 calls       *\n     **********************/\n\n    /// Initiates a Fungible Token Transfer\n    /// @param token The ID of the token as a solidity address\n    /// @param accountIds account to do a transfer to/from\n    /// @param amounts The amount from the accountId at the same index\n    function transferTokens(address token, address[] memory accountIds, int64[] memory amounts) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.transferTokens.selector, token, accountIds, amounts));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Initiates a Non-Fungable Token Transfer\n    /// @param token The ID of the token as a solidity address\n    /// @param sender the sender of an nft\n    /// @param receiver the receiver of the nft sent by the same index at sender\n    /// @param serialNumber the serial number of the nft sent by the same index at sender\n    function transferNFTs(address token, address[] memory sender, address[] memory receiver, int64[] memory serialNumber) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.transferNFTs.selector, token, sender, receiver, serialNumber));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\n    /// where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\n    /// (positive amount) or receiving (negative amount)\n    /// @param token The token to transfer to/from\n    /// @param sender The sender for the transaction\n    /// @param receiver The receiver of the transaction\n    /// @param amount Non-negative value to send. a negative value will result in a failure.\n    function transferToken(address token, address sender, address receiver, int64 amount) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.transferToken.selector, token, sender, receiver, amount));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\n    /// where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\n    /// (positive amount) or receiving (negative amount)\n    /// @param token The token to transfer to/from\n    /// @param sender The sender for the transaction\n    /// @param receiver The receiver of the transaction\n    /// @param serialNumber The serial number of the NFT to transfer.\n    function transferNFT(address token, address sender, address receiver, int64 serialNumber) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.transferNFT.selector, token, sender, receiver, serialNumber));\n        responseCode = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to pause token\n    /// @param token The token address to be paused\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function pauseToken(address token) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.pauseToken.selector, token));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to unpause token\n    /// @param token The token address to be unpaused\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function unpauseToken(address token) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.unpauseToken.selector, token));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to wipe fungible tokens from account\n    /// @param token The token address\n    /// @param account The account address to revoke kyc\n    /// @param amount The number of tokens to wipe\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function wipeTokenAccount(address token, address account, int64 amount) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.wipeTokenAccount.selector, token, account, amount));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to wipe non fungible tokens from account\n    /// @param token The token address\n    /// @param account The account address to revoke kyc\n    /// @param  serialNumbers The serial numbers of token to wipe\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function wipeTokenAccountNFT(address token, address account, int64[] memory serialNumbers) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.wipeTokenAccountNFT.selector, token, account, serialNumbers));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to delete token\n    /// @param token The token address\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function deleteToken(address token) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.deleteToken.selector, token));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to update token keys\n    /// @param token The token address\n    /// @param keys The token keys\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function updateTokenKeys(address token, IHederaTokenService.TokenKey[] memory keys) internal returns (int64 responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.updateTokenKeys.selector, token, keys));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Query token KeyValue\n    /// @param token The token address to check\n    /// @param keyType The keyType of the desired KeyValue\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return key KeyValue info for key of type `keyType`\n    function getTokenKey(address token, uint keyType) internal returns (int64 responseCode, IHederaTokenService.KeyValue memory key) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getTokenKey.selector, token, keyType));\n        IHederaTokenService.KeyValue memory defaultKeyValueInfo;\n        (responseCode, key) = success ? abi.decode(result, (int32, IHederaTokenService.KeyValue)) : (HederaResponseCodes.UNKNOWN, defaultKeyValueInfo);\n    }\n\n    /// Query if valid token found for the given address\n    /// @param token The token address\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return isTokenFlag True if valid token found for the given address\n    function isToken(address token) internal returns (int64 responseCode, bool isTokenFlag) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.isToken.selector, token));\n        (responseCode, isTokenFlag) = success ? abi.decode(result, (int32, bool)) : (HederaResponseCodes.UNKNOWN, false);\n    }\n\n    /// Query to return the token type for a given address\n    /// @param token The token address\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenType the token type. 0 is FUNGIBLE_COMMON, 1 is NON_FUNGIBLE_UNIQUE, -1 is UNRECOGNIZED\n    function getTokenType(address token) internal returns (int64 responseCode, int32 tokenType) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getTokenType.selector, token));\n        (responseCode, tokenType) = success ? abi.decode(result, (int32, int32)) : (HederaResponseCodes.UNKNOWN, -1);\n    }\n\n    /// Operation to get token expiry info\n    /// @param token The token address\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return expiryInfo The expiry info of the token\n    function getTokenExpiryInfo(address token) internal returns (int responseCode, IHederaTokenService.Expiry memory expiryInfo) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.getTokenExpiryInfo.selector, token));\n        IHederaTokenService.Expiry memory defaultExpiryInfo;\n        (responseCode, expiryInfo) = success ? abi.decode(result, (int32, IHederaTokenService.Expiry)) : (HederaResponseCodes.UNKNOWN, defaultExpiryInfo);\n    }\n\n    /// Operation to update token expiry info\n    /// @param token The token address\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function updateTokenExpiryInfo(address token, IHederaTokenService.Expiry memory expiryInfo) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.updateTokenExpiryInfo.selector, token, expiryInfo));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Operation to update token info\n    /// @param token The token address\n    /// @param tokenInfo The hedera token info to update token with\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function updateTokenInfo(address token, IHederaTokenService.HederaToken memory tokenInfo) internal returns (int responseCode) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.updateTokenInfo.selector, token, tokenInfo));\n        (responseCode) = success ? abi.decode(result, (int32)) : HederaResponseCodes.UNKNOWN;\n    }\n\n    /// Redirect for token\n    /// @param token The token address\n    /// @param encodedFunctionSelector The function selector from the ERC20 interface + the bytes input for the function called\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return response The result of the call that had been encoded and sent for execution.\n    function redirectForToken(address token, bytes memory encodedFunctionSelector) external returns (int responseCode, bytes memory response) {\n        (bool success, bytes memory result) = precompileAddress.call(abi.encodeWithSelector(IHederaTokenService.redirectForToken.selector, token, encodedFunctionSelector));\n\n        emit CallResponseEvent(success, result);\n        (responseCode, response) = success ? abi.decode(result, (int32, bytes)) : (HederaResponseCodes.UNKNOWN, bytes(\"\"));\n    }\n}\n"
    },
    "contracts/SpheraMarketplace/IHederaTokenService.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.9 <0.9.0;\npragma experimental ABIEncoderV2;\n\ninterface IHederaTokenService {\n    /// Transfers cryptocurrency among two or more accounts by making the desired adjustments to their\n    /// balances. Each transfer list can specify up to 10 adjustments. Each negative amount is withdrawn\n    /// from the corresponding account (a sender), and each positive one is added to the corresponding\n    /// account (a receiver). The amounts list must sum to zero. Each amount is a number of tinybars\n    /// (there are 100,000,000 tinybars in one hbar).  If any sender account fails to have sufficient\n    /// hbars, then the entire transaction fails, and none of those transfers occur, though the\n    /// transaction fee is still charged. This transaction must be signed by the keys for all the sending\n    /// accounts, and for any receiving accounts that have receiverSigRequired == true. The signatures\n    /// are in the same order as the accounts, skipping those accounts that don't need a signature.\n    /// @custom:version 0.3.0 previous version did not include isApproval\n    struct AccountAmount {\n        // The Account ID, as a solidity address, that sends/receives cryptocurrency or tokens\n        address accountID;\n        // The amount of  the lowest denomination of the given token that\n        // the account sends(negative) or receives(positive)\n        int64 amount;\n        // If true then the transfer is expected to be an approved allowance and the\n        // accountID is expected to be the owner. The default is false (omitted).\n        bool isApproval;\n    }\n\n    /// A sender account, a receiver account, and the serial number of an NFT of a Token with\n    /// NON_FUNGIBLE_UNIQUE type. When minting NFTs the sender will be the default AccountID instance\n    /// (0.0.0 aka 0x0) and when burning NFTs, the receiver will be the default AccountID instance.\n    /// @custom:version 0.3.0 previous version did not include isApproval\n    struct NftTransfer {\n        // The solidity address of the sender\n        address senderAccountID;\n        // The solidity address of the receiver\n        address receiverAccountID;\n        // The serial number of the NFT\n        int64 serialNumber;\n        // If true then the transfer is expected to be an approved allowance and the\n        // accountID is expected to be the owner. The default is false (omitted).\n        bool isApproval;\n    }\n\n    struct TokenTransferList {\n        // The ID of the token as a solidity address\n        address token;\n        // Applicable to tokens of type FUNGIBLE_COMMON. Multiple list of AccountAmounts, each of which\n        // has an account and amount.\n        AccountAmount[] transfers;\n        // Applicable to tokens of type NON_FUNGIBLE_UNIQUE. Multiple list of NftTransfers, each of\n        // which has a sender and receiver account, including the serial number of the NFT\n        NftTransfer[] nftTransfers;\n    }\n\n    struct TransferList {\n        // Multiple list of AccountAmounts, each of which has an account and amount.\n        // Used to transfer hbars between the accounts in the list.\n        AccountAmount[] transfers;\n    }\n\n    /// Expiry properties of a Hedera token - second, autoRenewAccount, autoRenewPeriod\n    struct Expiry {\n        // The epoch second at which the token should expire; if an auto-renew account and period are\n        // specified, this is coerced to the current epoch second plus the autoRenewPeriod\n        int64 second;\n        // ID of an account which will be automatically charged to renew the token's expiration, at\n        // autoRenewPeriod interval, expressed as a solidity address\n        address autoRenewAccount;\n        // The interval at which the auto-renew account will be charged to extend the token's expiry\n        int64 autoRenewPeriod;\n    }\n\n    /// A Key can be a public key from either the Ed25519 or ECDSA(secp256k1) signature schemes, where\n    /// in the ECDSA(secp256k1) case we require the 33-byte compressed form of the public key. We call\n    /// these public keys <b>primitive keys</b>.\n    /// A Key can also be the ID of a smart contract instance, which is then authorized to perform any\n    /// precompiled contract action that requires this key to sign.\n    /// Note that when a Key is a smart contract ID, it <i>doesn't</i> mean the contract with that ID\n    /// will actually create a cryptographic signature. It only means that when the contract calls a\n    /// precompiled contract, the resulting \"child transaction\" will be authorized to perform any action\n    /// controlled by the Key.\n    /// Exactly one of the possible values should be populated in order for the Key to be valid.\n    struct KeyValue {\n        // if set to true, the key of the calling Hedera account will be inherited as the token key\n        bool inheritAccountKey;\n        // smart contract instance that is authorized as if it had signed with a key\n        address contractId;\n        // Ed25519 public key bytes\n        bytes ed25519;\n        // Compressed ECDSA(secp256k1) public key bytes\n        bytes ECDSA_secp256k1;\n        // A smart contract that, if the recipient of the active message frame, should be treated\n        // as having signed. (Note this does not mean the <i>code being executed in the frame</i>\n        // will belong to the given contract, since it could be running another contract's code via\n        // <tt>delegatecall</tt>. So setting this key is a more permissive version of setting the\n        // contractID key, which also requires the code in the active message frame belong to the\n        // the contract with the given id.)\n        address delegatableContractId;\n    }\n\n    /// A list of token key types the key should be applied to and the value of the key\n    struct TokenKey {\n        // bit field representing the key type. Keys of all types that have corresponding bits set to 1\n        // will be created for the token.\n        // 0th bit: adminKey\n        // 1st bit: kycKey\n        // 2nd bit: freezeKey\n        // 3rd bit: wipeKey\n        // 4th bit: supplyKey\n        // 5th bit: feeScheduleKey\n        // 6th bit: pauseKey\n        // 7th bit: ignored\n        uint keyType;\n        // the value that will be set to the key type\n        KeyValue key;\n    }\n\n    /// Basic properties of a Hedera Token - name, symbol, memo, tokenSupplyType, maxSupply,\n    /// treasury, freezeDefault. These properties are related both to Fungible and NFT token types.\n    struct HederaToken {\n        // The publicly visible name of the token. The token name is specified as a Unicode string.\n        // Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).\n        string name;\n        // The publicly visible token symbol. The token symbol is specified as a Unicode string.\n        // Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).\n        string symbol;\n        // The ID of the account which will act as a treasury for the token as a solidity address.\n        // This account will receive the specified initial supply or the newly minted NFTs in\n        // the case for NON_FUNGIBLE_UNIQUE Type\n        address treasury;\n        // The memo associated with the token (UTF-8 encoding max 100 bytes)\n        string memo;\n        // IWA compatibility. Specified the token supply type. Defaults to INFINITE\n        bool tokenSupplyType;\n        // IWA Compatibility. Depends on TokenSupplyType. For tokens of type FUNGIBLE_COMMON - the\n        // maximum number of tokens that can be in circulation. For tokens of type NON_FUNGIBLE_UNIQUE -\n        // the maximum number of NFTs (serial numbers) that can be minted. This field can never be changed!\n        int64 maxSupply;\n        // The default Freeze status (frozen or unfrozen) of Hedera accounts relative to this token. If\n        // true, an account must be unfrozen before it can receive the token\n        bool freezeDefault;\n        // list of keys to set to the token\n        TokenKey[] tokenKeys;\n        // expiry properties of a Hedera token - second, autoRenewAccount, autoRenewPeriod\n        Expiry expiry;\n    }\n\n    /// Additional post creation fungible and non fungible properties of a Hedera Token.\n    struct TokenInfo {\n        /// Basic properties of a Hedera Token\n        HederaToken token;\n        /// The number of tokens (fungible) or serials (non-fungible) of the token\n        int64 totalSupply;\n        /// Specifies whether the token is deleted or not\n        bool deleted;\n        /// Specifies whether the token kyc was defaulted with KycNotApplicable (true) or Revoked (false)\n        bool defaultKycStatus;\n        /// Specifies whether the token is currently paused or not\n        bool pauseStatus;\n        /// The fixed fees collected when transferring the token\n        FixedFee[] fixedFees;\n        /// The fractional fees collected when transferring the token\n        FractionalFee[] fractionalFees;\n        /// The royalty fees collected when transferring the token\n        RoyaltyFee[] royaltyFees;\n        /// The ID of the network ledger\n        string ledgerId;\n    }\n\n    /// Additional fungible properties of a Hedera Token.\n    struct FungibleTokenInfo {\n        /// The shared hedera token info\n        TokenInfo tokenInfo;\n        /// The number of decimal places a token is divisible by\n        int32 decimals;\n    }\n\n    /// Additional non fungible properties of a Hedera Token.\n    struct NonFungibleTokenInfo {\n        /// The shared hedera token info\n        TokenInfo tokenInfo;\n        /// The serial number of the nft\n        int64 serialNumber;\n        /// The account id specifying the owner of the non fungible token\n        address ownerId;\n        /// The epoch second at which the token was created.\n        int64 creationTime;\n        /// The unique metadata of the NFT\n        bytes metadata;\n        /// The account id specifying an account that has been granted spending permissions on this nft\n        address spenderId;\n    }\n\n    /// A fixed number of units (hbar or token) to assess as a fee during a transfer of\n    /// units of the token to which this fixed fee is attached. The denomination of\n    /// the fee depends on the values of tokenId, useHbarsForPayment and\n    /// useCurrentTokenForPayment. Exactly one of the values should be set.\n    struct FixedFee {\n        int64 amount;\n        // Specifies ID of token that should be used for fixed fee denomination\n        address tokenId;\n        // Specifies this fixed fee should be denominated in Hbar\n        bool useHbarsForPayment;\n        // Specifies this fixed fee should be denominated in the Token currently being created\n        bool useCurrentTokenForPayment;\n        // The ID of the account to receive the custom fee, expressed as a solidity address\n        address feeCollector;\n    }\n\n    /// A fraction of the transferred units of a token to assess as a fee. The amount assessed will never\n    /// be less than the given minimumAmount, and never greater than the given maximumAmount.  The\n    /// denomination is always units of the token to which this fractional fee is attached.\n    struct FractionalFee {\n        // A rational number's numerator, used to set the amount of a value transfer to collect as a custom fee\n        int64 numerator;\n        // A rational number's denominator, used to set the amount of a value transfer to collect as a custom fee\n        int64 denominator;\n        // The minimum amount to assess\n        int64 minimumAmount;\n        // The maximum amount to assess (zero implies no maximum)\n        int64 maximumAmount;\n        bool netOfTransfers;\n        // The ID of the account to receive the custom fee, expressed as a solidity address\n        address feeCollector;\n    }\n\n    /// A fee to assess during a transfer that changes ownership of an NFT. Defines the fraction of\n    /// the fungible value exchanged for an NFT that the ledger should collect as a royalty. (\"Fungible\n    /// value\" includes both ℏ and units of fungible HTS tokens.) When the NFT sender does not receive\n    /// any fungible value, the ledger will assess the fallback fee, if present, to the new NFT owner.\n    /// Royalty fees can only be added to tokens of type type NON_FUNGIBLE_UNIQUE.\n    struct RoyaltyFee {\n        // A fraction's numerator of fungible value exchanged for an NFT to collect as royalty\n        int64 numerator;\n        // A fraction's denominator of fungible value exchanged for an NFT to collect as royalty\n        int64 denominator;\n        // If present, the fee to assess to the NFT receiver when no fungible value\n        // is exchanged with the sender. Consists of:\n        // amount: the amount to charge for the fee\n        // tokenId: Specifies ID of token that should be used for fixed fee denomination\n        // useHbarsForPayment: Specifies this fee should be denominated in Hbar\n        int64 amount;\n        address tokenId;\n        bool useHbarsForPayment;\n        // The ID of the account to receive the custom fee, expressed as a solidity address\n        address feeCollector;\n    }\n\n    /**********************\n     * Direct HTS Calls   *\n     **********************/\n\n    /// Performs transfers among combinations of tokens and hbars\n    /// @param transferList the list of hbar transfers to do\n    /// @param tokenTransfers the list of token transfers to do\n    /// @custom:version 0.3.0 the signature of the previous version was cryptoTransfer(TokenTransferList[] memory tokenTransfers)\n    function cryptoTransfer(TransferList memory transferList, TokenTransferList[] memory tokenTransfers) external returns (int64 responseCode);\n\n    /// Mints an amount of the token to the defined treasury account\n    /// @param token The token for which to mint tokens. If token does not exist, transaction results in\n    ///              INVALID_TOKEN_ID\n    /// @param amount Applicable to tokens of type FUNGIBLE_COMMON. The amount to mint to the Treasury Account.\n    ///               Amount must be a positive non-zero number represented in the lowest denomination of the\n    ///               token. The new supply must be lower than 2^63.\n    /// @param metadata Applicable to tokens of type NON_FUNGIBLE_UNIQUE. A list of metadata that are being created.\n    ///                 Maximum allowed size of each metadata is 100 bytes\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    /// @return serialNumbers If the token is an NFT the newly generate serial numbers, othersise empty.\n    function mintToken(address token, int64 amount, bytes[] memory metadata) external returns (int64 responseCode, int64 newTotalSupply, int64[] memory serialNumbers);\n\n    /// Burns an amount of the token from the defined treasury account\n    /// @param token The token for which to burn tokens. If token does not exist, transaction results in\n    ///              INVALID_TOKEN_ID\n    /// @param amount  Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the Treasury Account.\n    ///                Amount must be a positive non-zero number, not bigger than the token balance of the treasury\n    ///                account (0; balance], represented in the lowest denomination.\n    /// @param serialNumbers Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be burned.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return newTotalSupply The new supply of tokens. For NFTs it is the total count of NFTs\n    function burnToken(address token, int64 amount, int64[] memory serialNumbers) external returns (int64 responseCode, int64 newTotalSupply);\n\n    ///  Associates the provided account with the provided tokens. Must be signed by the provided\n    ///  Account's key or called from the accounts contract key\n    ///  If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\n    ///  If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\n    ///  If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\n    ///  If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\n    ///  If an association between the provided account and any of the tokens already exists, the\n    ///  transaction will resolve to TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.\n    ///  If the provided account's associations count exceed the constraint of maximum token associations\n    ///    per account, the transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.\n    ///  On success, associations between the provided account and tokens are made and the account is\n    ///    ready to interact with the tokens.\n    /// @param account The account to be associated with the provided tokens\n    /// @param tokens The tokens to be associated with the provided account. In the case of NON_FUNGIBLE_UNIQUE\n    ///               Type, once an account is associated, it can hold any number of NFTs (serial numbers) of that\n    ///               token type\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function associateTokens(address account, address[] memory tokens) external returns (int64 responseCode);\n\n    /// Single-token variant of associateTokens. Will be mapped to a single entry array call of associateTokens\n    /// @param account The account to be associated with the provided token\n    /// @param token The token to be associated with the provided account\n    function associateToken(address account, address token) external returns (int64 responseCode);\n\n    /// Dissociates the provided account with the provided tokens. Must be signed by the provided\n    /// Account's key.\n    /// If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.\n    /// If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.\n    /// If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.\n    /// If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.\n    /// If an association between the provided account and any of the tokens does not exist, the\n    /// transaction will resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.\n    /// If a token has not been deleted and has not expired, and the user has a nonzero balance, the\n    /// transaction will resolve to TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES.\n    /// If a <b>fungible token</b> has expired, the user can disassociate even if their token balance is\n    /// not zero.\n    /// If a <b>non fungible token</b> has expired, the user can <b>not</b> disassociate if their token\n    /// balance is not zero. The transaction will resolve to TRANSACTION_REQUIRED_ZERO_TOKEN_BALANCES.\n    /// On success, associations between the provided account and tokens are removed.\n    /// @param account The account to be dissociated from the provided tokens\n    /// @param tokens The tokens to be dissociated from the provided account.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function dissociateTokens(address account, address[] memory tokens) external returns (int64 responseCode);\n\n    /// Single-token variant of dissociateTokens. Will be mapped to a single entry array call of dissociateTokens\n    /// @param account The account to be associated with the provided token\n    /// @param token The token to be associated with the provided account\n    function dissociateToken(address account, address token) external returns (int64 responseCode);\n\n    /// Creates a Fungible Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @param initialTotalSupply Specifies the initial supply of tokens to be put in circulation. The\n    /// initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.\n    /// @param decimals the number of decimal places a token is divisible by\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createFungibleToken(HederaToken memory token, int64 initialTotalSupply, int32 decimals) external payable returns (int64 responseCode, address tokenAddress);\n\n    /// Creates a Fungible Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @param initialTotalSupply Specifies the initial supply of tokens to be put in circulation. The\n    /// initial supply is sent to the Treasury Account. The supply is in the lowest denomination possible.\n    /// @param decimals the number of decimal places a token is divisible by.\n    /// @param fixedFees list of fixed fees to apply to the token\n    /// @param fractionalFees list of fractional fees to apply to the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createFungibleTokenWithCustomFees(HederaToken memory token, int64 initialTotalSupply, int32 decimals, FixedFee[] memory fixedFees, FractionalFee[] memory fractionalFees) external payable returns (int64 responseCode, address tokenAddress);\n\n    /// Creates an Non Fungible Unique Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createNonFungibleToken(HederaToken memory token) external payable returns (int64 responseCode, address tokenAddress);\n\n    /// Creates an Non Fungible Unique Token with the specified properties\n    /// @param token the basic properties of the token being created\n    /// @param fixedFees list of fixed fees to apply to the token\n    /// @param royaltyFees list of royalty fees to apply to the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenAddress the created token's address\n    function createNonFungibleTokenWithCustomFees(HederaToken memory token, FixedFee[] memory fixedFees, RoyaltyFee[] memory royaltyFees) external payable returns (int64 responseCode, address tokenAddress);\n\n    /**********************\n     * ABIV1 calls        *\n     **********************/\n\n    /// Initiates a Fungible Token Transfer\n    /// @param token The ID of the token as a solidity address\n    /// @param accountId account to do a transfer to/from\n    /// @param amount The amount from the accountId at the same index\n    function transferTokens(address token, address[] memory accountId, int64[] memory amount) external returns (int64 responseCode);\n\n    /// Initiates a Non-Fungable Token Transfer\n    /// @param token The ID of the token as a solidity address\n    /// @param sender the sender of an nft\n    /// @param receiver the receiver of the nft sent by the same index at sender\n    /// @param serialNumber the serial number of the nft sent by the same index at sender\n    function transferNFTs(address token, address[] memory sender, address[] memory receiver, int64[] memory serialNumber) external returns (int64 responseCode);\n\n    /// Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\n    /// where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\n    /// (positive amount) or receiving (negative amount)\n    /// @param token The token to transfer to/from\n    /// @param sender The sender for the transaction\n    /// @param recipient The receiver of the transaction\n    /// @param amount Non-negative value to send. a negative value will result in a failure.\n    function transferToken(address token, address sender, address recipient, int64 amount) external returns (int64 responseCode);\n\n    /// Transfers tokens where the calling account/contract is implicitly the first entry in the token transfer list,\n    /// where the amount is the value needed to zero balance the transfers. Regular signing rules apply for sending\n    /// (positive amount) or receiving (negative amount)\n    /// @param token The token to transfer to/from\n    /// @param sender The sender for the transaction\n    /// @param recipient The receiver of the transaction\n    /// @param serialNumber The serial number of the NFT to transfer.\n    function transferNFT(address token, address sender, address recipient, int64 serialNumber) external returns (int64 responseCode);\n\n    /// Allows spender to withdraw from your account multiple times, up to the value amount. If this function is called\n    /// again it overwrites the current allowance with value.\n    /// Only Applicable to Fungible Tokens\n    /// @param token The hedera token address to approve\n    /// @param spender the account address authorized to spend\n    /// @param amount the amount of tokens authorized to spend.\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function approve(address token, address spender, uint amount) external returns (int64 responseCode);\n\n    /// Transfers `amount` tokens from `from` to `to` using the\n    //  allowance mechanism. `amount` is then deducted from the caller's allowance.\n    /// Only applicable to fungible tokens\n    /// @param token The address of the fungible Hedera token to transfer\n    /// @param from The account address of the owner of the token, on the behalf of which to transfer `amount` tokens\n    /// @param to The account address of the receiver of the `amount` tokens\n    /// @param amount The amount of tokens to transfer from `from` to `to`\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function transferFrom(address token, address from, address to, uint amount) external returns (int64 responseCode);\n\n    /// Returns the amount which spender is still allowed to withdraw from owner.\n    /// Only Applicable to Fungible Tokens\n    /// @param token The Hedera token address to check the allowance of\n    /// @param owner the owner of the tokens to be spent\n    /// @param spender the spender of the tokens\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return allowance The amount which spender is still allowed to withdraw from owner.\n    function allowance(address token, address owner, address spender) external returns (int64 responseCode, uint allowance);\n\n    /// Allow or reaffirm the approved address to transfer an NFT the approved address does not own.\n    /// Only Applicable to NFT Tokens\n    /// @param token The Hedera NFT token address to approve\n    /// @param approved The new approved NFT controller.  To revoke approvals pass in the zero address.\n    /// @param serialNumber The NFT serial number  to approve\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function approveNFT(address token, address approved, uint serialNumber) external returns (int64 responseCode);\n\n    /// Transfers `serialNumber` of `token` from `from` to `to` using the allowance mechanism.\n    /// Only applicable to NFT tokens\n    /// @param token The address of the non-fungible Hedera token to transfer\n    /// @param from The account address of the owner of `serialNumber` of `token`\n    /// @param to The account address of the receiver of `serialNumber`\n    /// @param serialNumber The NFT serial number to transfer\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function transferFromNFT(address token, address from, address to, uint serialNumber) external returns (int64 responseCode);\n\n    /// Get the approved address for a single NFT\n    /// Only Applicable to NFT Tokens\n    /// @param token The Hedera NFT token address to check approval\n    /// @param serialNumber The NFT to find the approved address for\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return approved The approved address for this NFT, or the zero address if there is none\n    function getApproved(address token, uint serialNumber) external returns (int64 responseCode, address approved);\n\n    /// Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @param token The Hedera NFT token address to approve\n    /// @param operator Address to add to the set of authorized operators\n    /// @param approved True if the operator is approved, false to revoke approval\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function setApprovalForAll(address token, address operator, bool approved) external returns (int64 responseCode);\n\n    /// Query if an address is an authorized operator for another address\n    /// Only Applicable to NFT Tokens\n    /// @param token The Hedera NFT token address to approve\n    /// @param owner The address that owns the NFTs\n    /// @param operator The address that acts on behalf of the owner\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return approved True if `operator` is an approved operator for `owner`, false otherwise\n    function isApprovedForAll(address token, address owner, address operator) external returns (int64 responseCode, bool approved);\n\n    /// Query if token account is frozen\n    /// @param token The token address to check\n    /// @param account The account address associated with the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return frozen True if `account` is frozen for `token`\n    function isFrozen(address token, address account) external returns (int64 responseCode, bool frozen);\n\n    /// Query if token account has kyc granted\n    /// @param token The token address to check\n    /// @param account The account address associated with the token\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return kycGranted True if `account` has kyc granted for `token`\n    function isKyc(address token, address account) external returns (int64 responseCode, bool kycGranted);\n\n    /// Operation to delete token\n    /// @param token The token address to be deleted\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function deleteToken(address token) external returns (int64 responseCode);\n\n    /// Query token custom fees\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return fixedFees Set of fixed fees for `token`\n    /// @return fractionalFees Set of fractional fees for `token`\n    /// @return royaltyFees Set of royalty fees for `token`\n    function getTokenCustomFees(address token) external returns (int64 responseCode, FixedFee[] memory fixedFees, FractionalFee[] memory fractionalFees, RoyaltyFee[] memory royaltyFees);\n\n    /// Query token default freeze status\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return defaultFreezeStatus True if `token` default freeze status is frozen.\n    function getTokenDefaultFreezeStatus(address token) external returns (int64 responseCode, bool defaultFreezeStatus);\n\n    /// Query token default kyc status\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return defaultKycStatus True if `token` default kyc status is KycNotApplicable and false if Revoked.\n    function getTokenDefaultKycStatus(address token) external returns (int64 responseCode, bool defaultKycStatus);\n\n    /// Query token expiry info\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return expiry Expiry info for `token`\n    function getTokenExpiryInfo(address token) external returns (int64 responseCode, Expiry memory expiry);\n\n    /// Query fungible token info\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return fungibleTokenInfo FungibleTokenInfo info for `token`\n    function getFungibleTokenInfo(address token) external returns (int64 responseCode, FungibleTokenInfo memory fungibleTokenInfo);\n\n    /// Query token info\n    /// @param token The token address to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenInfo TokenInfo info for `token`\n    function getTokenInfo(address token) external returns (int64 responseCode, TokenInfo memory tokenInfo);\n\n    /// Query token KeyValue\n    /// @param token The token address to check\n    /// @param keyType The keyType of the desired KeyValue\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return key KeyValue info for key of type `keyType`\n    function getTokenKey(address token, uint keyType) external returns (int64 responseCode, KeyValue memory key);\n\n    /// Query non fungible token info\n    /// @param token The token address to check\n    /// @param serialNumber The NFT serialNumber to check\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return nonFungibleTokenInfo NonFungibleTokenInfo info for `token` `serialNumber`\n    function getNonFungibleTokenInfo(address token, int64 serialNumber) external returns (int64 responseCode, NonFungibleTokenInfo memory nonFungibleTokenInfo);\n\n    /// Operation to freeze token account\n    /// @param token The token address\n    /// @param account The account address to be frozen\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function freezeToken(address token, address account) external returns (int64 responseCode);\n\n    /// Operation to unfreeze token account\n    /// @param token The token address\n    /// @param account The account address to be unfrozen\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function unfreezeToken(address token, address account) external returns (int64 responseCode);\n\n    /// Operation to grant kyc to token account\n    /// @param token The token address\n    /// @param account The account address to grant kyc\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function grantTokenKyc(address token, address account) external returns (int64 responseCode);\n\n    /// Operation to revoke kyc to token account\n    /// @param token The token address\n    /// @param account The account address to revoke kyc\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function revokeTokenKyc(address token, address account) external returns (int64 responseCode);\n\n    /// Operation to pause token\n    /// @param token The token address to be paused\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function pauseToken(address token) external returns (int64 responseCode);\n\n    /// Operation to unpause token\n    /// @param token The token address to be unpaused\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function unpauseToken(address token) external returns (int64 responseCode);\n\n    /// Operation to wipe fungible tokens from account\n    /// @param token The token address\n    /// @param account The account address to revoke kyc\n    /// @param amount The number of tokens to wipe\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function wipeTokenAccount(address token, address account, int64 amount) external returns (int64 responseCode);\n\n    /// Operation to wipe non fungible tokens from account\n    /// @param token The token address\n    /// @param account The account address to revoke kyc\n    /// @param  serialNumbers The serial numbers of token to wipe\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function wipeTokenAccountNFT(address token, address account, int64[] memory serialNumbers) external returns (int64 responseCode);\n\n    /// Operation to update token info\n    /// @param token The token address\n    /// @param tokenInfo The hedera token info to update token with\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function updateTokenInfo(address token, HederaToken memory tokenInfo) external returns (int64 responseCode);\n\n    /// Operation to update token expiry info\n    /// @param token The token address\n    /// @param expiryInfo The hedera token expiry info\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function updateTokenExpiryInfo(address token, Expiry memory expiryInfo) external returns (int64 responseCode);\n\n    /// Operation to update token expiry info\n    /// @param token The token address\n    /// @param keys The token keys\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    function updateTokenKeys(address token, TokenKey[] memory keys) external returns (int64 responseCode);\n\n    /// Query if valid token found for the given address\n    /// @param token The token address\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return isToken True if valid token found for the given address\n    function isToken(address token) external returns (int64 responseCode, bool isToken);\n\n    /// Query to return the token type for a given address\n    /// @param token The token address\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return tokenType the token type. 0 is FUNGIBLE_COMMON, 1 is NON_FUNGIBLE_UNIQUE, -1 is UNRECOGNIZED\n    function getTokenType(address token) external returns (int64 responseCode, int32 tokenType);\n\n    /// Initiates a Redirect For Token\n    /// @param token The token address\n    /// @param encodedFunctionSelector The function selector from the ERC20 interface + the bytes input for the function called\n    /// @return responseCode The response code for the status of the request. SUCCESS is 22.\n    /// @return response The result of the call that had been encoded and sent for execution.\n    function redirectForToken(address token, bytes memory encodedFunctionSelector) external returns (int64 responseCode, bytes memory response);\n}\n"
    },
    "contracts/SpheraMarketplace/Market.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"./HederaTokenService.sol\";\r\nimport \"./IHederaTokenService.sol\";\r\nimport \"./HederaResponseCodes.sol\";\r\n\r\ncontract Market is HederaTokenService {\r\n    // Error Codes\r\n    enum MarketResponseCodes {\r\n        SUCCESS,\r\n        CONTRACT_DOES_NOT_HAVE_ALLOWANCE,\r\n        NOT_THE_CONTRACT_OWNER,\r\n        BID_NOT_EXISTS,\r\n        NOT_ENOUGH_MONEY,\r\n        TOKEN_ASSOCIATION_FAILED,\r\n        WRONG_PAGINATION,\r\n        WRONG_FUNCTION_INPUTS,\r\n        NFT_ALREADY_LISTED,\r\n        NO_PERMISSION,\r\n        ALLOWANCE_REQUIRED,\r\n        NFT_INFO_FETCH_FAILED,\r\n        NFT_NOT_LISTED,\r\n        NFT_TRANSFER_FAILED,\r\n        SPH_TRANSFER_FAILED\r\n    }\r\n\r\n    /////////////////////////////////\r\n    //////////// EVENTS /////////////\r\n    /////////////////////////////////\r\n    event ListNFT(address indexed token, uint indexed serialNumber, address indexed _owner, uint price);\r\n    event UnlistNFT(address indexed token, uint indexed serialNumber, address indexed owner, uint price);\r\n    event AddBid(address indexed token, uint serialNumber, address indexed owner, address indexed buyer, uint amount);\r\n    event DeleteBid(address indexed token, uint indexed serialNumber, address indexed owner, uint amount);\r\n    event AcceptBid(address indexed token, uint serialNumber, address indexed owner, address indexed buyer, uint acceptedBidAmount);\r\n\r\n    /////////////////////////////////\r\n    ///////// STRUCTURES ////////////\r\n    /////////////////////////////////\r\n    struct Bid {\r\n        address payable owner;\r\n        uint amount;\r\n        address token;\r\n        uint serialNumber;\r\n    }\r\n\r\n    struct BidIndexes {\r\n        uint tokenIndex;\r\n        uint receivedIndex;\r\n        uint sentIndex;\r\n        bool isSet;\r\n    }\r\n\r\n    struct BuyerTokens {\r\n        // total sphs in the contract\r\n        uint sphs;\r\n    }\r\n\r\n    // Struct to hold NFT details\r\n    struct NFT {\r\n        address payable owner;\r\n        uint price;\r\n        address token;\r\n        uint serialNumber;\r\n        bool isListed;\r\n    }\r\n\r\n    /////////////////////////////////\r\n    ////////// VARIABLES ////////////\r\n    /////////////////////////////////\r\n\r\n    // Mapping to store bids for each buyer\r\n    mapping(string => Bid[]) public tokenBids;\r\n    // Store bids maps for fast getting\r\n    mapping(address => Bid[]) public receivedBids;\r\n    mapping(address => Bid[]) public sentBids;\r\n\r\n    mapping(address => mapping(string => BidIndexes)) public buyersBidsIndexes;\r\n    mapping(address => BuyerTokens) public buyersTokens;\r\n    // Mapping from NFT to its details\r\n    // Key format: \"EVM_TOKEN_ID/SERIAL_NUMBER\"\r\n    mapping(string => NFT) public nfts;\r\n    address internal contractOwner;\r\n\r\n    address public spheraTokenAddress;\r\n    address treasuryWalletAddress;\r\n    uint public taxFee = 25; //divided by 1000\r\n\r\n    modifier onlyContractOwner() {\r\n        require(msg.sender == contractOwner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /////////////////////////////////\r\n    //////////// INTERNAL ///////////\r\n    /////////////////////////////////\r\n\r\n    function removeBidInfo(string memory nftId, address _buyer) internal {\r\n        address nftOwner = nfts[nftId].owner;\r\n        require(buyersBidsIndexes[_buyer][nftId].isSet, \"There is no bid, you can't remove it\");\r\n\r\n        BidIndexes memory indexes = buyersBidsIndexes[_buyer][nftId];\r\n\r\n        // Iterate through each bid type (token, sent, received)\r\n        for (uint8 bidType = 0; bidType < 3; bidType++) {\r\n            Bid[] storage bidArray;\r\n            uint bidIndex;\r\n\r\n            // Determine the bid array and index based on bid type\r\n            if (bidType == 0) {\r\n                bidArray = tokenBids[nftId];\r\n                bidIndex = indexes.tokenIndex;\r\n            } else if (bidType == 1) {\r\n                bidArray = sentBids[_buyer];\r\n                bidIndex = indexes.sentIndex;\r\n            } else {\r\n                bidArray = receivedBids[nftOwner];\r\n                bidIndex = indexes.receivedIndex;\r\n            }\r\n\r\n            // Move the last element to the position of the element to be removed\r\n            uint lastIndex = bidArray.length - 1;\r\n            Bid memory bidToMove = bidArray[lastIndex];\r\n            bidArray[bidIndex] = bidToMove;\r\n\r\n            // Remove the last element by reducing the length of the array\r\n            bidArray.pop();\r\n\r\n            // Determine the bid array and index based on bid type\r\n            if (bidType == 0) {\r\n                buyersBidsIndexes[bidToMove.owner][nftId].tokenIndex = bidIndex;\r\n            } else if (bidType == 1) {\r\n                buyersBidsIndexes[bidToMove.owner][nftId].sentIndex = bidIndex;\r\n            } else {\r\n                buyersBidsIndexes[bidToMove.owner][nftId].receivedIndex = bidIndex;\r\n            }\r\n        }\r\n\r\n        /////////////////////\r\n        /////// FINAL ///////\r\n        /////////////////////\r\n\r\n        // Remove pointer for removed bid\r\n        buyersBidsIndexes[_buyer][nftId].isSet = false;\r\n    }\r\n\r\n    function registerSpheraToken(address _tokenAddress) public onlyContractOwner {\r\n        spheraTokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function sendSphs(address sender, address recipient, uint amount) internal {\r\n        require(buyersTokens[sender].sphs >= amount, \"Not enough user sphs on the contract!\");\r\n\r\n        // (bool sent, ) = recipient.call{value: amount}(\"\");\r\n        // require(sent, \"Failed to send Sph\");\r\n        int response = HederaTokenService.transferToken(spheraTokenAddress, address(this), recipient, int64(uint64(amount)));\r\n        require(response == HederaResponseCodes.SUCCESS, \"Failed to transfer Sphera Token\");\r\n\r\n        if (sender != address(this)) {\r\n            buyersTokens[sender].sphs -= amount;\r\n        }\r\n    }\r\n\r\n    // acceptedBuyer address(0) = return money to everybody\r\n    function removeBids(string memory nftId, address moneyBackException) internal {\r\n        int index = int(tokenBids[nftId].length) - 1;\r\n\r\n        while (index >= 0) {\r\n            uint _index = uint(index);\r\n            Bid memory bid = tokenBids[nftId][_index];\r\n\r\n            // return money from bid\r\n            if (bid.owner != moneyBackException) {\r\n                sendSphs(bid.owner, bid.owner, bid.amount);\r\n            }\r\n\r\n            removeBidInfo(nftId, bid.owner);\r\n\r\n            index = int(tokenBids[nftId].length) - 1;\r\n        }\r\n    }\r\n\r\n    function addressToString(address _addr) internal pure returns (string memory) {\r\n        bytes32 value = bytes32(uint(uint160(_addr)));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\r\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function uint256ToString(uint _num) internal pure returns (string memory) {\r\n        if (_num == 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        uint num = _num;\r\n        uint digits = 0;\r\n        uint tempNum = num;\r\n\r\n        while (tempNum != 0) {\r\n            digits++;\r\n            tempNum /= 10;\r\n        }\r\n\r\n        bytes memory buffer = new bytes(digits);\r\n\r\n        uint index = digits;\r\n\r\n        while (num != 0) {\r\n            index--;\r\n            buffer[index] = bytes1(uint8(48 + (num % 10)));\r\n            num /= 10;\r\n        }\r\n\r\n        return string(buffer);\r\n    }\r\n\r\n    function concatenateAddressAndInt(address _addr, uint _num) internal pure returns (string memory) {\r\n        string memory addressString = addressToString(_addr);\r\n        string memory intString = uint256ToString(_num);\r\n\r\n        return string(abi.encodePacked(addressString, \"/\", intString));\r\n    }\r\n\r\n    function formatNftId(address _token, uint _serialNumber) internal pure returns (string memory) {\r\n        return concatenateAddressAndInt(_token, _serialNumber);\r\n    }\r\n\r\n    function getPaginatedBids(Bid[] memory bidArray, uint64 page, uint64 pageSize) private pure returns (Bid[] memory) {\r\n        if (bidArray.length == 0) {\r\n            return bidArray;\r\n        }\r\n\r\n        require(pageSize > 0, \"pageSize must be greater than 0\");\r\n        require(page > 0, \"pagination is starting at 1\");\r\n\r\n        uint startIndex = (page - 1) * pageSize;\r\n        require(startIndex < bidArray.length, \"Page out of bounds\");\r\n\r\n        uint endIndex = startIndex + pageSize;\r\n        if (endIndex > bidArray.length) {\r\n            endIndex = bidArray.length;\r\n        }\r\n\r\n        Bid[] memory pageBids = new Bid[](endIndex - startIndex);\r\n\r\n        for (uint i = startIndex; i < endIndex; i++) {\r\n            pageBids[i - startIndex] = bidArray[i];\r\n        }\r\n\r\n        return pageBids;\r\n    }\r\n\r\n    /////////////////////////////////\r\n    //////////// PUBLIC /////////////\r\n    /////////////////////////////////\r\n\r\n    function associateToken(address _token) external onlyContractOwner returns (int) {\r\n        int response = HederaTokenService.associateToken(address(this), _token);\r\n\r\n        if (response != HederaResponseCodes.SUCCESS) {\r\n            revert(\"Failed to associate token\");\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    function sendSphsToContract() external payable returns (uint) {\r\n        return uint(MarketResponseCodes.SUCCESS);\r\n    }\r\n\r\n    function getTokenBid(address _token, uint _serialNumber, address _buyer) public view returns (Bid memory) {\r\n        string memory nftId = formatNftId(_token, _serialNumber);\r\n\r\n        Bid memory bid = Bid({amount: 0, owner: payable(_buyer), token: _token, serialNumber: _serialNumber});\r\n\r\n        BidIndexes memory bidIndex = buyersBidsIndexes[_buyer][nftId];\r\n\r\n        if (!bidIndex.isSet) {\r\n            return bid;\r\n        }\r\n\r\n        return tokenBids[nftId][bidIndex.tokenIndex];\r\n    }\r\n\r\n    function getTokenBids(address _token, uint _serialNumber, uint64 page, uint64 pageSize) public view returns (Bid[] memory) {\r\n        string memory nftId = formatNftId(_token, _serialNumber);\r\n        Bid[] memory allBids = tokenBids[nftId];\r\n\r\n        return getPaginatedBids(allBids, page, pageSize);\r\n    }\r\n\r\n    function getReceivedBids(address _owner, uint64 page, uint64 pageSize) public view returns (Bid[] memory) {\r\n        Bid[] memory allBids = receivedBids[_owner];\r\n\r\n        return getPaginatedBids(allBids, page, pageSize);\r\n    }\r\n\r\n    function getSentBids(address _buyer, uint64 page, uint64 pageSize) public view returns (Bid[] memory) {\r\n        Bid[] memory allBids = sentBids[_buyer];\r\n\r\n        return getPaginatedBids(allBids, page, pageSize);\r\n    }\r\n\r\n    /////////////////////////////////\r\n    ////////// NFT OWNER ////////////\r\n    /////////////////////////////////\r\n\r\n    function listNFT(address[] memory _tokens, uint[] memory _serialNumbers, uint[] memory _prices) external returns (uint) {\r\n        require(_tokens.length > 0 && _serialNumbers.length > 0 && _prices.length > 0, \"Array length should be more than 0\");\r\n        require(_tokens.length == _serialNumbers.length && _tokens.length == _prices.length, \"Arrays length mismatch\");\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            address _token = _tokens[i];\r\n            uint _serialNumber = _serialNumbers[i];\r\n            uint _price = _prices[i];\r\n\r\n            (int responseCode, IHederaTokenService.NonFungibleTokenInfo memory tokenInfo) = HederaTokenService.getNonFungibleTokenInfo(_token, int64(int(_serialNumber)));\r\n\r\n            require(responseCode == HederaResponseCodes.SUCCESS, \"Failed to fetch NFT Info\");\r\n            require(tokenInfo.spenderId == address(this), \"The Contract doesn't have allowance for this token\");\r\n            require(msg.sender == tokenInfo.ownerId, \"You have no permission for this function\");\r\n\r\n            string memory nftId = formatNftId(_token, _serialNumber);\r\n\r\n            if (nfts[nftId].isListed && nfts[nftId].owner != tokenInfo.ownerId) {\r\n                removeBids(nftId, address(0));\r\n            }\r\n\r\n            nfts[nftId] = NFT({owner: payable(tokenInfo.ownerId), price: _price, token: _token, serialNumber: _serialNumber, isListed: true});\r\n\r\n            emit ListNFT(_token, _serialNumber, msg.sender, _price);\r\n\r\n            Bid memory maxAmountBid;\r\n            for (uint j = 0; j < tokenBids[nftId].length; j++) {\r\n                Bid memory bid = tokenBids[nftId][j];\r\n\r\n                if (bid.amount >= nfts[nftId].price && bid.amount > maxAmountBid.amount) {\r\n                    maxAmountBid = bid;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (maxAmountBid.amount != 0) {\r\n                this.acceptBid(_token, _serialNumber, maxAmountBid.owner, maxAmountBid.amount);\r\n            }\r\n        }\r\n\r\n        return uint(MarketResponseCodes.SUCCESS);\r\n    }\r\n\r\n    function unlistNFT(address _token, uint _serialNumber) external returns (uint) {\r\n        string memory nftId = formatNftId(_token, _serialNumber);\r\n\r\n        (int responseCode, IHederaTokenService.NonFungibleTokenInfo memory tokenInfo) = HederaTokenService.getNonFungibleTokenInfo(_token, int64(int(_serialNumber)));\r\n\r\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Failed to fetch NFT Info\");\r\n\r\n        require(msg.sender == tokenInfo.ownerId || msg.sender == contractOwner, \"You have no permission for this function\");\r\n\r\n        removeBids(nftId, address(0));\r\n\r\n        nfts[nftId].isListed = false;\r\n\r\n        emit UnlistNFT(_token, _serialNumber, tokenInfo.ownerId, nfts[nftId].price);\r\n        return uint(MarketResponseCodes.SUCCESS);\r\n    }\r\n\r\n    function acceptBid(address _token, uint _serialNumber, address payable _buyer, uint _acceptedBidAmount) external returns (uint) {\r\n        string memory nftId = formatNftId(_token, _serialNumber);\r\n\r\n        require(msg.sender == nfts[nftId].owner || msg.sender == address(this), \"You have no permission for this function\");\r\n        require(nfts[nftId].isListed, \"NFT not listed\");\r\n\r\n        (int responseCode, IHederaTokenService.NonFungibleTokenInfo memory nftInfo) = HederaTokenService.getNonFungibleTokenInfo(_token, int64(int(_serialNumber)));\r\n\r\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Failed to fetch NFT Info\");\r\n        require(nftInfo.spenderId == address(this), \"Contract doesn't have allowance for this NFT\");\r\n        require(buyersBidsIndexes[_buyer][nftId].isSet, \"Buyer doesn't have bid for this NFT\");\r\n        require(tokenBids[nftId][buyersBidsIndexes[_buyer][nftId].tokenIndex].amount == _acceptedBidAmount, \"This buyer didn't suggest that price value for this NFT\");\r\n        require(buyersTokens[_buyer].sphs >= _acceptedBidAmount, \"Buyer doesn't have enough SPHs in the contract\");\r\n\r\n        // not sure about royalty\r\n        uint ownerRewardAmount = _acceptedBidAmount;\r\n\r\n        if (taxFee > 0) {\r\n            uint taxAmount = ownerRewardAmount * uint(int(taxFee / 1000));\r\n\r\n            int response = HederaTokenService.transferToken(spheraTokenAddress, address(this), treasuryWalletAddress, int64(uint64(taxAmount)));\r\n            require(response == HederaResponseCodes.SUCCESS, \"Failed to send tax Sph.\");\r\n\r\n            ownerRewardAmount -= taxAmount;\r\n        }\r\n\r\n        IHederaTokenService.RoyaltyFee memory royalty = nftInfo.tokenInfo.royaltyFees[0];\r\n        if (royalty.numerator > 0) {\r\n            uint royaltyAmount = ownerRewardAmount * uint(int(royalty.numerator / royalty.denominator));\r\n\r\n            (bool royaltySent, ) = payable(royalty.feeCollector).call{value: royaltyAmount}(\"\");\r\n            require(royaltySent, \"Failed to send royalty Sph\");\r\n\r\n            // int response = HederaTokenService.transferToken(\r\n            //     spheraTokenAddress,\r\n            //     address(this),\r\n            //     royalty.feeCollector,\r\n            //     int64(uint64(royaltyAmount))\r\n            // );\r\n            // require(\r\n            //     response == HederaResponseCodes.SUCCESS,\r\n            //     \"Failed to send royalty Sph\"\r\n            // );\r\n\r\n            ownerRewardAmount -= royaltyAmount;\r\n        }\r\n\r\n        sendSphs(_buyer, nfts[nftId].owner, ownerRewardAmount);\r\n\r\n        // transfer NFT\r\n        int nftTransferResponse = this.transferFromNFT(_token, nfts[nftId].owner, _buyer, _serialNumber);\r\n        require(nftTransferResponse == HederaResponseCodes.SUCCESS, \"Failed to transfer NFT\");\r\n\r\n        // return money for other bids\r\n        removeBids(nftId, _buyer);\r\n\r\n        emit AcceptBid(_token, _serialNumber, nfts[nftId].owner, _buyer, _acceptedBidAmount);\r\n\r\n        // Unlist nft.\r\n        nfts[nftId].isListed = false;\r\n        nfts[nftId].owner = _buyer;\r\n\r\n        return uint(MarketResponseCodes.SUCCESS);\r\n    }\r\n\r\n    /////////////////////////////////\r\n    ///////////// BUYER /////////////\r\n    /////////////////////////////////\r\n\r\n    function addBid(address _token, uint _serialNumber, uint tokenAmount) external payable returns (uint) {\r\n        address payable _buyer = payable(msg.sender);\r\n        string memory nftId = formatNftId(_token, _serialNumber);\r\n\r\n        require(nfts[nftId].isListed, \"NFT not listed\");\r\n\r\n        (int responseCode, IHederaTokenService.NonFungibleTokenInfo memory nftInfo) = HederaTokenService.getNonFungibleTokenInfo(_token, int64(int(_serialNumber)));\r\n\r\n        require(responseCode == HederaResponseCodes.SUCCESS, \"Failed to fetch NFT Info\");\r\n        require(nftInfo.ownerId == nfts[nftId].owner, \"Nft owner has been changed. Invalid NFT listing.\");\r\n\r\n        int response = HederaTokenService.transferToken(spheraTokenAddress, msg.sender, address(this), int64(uint64(tokenAmount)));\r\n        require(response == HederaResponseCodes.SUCCESS, \"Failed to transfer Sphera Token\");\r\n\r\n        // add buyer info to contract to track buyer money in the contract\r\n        if (buyersTokens[_buyer].sphs == 0) {\r\n            buyersTokens[_buyer] = BuyerTokens({sphs: tokenAmount});\r\n        } else {\r\n            buyersTokens[_buyer].sphs += tokenAmount;\r\n        }\r\n\r\n        BidIndexes memory prevBidIndex = buyersBidsIndexes[_buyer][nftId];\r\n\r\n        if (buyersBidsIndexes[_buyer][nftId].isSet) {\r\n            Bid memory _previousBid = tokenBids[nftId][prevBidIndex.tokenIndex];\r\n\r\n            sendSphs(_buyer, _buyer, _previousBid.amount);\r\n\r\n            tokenBids[nftId][prevBidIndex.tokenIndex].amount = tokenAmount;\r\n            receivedBids[nfts[nftId].owner][prevBidIndex.receivedIndex].amount = tokenAmount;\r\n            sentBids[_buyer][prevBidIndex.sentIndex].amount = tokenAmount;\r\n\r\n            if (tokenAmount >= nfts[nftId].price) {\r\n                return this.acceptBid(_token, _serialNumber, _buyer, tokenAmount);\r\n            }\r\n\r\n            emit AddBid(_token, _serialNumber, nftInfo.ownerId, msg.sender, tokenAmount);\r\n            return uint(MarketResponseCodes.SUCCESS);\r\n        }\r\n\r\n        // add bid and save its index\r\n        Bid memory bid = Bid({amount: tokenAmount, owner: _buyer, token: _token, serialNumber: _serialNumber});\r\n\r\n        tokenBids[nftId].push(bid);\r\n        sentBids[msg.sender].push(bid);\r\n        receivedBids[nfts[nftId].owner].push(bid);\r\n\r\n        buyersBidsIndexes[_buyer][nftId] = BidIndexes({tokenIndex: tokenBids[nftId].length - 1, sentIndex: sentBids[msg.sender].length - 1, receivedIndex: receivedBids[nfts[nftId].owner].length - 1, isSet: true});\r\n\r\n        if (tokenAmount >= nfts[nftId].price) {\r\n            return this.acceptBid(_token, _serialNumber, _buyer, bid.amount);\r\n        }\r\n\r\n        emit AddBid(_token, _serialNumber, nftInfo.ownerId, msg.sender, tokenAmount);\r\n        return uint(MarketResponseCodes.SUCCESS);\r\n    }\r\n\r\n    function deleteBid(address _token, uint _serialNumber, address payable _buyer) external returns (uint) {\r\n        string memory nftId = formatNftId(_token, _serialNumber);\r\n\r\n        require(msg.sender == _buyer || msg.sender == contractOwner, \"You have no permissions for this function.\");\r\n        require(buyersBidsIndexes[_buyer][nftId].isSet, \"You have no bids for this NFT\");\r\n\r\n        uint bidTokenIndex = buyersBidsIndexes[_buyer][nftId].tokenIndex;\r\n        Bid memory bid = tokenBids[nftId][bidTokenIndex];\r\n\r\n        require(buyersTokens[_buyer].sphs >= tokenBids[nftId][bidTokenIndex].amount, \"You have no enough money in the contract to delete bid\");\r\n\r\n        emit DeleteBid(_token, _serialNumber, msg.sender, bid.amount);\r\n\r\n        sendSphs(_buyer, _buyer, bid.amount);\r\n        removeBidInfo(nftId, bid.owner);\r\n\r\n        return uint(MarketResponseCodes.SUCCESS);\r\n    }\r\n\r\n    function changeTaxFee(uint _newFee) public onlyContractOwner {\r\n        taxFee = _newFee;\r\n    }\r\n}\r\n"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}