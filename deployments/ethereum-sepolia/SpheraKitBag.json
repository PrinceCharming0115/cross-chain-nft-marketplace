{
  "address": "0x6b63555b734204B3Ee5B8595A9E8a022a606Fb61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_withdrawAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BagRedeemerNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitialTransferLockOn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPeriodSetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxPeriodMintSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintingTooMuchInPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedByRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OverMaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeriodNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemBagNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistryNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        }
      ],
      "name": "PeriodMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FCFS_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GTD_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ADDRESS",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "breakTransferLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "fcfs_validateAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "gtd_validateAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "individualMintedInPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialTransferLockOn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegistryActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "openPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openRedeemBagState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilteringEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "periodInfo",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "price",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "MAX_MINT_ALLOWED",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "MAX_SUPPLY",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "periodMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "BagIds",
          "type": "uint256[]"
        }
      ],
      "name": "redeemBags",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "redeemBagOpen",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "BagRedeemer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setBagRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_fcfsMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setFcfsMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_gtdMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setGtdMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isRegistryActive",
          "type": "bool"
        }
      ],
      "name": "setIsRegistryActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setOperatorFilteringEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_endTime",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_price",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_MAX_MINT_ALLOWED",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_MAX_SUPPLY",
          "type": "uint64"
        }
      ],
      "name": "setPeriodParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalMintedInPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferLowerOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRealOwner",
          "type": "address"
        }
      ],
      "name": "transferRealOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7cebf9f88e83902bd556587d8fc32f1cb8de7ddbc4a1eed58e5cf5234a3d57b6",
  "receipt": {
    "to": null,
    "from": "0x43b1DB0EC2167C8811cA0216A35B3bEfc339689c",
    "contractAddress": "0x6b63555b734204B3Ee5B8595A9E8a022a606Fb61",
    "transactionIndex": 207,
    "gasUsed": "2852547",
    "logsBloom": "0x
    "blockHash": "0x42f36d2fd809db578239afd2ddf462f89151ee663db7a27ce42a813a52df7d88",
    "transactionHash": "0x7cebf9f88e83902bd556587d8fc32f1cb8de7ddbc4a1eed58e5cf5234a3d57b6",
    "logs": [
      {
        "transactionIndex": 207,
        "blockNumber": 5478179,
        "transactionHash": "0x7cebf9f88e83902bd556587d8fc32f1cb8de7ddbc4a1eed58e5cf5234a3d57b6",
        "address": "0x6b63555b734204B3Ee5B8595A9E8a022a606Fb61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000043b1db0ec2167c8811ca0216a35b3befc339689c"
        ],
        "data": "0x",
        "logIndex": 285,
        "blockHash": "0x42f36d2fd809db578239afd2ddf462f89151ee663db7a27ce42a813a52df7d88"
      }
    ],
    "blockNumber": 5478179,
    "cumulativeGasUsed": "14646853",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "SpheraKitBag",
    "SKB",
    3000,
    "0x43b1DB0EC2167C8811cA0216A35B3bEfc339689c"
  ],
  "numDeployments": 2,
  "solcInputHash": "e1f6d9b971eb2c6eeabc7d9ff0c5f749",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_withdrawAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BagRedeemerNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialTransferLockOn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPeriodSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPeriodMintSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingTooMuchInPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedByRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeriodNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemBagNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistryNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"PeriodMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FCFS_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GTD_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breakTransferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"fcfs_validateAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"gtd_validateAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualMintedInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTransferLockOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"openPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openRedeemBagState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilteringEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"MAX_MINT_ALLOWED\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"MAX_SUPPLY\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"periodMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"BagIds\",\"type\":\"uint256[]\"}],\"name\":\"redeemBags\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"redeemBagOpen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"BagRedeemer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setBagRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fcfsMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setFcfsMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_gtdMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setGtdMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegistryActive\",\"type\":\"bool\"}],\"name\":\"setIsRegistryActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setOperatorFilteringEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_MAX_MINT_ALLOWED\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_MAX_SUPPLY\",\"type\":\"uint64\"}],\"name\":\"setPeriodParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalMintedInPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLowerOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRealOwner\",\"type\":\"address\"}],\"name\":\"transferRealOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpheraKitBag.sol\":\"SpheraKitBag\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/MultisigOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\r\\n// Source: https://github.com/tubby-cats/dual-ownership-nft\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\nabstract contract MultisigOwnable is Ownable {\\r\\n  address public realOwner;\\r\\n\\r\\n  constructor() {\\r\\n    realOwner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyRealOwner() {\\r\\n    require(\\r\\n      realOwner == msg.sender,\\r\\n      'MultisigOwnable: caller is not the real owner'\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function transferRealOwnership(address newRealOwner) public onlyRealOwner {\\r\\n    realOwner = newRealOwner;\\r\\n  }\\r\\n\\r\\n  function transferLowerOwnership(address newOwner) public onlyRealOwner {\\r\\n    transferOwnership(newOwner);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x3d1435ebece0a40b4106757b85cc37cefb9226a715fff0e85d4a73e8b84ec2d3\",\"license\":\"CC0-1.0\"},\"contracts/SpheraKitBag.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n//import \\\"@layerzerolabs/solidity-examples/contracts/token/onft721/ONFT721A.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\r\\nimport \\\"./closedsea/OperatorFilterer.sol\\\";\\r\\nimport \\\"./MultisigOwnable.sol\\\";\\r\\nimport \\\"./Whitelist.sol\\\";\\r\\n\\r\\nerror InvalidPeriodSetup();\\r\\nerror MaxPeriodMintSupplyReached();\\r\\nerror RedeemBagNotOpen();\\r\\nerror BagRedeemerNotSet();\\r\\nerror RegistryNotSet();\\r\\nerror NotAllowedByRegistry();\\r\\nerror WithdrawFailed();\\r\\nerror InitialTransferLockOn();\\r\\nerror InsufficientFunds();\\r\\nerror OverMaxSupply();\\r\\nerror PeriodNotOpen();\\r\\nerror MintingTooMuchInPeriod();\\r\\n\\r\\n//The interface of a sphera head nft contract\\r\\ninterface IBagRedeemer {\\r\\n    function redeemBags(address to, uint256[] calldata BagIds)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n}\\r\\n\\r\\n//Used for openzeppelin contract registry\\r\\ninterface IRegistry {\\r\\n    function isAllowedOperator(address operator) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract SpheraKitBag is ERC2981, MultisigOwnable, OperatorFilterer, ERC721A, Whitelist {\\r\\n    event PeriodMint(address indexed minter, uint256 period, uint16 indexed amount); // Period mint event\\r\\n\\r\\n    bool public operatorFilteringEnabled = true; //Operator Filtering for Openzepplin contract registry\\r\\n    bool public initialTransferLockOn = true;   //Initial lock on transfer functionality\\r\\n    bool public isRegistryActive = false;       //Openzeppelin registry checker\\r\\n    address public registryAddress;             //Openzeppelin registry address\\r\\n\\r\\n    uint256 public immutable MAX_SUPPLY;\\r\\n\\r\\n    //----- Period mint variables definition start -----\\r\\n    // Constants for period \\r\\n    uint256 public constant GTD_PERIOD = 1;     \\r\\n    uint256 public constant FCFS_PERIOD = 2;\\r\\n    uint256 public constant PUBLIC_PERIOD = 3;\\r\\n\\r\\n    //Structure for Period Information\\r\\n    struct PeriodInfo {\\r\\n        uint32 startTime;\\r\\n        uint32 endTime;\\r\\n        uint64 price;\\r\\n        uint64 MAX_MINT_ALLOWED;\\r\\n        uint64 MAX_SUPPLY;\\r\\n    }\\r\\n\\r\\n    //Period-mint related functions\\r\\n    uint256 public currentPeriod;\\r\\n    mapping(uint256 => PeriodInfo) public periodInfo;\\r\\n    mapping(uint256 => mapping(address => uint256)) public individualMintedInPeriod;\\r\\n    mapping(uint256 => uint64) public totalMintedInPeriod;\\r\\n    //----- Period mint variables definition end -----\\r\\n    struct RedeemInfo {\\r\\n        bool redeemBagOpen;\\r\\n        address BagRedeemer;\\r\\n    }\\r\\n    RedeemInfo public redeemInfo;\\r\\n\\r\\n    string private _baseTokenURI;\\r\\n\\r\\n    address payable public immutable WITHDRAW_ADDRESS;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint256 _maxSupply,\\r\\n        address payable _withdrawAddress\\r\\n    ) ERC721A(_name, _symbol) {\\r\\n        MAX_SUPPLY = _maxSupply;\\r\\n        WITHDRAW_ADDRESS = _withdrawAddress;\\r\\n        \\r\\n    }\\r\\n\\r\\n    // This function allows users to mint tokens during a specific period, with certain conditions and validations.\\r\\n    function periodMint(\\r\\n        uint256 _period,  // The period during which the minting is allowed.\\r\\n        uint16 amount,     // The number of tokens the user wants to mint.\\r\\n        bytes32[] memory proof // Proof of eligibility, required for GTD and FCFS periods.\\r\\n    ) external payable {\\r\\n        // Retrieve the period information from the contract's storage.\\r\\n        PeriodInfo memory info = periodInfo[_period];\\r\\n\\r\\n        // Check if the current period matches the requested period and if the minting period is open.\\r\\n        if (\\r\\n            currentPeriod != _period || // Ensure the requested period is the current active period.\\r\\n            info.startTime ==  0 || // Check if the period has been set up.\\r\\n            block.timestamp < info.startTime || // Ensure the current time is after the start of the period.\\r\\n            block.timestamp >= info.endTime // Ensure the current time is before the end of the period.\\r\\n        ) {\\r\\n            revert PeriodNotOpen(); // If any of the above conditions are not met, revert the transaction.\\r\\n        }\\r\\n        \\r\\n        // For GTD and FCFS periods, validate the sender's address using the provided proof.\\r\\n        if (_period == GTD_PERIOD) {\\r\\n            require(gtd_validateAddress(proof, msg.sender) == true, \\\"Invalid minter.\\\");\\r\\n        }\\r\\n        else if (_period == FCFS_PERIOD) {\\r\\n            require(fcfs_validateAddress(proof, msg.sender) == true, \\\"Invalid minter.\\\");\\r\\n        }\\r\\n\\r\\n        // Retrieve the number of tokens already minted by the sender in this period.\\r\\n        uint256 numMintedInPeriodLoc = individualMintedInPeriod[_period][msg.sender];\\r\\n\\r\\n        // Check if the sender is trying to mint more tokens than allowed in this period.\\r\\n        if (amount > info.MAX_MINT_ALLOWED - individualMintedInPeriod[_period][msg.sender]) {\\r\\n            revert MintingTooMuchInPeriod(); // Revert if the sender exceeds their limit.\\r\\n        }\\r\\n\\r\\n        // Retrieve the total number of tokens minted in this period so far.\\r\\n        uint64 totalPeriodMintedLocal = totalMintedInPeriod[_period];\\r\\n\\r\\n        // Check if the sender is trying to mint more tokens than the period's total supply limit.\\r\\n        if (amount + totalPeriodMintedLocal > info.MAX_SUPPLY) {\\r\\n            revert MaxPeriodMintSupplyReached(); // Revert if the total supply limit is exceeded.\\r\\n        }\\r\\n\\r\\n        // Check if the minting would exceed the contract's overall supply limit.\\r\\n        if (_totalMinted() + amount > MAX_SUPPLY) {\\r\\n            revert OverMaxSupply(); // Revert if the overall supply limit is exceeded.\\r\\n        }\\r\\n\\r\\n        // Calculate the total cost of minting the requested amount of tokens.\\r\\n        uint256 totalCost = uint256(info.price) * amount;\\r\\n\\r\\n        // Ensure the sender has sent enough Ether to cover the cost.\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientFunds(); // Revert if the sender has not sent enough Ether.\\r\\n        }\\r\\n\\r\\n        // Update the number of tokens minted by the sender in this period and the total minted in this period.\\r\\n        unchecked {\\r\\n            individualMintedInPeriod[_period][msg.sender] = amount + numMintedInPeriodLoc;\\r\\n            totalMintedInPeriod[_period] = totalPeriodMintedLocal + amount;\\r\\n        }\\r\\n\\r\\n        //Send current balance of the contract to withdraw address\\r\\n        assert(WITHDRAW_ADDRESS != address(0));\\r\\n        (bool sent, ) = WITHDRAW_ADDRESS.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert WithdrawFailed();\\r\\n        }\\r\\n\\r\\n        // Mint the requested amount of tokens to the sender's address.\\r\\n        _mint(msg.sender, amount);\\r\\n\\r\\n        // Emit an event to log the minting transaction.\\r\\n        emit PeriodMint(msg.sender, _period, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n        This function sets which stage are we in.\\r\\n        1:GTD phase\\r\\n        2:FCFS phase\\r\\n        3:public phase\\r\\n    */\\r\\n    function openPeriod(uint256 _period) public onlyOwner{\\r\\n        currentPeriod = _period;\\r\\n    }\\r\\n\\r\\n    // This function allows the contract owner to set the parameters for a specific minting period.\\r\\n    function setPeriodParams(\\r\\n        uint256 _period, // The identifier of the period for which parameters are being set.\\r\\n        uint32 _startTime, // The start time of the period in seconds since the Unix epoch.\\r\\n        uint32 _endTime, // The end time of the period in seconds since the Unix epoch.\\r\\n        uint64 _price, // The price per token in wei for this period.\\r\\n        uint64 _MAX_MINT_ALLOWED, // The maximum number of tokens allowed to be minted by a single address during this period.\\r\\n        uint64 _MAX_SUPPLY // The maximum total supply of tokens for this period.\\r\\n    ) external onlyOwner {\\r\\n        // Validate the input parameters to ensure they are valid and do not conflict.\\r\\n        if (\\r\\n            _startTime ==  0 || _endTime ==  0 || _price ==  0 // Ensure that start time, end time, and price are not zero.\\r\\n        ) {\\r\\n            revert InvalidPeriodSetup(); // Revert if any of the required parameters are missing or invalid.\\r\\n        }\\r\\n        if (_startTime >= _endTime) { // Ensure the start time is before the end time.\\r\\n            revert InvalidPeriodSetup(); // Revert if the start time is not before the end time.\\r\\n        }\\r\\n\\r\\n        // Set the period information in the contract's storage.\\r\\n        periodInfo[_period] = PeriodInfo(\\r\\n            _startTime,\\r\\n            _endTime,\\r\\n            _price,\\r\\n            _MAX_MINT_ALLOWED,\\r\\n            _MAX_SUPPLY\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner() {\\r\\n        (bool sent, ) = WITHDRAW_ADDRESS.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert WithdrawFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // -----------\\r\\n    // Redeem Bag\\r\\n    // -----------\\r\\n    function redeemBags(uint256[] calldata BagIds)\\r\\n        external\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        RedeemInfo memory info = redeemInfo;\\r\\n        if (!info.redeemBagOpen) {\\r\\n            revert RedeemBagNotOpen();\\r\\n        }\\r\\n        return _redeemBagsImpl(msg.sender, BagIds, true, info.BagRedeemer);\\r\\n    }\\r\\n\\r\\n    function _redeemBagsImpl(\\r\\n        address BagOwner,\\r\\n        uint256[] memory BagIds,\\r\\n        bool burnOwnerOrApprovedCheck,\\r\\n        address BagRedeemer\\r\\n    ) private returns (uint256[] memory) {\\r\\n        for (uint256 i; i < BagIds.length; ) {\\r\\n            _burn(BagIds[i], burnOwnerOrApprovedCheck);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return IBagRedeemer(BagRedeemer).redeemBags(BagOwner, BagIds);\\r\\n    }\\r\\n\\r\\n    function openRedeemBagState() external onlyOwner {\\r\\n        RedeemInfo memory info = redeemInfo;\\r\\n        if (info.BagRedeemer == address(0)) {\\r\\n            revert BagRedeemerNotSet();\\r\\n        }\\r\\n        redeemInfo = RedeemInfo(true, info.BagRedeemer);\\r\\n    }\\r\\n\\r\\n    function setBagRedeemer(address contractAddress) external onlyOwner {\\r\\n        redeemInfo = RedeemInfo(redeemInfo.redeemBagOpen, contractAddress);\\r\\n    }\\r\\n\\r\\n    // -------------------\\r\\n    // Break transfer lock\\r\\n    // -------------------\\r\\n    function breakTransferLock() external onlyOwner {\\r\\n        initialTransferLockOn = false;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // Metadata\\r\\n    // --------\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // EIP-2981\\r\\n    // --------\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(\\r\\n        uint256 tokenId,\\r\\n        address receiver,\\r\\n        uint96 feeNumerator\\r\\n    ) external onlyOwner {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------\\r\\n    // OperatorFilterer overrides (overrides, values etc.)\\r\\n    // ---------------------------------------------------\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        override(ERC721A)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        if (initialTransferLockOn) revert InitialTransferLockOn();\\r\\n        super.setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n    function setOperatorFilteringEnabled(bool value) public onlyOwner {\\r\\n        operatorFilteringEnabled = value;\\r\\n    }\\r\\n\\r\\n    function _operatorFilteringEnabled() internal view override returns (bool) {\\r\\n        return operatorFilteringEnabled;\\r\\n    }\\r\\n\\r\\n    function approve(address operator, uint256 tokenId)\\r\\n        public\\r\\n        payable\\r\\n        override(ERC721A)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        if (initialTransferLockOn) revert InitialTransferLockOn();\\r\\n        super.approve(operator, tokenId);\\r\\n    }\\r\\n\\r\\n    // ERC721A calls transferFrom internally in its two safeTransferFrom functions, so we don't need to override those.\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable override(ERC721A) onlyAllowedOperator(from) {\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    // --------------\\r\\n    // Registry check\\r\\n    // --------------\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal override {\\r\\n        if (initialTransferLockOn && from != address(0) && to != address(0))\\r\\n            revert InitialTransferLockOn();\\r\\n        if (_isValidAgainstRegistry(msg.sender)) {\\r\\n            super._beforeTokenTransfers(from, to, startTokenId, quantity);\\r\\n        } else {\\r\\n            revert NotAllowedByRegistry();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isValidAgainstRegistry(address operator)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (isRegistryActive) {\\r\\n            IRegistry registry = IRegistry(registryAddress);\\r\\n            return registry.isAllowedOperator(operator);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setIsRegistryActive(bool _isRegistryActive) external onlyOwner {\\r\\n        if (registryAddress == address(0)) revert RegistryNotSet();\\r\\n        isRegistryActive = _isRegistryActive;\\r\\n    }\\r\\n\\r\\n    function setRegistryAddress(address _registryAddress) external onlyOwner {\\r\\n        registryAddress = _registryAddress;\\r\\n    }\\r\\n    // ----------------------------------------------\\r\\n    // EIP-165\\r\\n    // ----------------------------------------------\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721A, ERC2981)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            ERC721A.supportsInterface(interfaceId) ||\\r\\n            ERC2981.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    //Overriden\\r\\n    function _startTokenId() internal view virtual override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcd8b2bfb338a75e09d75d668927819e06e094ff0c871d433202d8f62b6dfd729\",\"license\":\"MIT\"},\"contracts/Whitelist.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\ncontract Whitelist is Ownable {\\r\\n    bytes32 private gtdMerkleRoot;\\r\\n    bytes32 private fcfsMerkleRoot;\\r\\n\\r\\n    function setGtdMerkleRoot(bytes32 _gtdMerkleRoot) public onlyOwner() returns (bytes32) {\\r\\n        gtdMerkleRoot = _gtdMerkleRoot;\\r\\n        return gtdMerkleRoot;\\r\\n    }\\r\\n    function setFcfsMerkleRoot(bytes32 _fcfsMerkleRoot) public onlyOwner() returns (bytes32) {\\r\\n        fcfsMerkleRoot = _fcfsMerkleRoot;\\r\\n        return fcfsMerkleRoot;\\r\\n    }\\r\\n\\r\\n    function gtd_validateAddress(\\r\\n        bytes32[] memory _merkleProof,\\r\\n        address addr\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(addr));\\r\\n        return MerkleProof.verify(_merkleProof, gtdMerkleRoot, leaf);\\r\\n    }\\r\\n    function fcfs_validateAddress(\\r\\n        bytes32[] memory _merkleProof,\\r\\n        address addr\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(addr));\\r\\n        return MerkleProof.verify(_merkleProof, fcfsMerkleRoot, leaf);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae7d66002d58aa21fe82def98e1b4bc86479faac50a3b22671d8575e86951d2a\",\"license\":\"Unlicense\"},\"contracts/closedsea/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\\r\\n/// mandatory on-chain royalty enforcement in order for new collections to\\r\\n/// receive royalties.\\r\\n/// For more information, see:\\r\\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\\r\\nabstract contract OperatorFilterer {\\r\\n    /// @dev The default OpenSea operator blocklist subscription.\\r\\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\r\\n\\r\\n    /// @dev The OpenSea operator filter registry.\\r\\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\\r\\n\\r\\n    /// @dev Registers the current contract to OpenSea's operator filter,\\r\\n    /// and subscribe to the default OpenSea operator blocklist.\\r\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\r\\n    function _registerForOperatorFiltering() internal virtual {\\r\\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\\r\\n    }\\r\\n\\r\\n    /// @dev Registers the current contract to OpenSea's operator filter.\\r\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\r\\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\\r\\n\\r\\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\\r\\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\\r\\n\\r\\n            for {} iszero(subscribe) {} {\\r\\n                if iszero(subscriptionOrRegistrantToCopy) {\\r\\n                    functionSelector := 0x4420e486 // `register(address)`.\\r\\n                    break\\r\\n                }\\r\\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\\r\\n                break\\r\\n            }\\r\\n            // Store the function selector.\\r\\n            mstore(0x00, shl(224, functionSelector))\\r\\n            // Store the `address(this)`.\\r\\n            mstore(0x04, address())\\r\\n            // Store the `subscriptionOrRegistrantToCopy`.\\r\\n            mstore(0x24, subscriptionOrRegistrantToCopy)\\r\\n            // Register into the registry.\\r\\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\\r\\n                // If the function selector has not been overwritten,\\r\\n                // it is an out-of-gas error.\\r\\n                if eq(shr(224, mload(0x00)), functionSelector) {\\r\\n                    // To prevent gas under-estimation.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n            }\\r\\n            // Restore the part of the free memory pointer that was overwritten,\\r\\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\\r\\n            mstore(0x24, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\\r\\n    modifier onlyAllowedOperator(address from) virtual {\\r\\n        if (from != msg.sender) {\\r\\n            if (!_isPriorityOperator(msg.sender)) {\\r\\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier to guard a function from approving a blocked operator..\\r\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\r\\n        if (!_isPriorityOperator(operator)) {\\r\\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\\r\\n    function _revertIfBlocked(address operator) private view {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Store the function selector of `isOperatorAllowed(address,address)`,\\r\\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\\r\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\r\\n            mstore(0x00, 0xc6171134001122334455)\\r\\n            // Store the `address(this)`.\\r\\n            mstore(0x1a, address())\\r\\n            // Store the `operator`.\\r\\n            mstore(0x3a, operator)\\r\\n\\r\\n            // `isOperatorAllowed` always returns true if it does not revert.\\r\\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\\r\\n                // Bubble up the revert if the staticcall reverts.\\r\\n                returndatacopy(0x00, 0x00, returndatasize())\\r\\n                revert(0x00, returndatasize())\\r\\n            }\\r\\n\\r\\n            // We'll skip checking if `from` is inside the blacklist.\\r\\n            // Even though that can block transferring out of wrapper contracts,\\r\\n            // we don't want tokens to be stuck.\\r\\n\\r\\n            // Restore the part of the free memory pointer that was overwritten,\\r\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\r\\n            mstore(0x3a, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev For deriving contracts to override, so that operator filtering\\r\\n    /// can be turned on / off.\\r\\n    /// Returns true by default.\\r\\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\\r\\n    /// skip operator filtering, helping users save gas.\\r\\n    /// Returns false for all inputs by default.\\r\\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9fb30ab66084a489ec76d887969dfc6805d1aceb3a9792a5e90c77715deca54c\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600e805462ffffff19166101011790553480156200002157600080fd5b50604051620033d7380380620033d78339810160408190526200004491620001ba565b83836200005133620000a3565b600380546001600160a01b031916331790556006620000718382620002de565b506007620000808282620002de565b50600160045550506080919091526001600160a01b031660a05250620003aa9050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011d57600080fd5b81516001600160401b03808211156200013a576200013a620000f5565b604051601f8301601f19908116603f01168101908282118183101715620001655762000165620000f5565b816040528381526020925086838588010111156200018257600080fd5b600091505b83821015620001a6578582018301518183018401529082019062000187565b600093810190920192909252949350505050565b60008060008060808587031215620001d157600080fd5b84516001600160401b0380821115620001e957600080fd5b620001f7888389016200010b565b955060208701519150808211156200020e57600080fd5b506200021d878288016200010b565b60408701516060880151919550935090506001600160a01b03811681146200024457600080fd5b939692955090935050565b600181811c908216806200026457607f821691505b6020821081036200028557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002d957600081815260208120601f850160051c81016020861015620002b45750805b601f850160051c820191505b81811015620002d557828155600101620002c0565b5050505b505050565b81516001600160401b03811115620002fa57620002fa620000f5565b62000312816200030b84546200024f565b846200028b565b602080601f8311600181146200034a5760008415620003315750858301515b600019600386901b1c1916600185901b178555620002d5565b600085815260208120601f198616915b828110156200037b578886015182559484019460019091019084016200035a565b50858210156200039a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051612feb620003ec6000396000818161043901528181610fd10152818161100101526112350152600081816105c60152610edd0152612feb6000f3fe60806040526004361061031a5760003560e01c80635944c753116101ab578063ab7b4993116100f7578063e985e9c511610095578063efe7aa491161006f578063efe7aa4914610a24578063f2fde38b14610a6d578063f71a5d8814610a8d578063fb796e6c14610aad57600080fd5b8063e985e9c514610994578063eb3f3e01146109dd578063ed9aab51146109fd57600080fd5b8063b88d4fde116100d1578063b88d4fde14610921578063bad5d48314610934578063c87b56dd14610954578063d6649f801461097457600080fd5b8063ab7b4993146108c1578063abd017ea146108e1578063b7c0b8e81461090157600080fd5b80637bcbf5711161016457806395d89b411161013e57806395d89b41146107d2578063a22cb465146107e7578063a4d8008614610807578063a7ec1765146108ac57600080fd5b80637bcbf5711461077f5780638d0f7c16146107945780638da5cb5b146107b457600080fd5b80635944c753146106e05780635b477e19146107005780636352211e1461071557806370a0823114610735578063715018a614610755578063719bebbd1461076a57600080fd5b80631df270f31161026a5780633960be691161022357806346fff98d116101fd57806346fff98d1461065e5780634d8afe271461067e5780635594c545146106ab57806355f804b3146106c057600080fd5b80633960be69146105e85780633ccfd60b1461063657806342842e0e1461064b57600080fd5b80631df270f3146105025780631ed7852a1461052257806323b872dd146105425780632a55205a146105555780632cff67701461059457806332cb6b0c146105b457600080fd5b806309af3f9a116102d757806318160ddd116102b157806318160ddd1461047a57806318443df51461049757806319024047146104b75780631a9ec177146104ef57600080fd5b806309af3f9a14610407578063122e04a81461042757806312b365101461045b57600080fd5b806301ffc9a71461031f57806304634d8d14610354578063060406181461037657806306fdde031461039a578063081812fc146103bc578063095ea7b3146103f4575b600080fd5b34801561032b57600080fd5b5061033f61033a36600461250c565b610ac7565b60405190151581526020015b60405180910390f35b34801561036057600080fd5b5061037461036f366004612557565b610ae7565b005b34801561038257600080fd5b5061038c600f5481565b60405190815260200161034b565b3480156103a657600080fd5b506103af610afd565b60405161034b91906125da565b3480156103c857600080fd5b506103dc6103d73660046125ed565b610b8f565b6040516001600160a01b03909116815260200161034b565b610374610402366004612606565b610bd3565b34801561041357600080fd5b50610374610422366004612630565b610c20565b34801561043357600080fd5b506103dc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561046757600080fd5b50600e5461033f90610100900460ff1681565b34801561048657600080fd5b50600554600454036000190161038c565b3480156104a357600080fd5b506103746104b2366004612630565b610c5f565b3480156104c357600080fd5b5061038c6104d236600461264b565b601160209081526000928352604080842090915290825290205481565b6103746104fd366004612742565b610cb8565b34801561050e57600080fd5b506003546103dc906001600160a01b031681565b34801561052e57600080fd5b5061038c61053d3660046125ed565b6110e4565b6103746105503660046127a1565b6110fb565b34801561056157600080fd5b506105756105703660046127dd565b611131565b604080516001600160a01b03909316835260208301919091520161034b565b3480156105a057600080fd5b506103746105af366004612630565b6111dd565b3480156105c057600080fd5b5061038c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105f457600080fd5b5061061e6106033660046125ed565b6012602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161034b565b34801561064257600080fd5b50610374611229565b6103746106593660046127a1565b6112c5565b34801561066a57600080fd5b5061037461067936600461280d565b6112e0565b34801561068a57600080fd5b5061069e61069936600461282a565b611334565b60405161034b91906128d9565b3480156106b757600080fd5b5061038c600381565b3480156106cc57600080fd5b506103746106db3660046128ec565b6113cb565b3480156106ec57600080fd5b506103746106fb36600461294b565b6113e0565b34801561070c57600080fd5b5061038c600281565b34801561072157600080fd5b506103dc6107303660046125ed565b6113f3565b34801561074157600080fd5b5061038c610750366004612630565b6113fe565b34801561076157600080fd5b5061037461144c565b34801561077657600080fd5b50610374611460565b34801561078b57600080fd5b506103746114f1565b3480156107a057600080fd5b5061038c6107af3660046125ed565b611506565b3480156107c057600080fd5b506002546001600160a01b03166103dc565b3480156107de57600080fd5b506103af611519565b3480156107f357600080fd5b50610374610802366004612987565b611528565b34801561081357600080fd5b5061086e6108223660046125ed565b60106020526000908152604090205463ffffffff808216916401000000008104909116906001600160401b03600160401b8204811691600160801b8104821691600160c01b9091041685565b6040805163ffffffff96871681529590941660208601526001600160401b03928316938501939093528116606084015216608082015260a00161034b565b3480156108b857600080fd5b5061038c600181565b3480156108cd57600080fd5b506103746108dc366004612630565b611570565b3480156108ed57600080fd5b50600e5461033f9062010000900460ff1681565b34801561090d57600080fd5b5061037461091c36600461280d565b6115a4565b61037461092f3660046129be565b6115bf565b34801561094057600080fd5b5061033f61094f366004612a7d565b611603565b34801561096057600080fd5b506103af61096f3660046125ed565b61164c565b34801561098057600080fd5b5061033f61098f366004612a7d565b6116d0565b3480156109a057600080fd5b5061033f6109af366004612ac1565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b3480156109e957600080fd5b506103746109f8366004612b16565b611719565b348015610a0957600080fd5b50600e546103dc90630100000090046001600160a01b031681565b348015610a3057600080fd5b50601354610a4e9060ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161034b565b348015610a7957600080fd5b50610374610a88366004612630565b611872565b348015610a9957600080fd5b50610374610aa83660046125ed565b6118e8565b348015610ab957600080fd5b50600e5461033f9060ff1681565b6000610ad2826118f5565b80610ae15750610ae182611943565b92915050565b610aef611978565b610af982826119d2565b5050565b606060068054610b0c90612b83565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3890612b83565b8015610b855780601f10610b5a57610100808354040283529160200191610b85565b820191906000526020600020905b815481529060010190602001808311610b6857829003601f168201915b5050505050905090565b6000610b9a82611a8c565b610bb7576040516333d1c03960e21b815260040160405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b81600e5460ff1615610be857610be881611ac1565b600e54610100900460ff1615610c1157604051630b95754760e31b815260040160405180910390fd5b610c1b8383611b05565b505050565b6003546001600160a01b03163314610c535760405162461bcd60e51b8152600401610c4a90612bbd565b60405180910390fd5b610c5c81611872565b50565b610c67611978565b604080518082019091526013805460ff811615158084526001600160a01b039490941660209093018390526001600160a81b031916610100600160a81b031990931692909217610100909102179055565b600083815260106020908152604091829020825160a081018452905463ffffffff8082168352640100000000820416928201929092526001600160401b03600160401b8304811693820193909352600160801b820483166060820152600160c01b9091049091166080820152600f5484141580610d3a5750805163ffffffff16155b80610d4b5750805163ffffffff1642105b80610d605750806020015163ffffffff164210155b15610d7e57604051639546a99360e01b815260040160405180910390fd5b60018403610dd857610d908233611603565b1515600114610dd35760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21036b4b73a32b91760891b6044820152606401610c4a565b610e2d565b60028403610e2d57610dea82336116d0565b1515600114610e2d5760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21036b4b73a32b91760891b6044820152606401610c4a565b60008481526011602090815260408083203384529091529020546060820151610e609082906001600160401b0316612c20565b8461ffff161115610e8457604051630236501f60e61b815260040160405180910390fd5b60008581526012602052604090205460808301516001600160401b039182169116610eb38261ffff8816612c33565b6001600160401b03161115610edb5760405163b45a22f960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008561ffff16610f0e6004546000190190565b610f189190612c5a565b1115610f3757604051634c9c5c3360e11b815260040160405180910390fd5b60008561ffff1684604001516001600160401b0316610f569190612c6d565b905080341015610f795760405163356680b760e01b815260040160405180910390fd5b6000878152601160209081526040808320338452825280832061ffff8a168781019091558a84526012909252909120805467ffffffffffffffff19169184016001600160401b03169190911790556001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610ffd57610ffd612c84565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b505090508061109157604051631d42c86760e21b815260040160405180910390fd5b61109f338861ffff16611ba5565b60405188815261ffff88169033907f0b3fa6d1ad76d7cf2bed405eb629252cc4f3dfe6a400576cf13f39d60bcc3ed69060200160405180910390a35050505050505050565b60006110ee611978565b50600d819055805b919050565b826001600160a01b038116331461112057600e5460ff16156111205761112033611ac1565b61112b848484611c8c565b50505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916111a65750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6020810151600090612710906111c5906001600160601b031687612c6d565b6111cf9190612c9a565b915196919550909350505050565b6003546001600160a01b031633146112075760405162461bcd60e51b8152600401610c4a90612bbd565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b611231611978565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461129e576040519150601f19603f3d011682016040523d82523d6000602084013e6112a3565b606091505b5050905080610c5c57604051631d42c86760e21b815260040160405180910390fd5b610c1b838383604051806020016040528060008152506115bf565b6112e8611978565b600e54630100000090046001600160a01b031661131857604051630e048e7160e41b815260040160405180910390fd5b600e8054911515620100000262ff000019909216919091179055565b6040805180820190915260135460ff811615158083526101009091046001600160a01b031660208301526060919061137f57604051630871f9a360e21b815260040160405180910390fd5b6113c3338585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050602085015160019150611e2a565b949350505050565b6113d3611978565b6014610c1b828483612d02565b6113e8611978565b610c1b838383611ee2565b6000610ae182611fad565b60006001600160a01b038216611427576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600960205260409020546001600160401b031690565b611454611978565b61145e600061201c565b565b611468611978565b6040805180820190915260135460ff81161515825261010090046001600160a01b0316602082018190526114af57604051638b0277bb60e01b815260040160405180910390fd5b6040805180820190915260018082526020928301516001600160a01b031692909101829052601380546001600160a81b03191661010090930292909217179055565b6114f9611978565b600e805461ff0019169055565b6000611510611978565b50600c81905590565b606060078054610b0c90612b83565b81600e5460ff161561153d5761153d81611ac1565b600e54610100900460ff161561156657604051630b95754760e31b815260040160405180910390fd5b610c1b838361206e565b611578611978565b600e80546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b6115ac611978565b600e805460ff1916911515919091179055565b6115ca8484846110fb565b6001600160a01b0383163b1561112b576115e6848484846120da565b61112b576040516368d2bf6b60e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606083901b16602082015260009081906034016040516020818303038152906040528051906020012090506113c384600c54836121c2565b606061165782611a8c565b61167457604051630a14c4b560e41b815260040160405180910390fd5b600061167e6121d8565b9050805160000361169e57604051806020016040528060008152506116c9565b806116a8846121e7565b6040516020016116b9929190612dc2565b6040516020818303038152906040525b9392505050565b6040516bffffffffffffffffffffffff19606083901b16602082015260009081906034016040516020818303038152906040528051906020012090506113c384600d54836121c2565b611721611978565b63ffffffff85161580611738575063ffffffff8416155b8061174a57506001600160401b038316155b1561176857604051638531df0f60e01b815260040160405180910390fd5b8363ffffffff168563ffffffff161061179457604051638531df0f60e01b815260040160405180910390fd5b6040805160a08101825263ffffffff968716815294861660208087019182526001600160401b0395861687840190815294861660608801908152938616608088019081526000998a526010909152919097209451855497519351925191518516600160c01b026001600160c01b03928616600160801b0267ffffffffffffffff60801b1994909616600160401b029390931677ffffffffffffffffffffffffffffffff0000000000000000199488166401000000000267ffffffffffffffff1990991691909716179690961791909116939093171792909216179055565b61187a611978565b6001600160a01b0381166118df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c4a565b610c5c8161201c565b6118f0611978565b600f55565b60006301ffc9a760e01b6001600160e01b03198316148061192657506380ac58cd60e01b6001600160e01b03198316145b80610ae15750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b1480610ae157506301ffc9a760e01b6001600160e01b0319831614610ae1565b6002546001600160a01b0316331461145e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c4a565b6127106001600160601b03821611156119fd5760405162461bcd60e51b8152600401610c4a90612df1565b6001600160a01b038216611a535760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610c4a565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b600081600111158015611aa0575060045482105b8015610ae1575050600090815260086020526040902054600160e01b161590565b69c617113400112233445560005230601a5280603a52600080604460166daaeb6d7670e522a718067333cd4e5afa611afd573d6000803e3d6000fd5b6000603a5250565b6000611b10826113f3565b9050336001600160a01b03821614611b4957611b2c81336109af565b611b49576040516367d9dca160e11b815260040160405180910390fd5b6000828152600a602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6004546000829003611bca5760405163b562e8dd60e01b815260040160405180910390fd5b611bd7600084838561222b565b6001600160a01b03831660008181526009602090815260408083208054680100000000000000018802019055848352600890915281206001851460e11b4260a01b17831790558284019083908390600080516020612f968339815191528180a4600183015b818114611c625780836000600080516020612f96833981519152600080a4600101611c3c565b5081600003611c8357604051622e076360e81b815260040160405180910390fd5b60045550505050565b6000611c9782611fad565b9050836001600160a01b0316816001600160a01b031614611cca5760405162a1148160e81b815260040160405180910390fd5b6000828152600a602052604090208054611cf68187335b6001600160a01b039081169116811491141790565b611d2157611d0486336109af565b611d2157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516611d4857604051633a954ecd60e21b815260040160405180910390fd5b611d55868686600161222b565b8015611d6057600082555b6001600160a01b038681166000908152600960205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260086020526040812091909155600160e11b84169003611df257600184016000818152600860205260408120549003611df0576004548114611df05760008181526008602052604090208490555b505b83856001600160a01b0316876001600160a01b0316600080516020612f9683398151915260405160405180910390a45b505050505050565b606060005b8451811015611e6357611e5b858281518110611e4d57611e4d612e3b565b6020026020010151856122a2565b600101611e2f565b50604051635fb4271b60e01b81526001600160a01b03831690635fb4271b90611e929088908890600401612e51565b6000604051808303816000875af1158015611eb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ed99190810190612e75565b95945050505050565b6127106001600160601b0382161115611f0d5760405162461bcd60e51b8152600401610c4a90612df1565b6001600160a01b038216611f635760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610c4a565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b60008180600111612003576004548110156120035760008181526008602052604081205490600160e01b82169003612001575b806000036116c9575060001901600081815260086020526040902054611fe0565b505b604051636f96cda160e11b815260040160405180910390fd5b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061210f903390899088908890600401612f05565b6020604051808303816000875af192505050801561214a575060408051601f3d908101601f1916820190925261214791810190612f42565b60015b6121a8573d808015612178576040519150601f19603f3d011682016040523d82523d6000602084013e61217d565b606091505b5080516000036121a0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113c3565b6000826121cf85846123e9565b14949350505050565b606060148054610b0c90612b83565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806122015750819003601f19909101908152919050565b600e54610100900460ff16801561224a57506001600160a01b03841615155b801561225e57506001600160a01b03831615155b1561227c57604051630b95754760e31b815260040160405180910390fd5b61228533612436565b61112b576040516326406c5f60e11b815260040160405180910390fd5b60006122ad83611fad565b9050806000806122cb866000908152600a6020526040902080549091565b91509150841561230b576122e0818433611ce1565b61230b576122ee83336109af565b61230b57604051632ce44b5f60e11b815260040160405180910390fd5b61231983600088600161222b565b801561232457600082555b6001600160a01b038316600081815260096020526040902080546fffffffffffffffffffffffffffffffff0190554260a01b17600360e01b17600087815260086020526040812091909155600160e11b851690036123b2576001860160008181526008602052604081205490036123b05760045481146123b05760008181526008602052604090208590555b505b60405186906000906001600160a01b03861690600080516020612f96833981519152908390a4505060058054600101905550505050565b600081815b845181101561242e5761241a8286838151811061240d5761240d612e3b565b60200260200101516124ca565b91508061242681612f5f565b9150506123ee565b509392505050565b600e5460009062010000900460ff16156124c257600e546040516370c5e04560e11b81526001600160a01b038481166004830152630100000090920490911690819063e18bc08a90602401602060405180830381865afa15801561249e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190612f78565b506001919050565b60008183106124e65760008281526020849052604090206116c9565b5060009182526020526040902090565b6001600160e01b031981168114610c5c57600080fd5b60006020828403121561251e57600080fd5b81356116c9816124f6565b80356001600160a01b03811681146110f657600080fd5b80356001600160601b03811681146110f657600080fd5b6000806040838503121561256a57600080fd5b61257383612529565b915061258160208401612540565b90509250929050565b60005b838110156125a557818101518382015260200161258d565b50506000910152565b600081518084526125c681602086016020860161258a565b601f01601f19169290920160200192915050565b6020815260006116c960208301846125ae565b6000602082840312156125ff57600080fd5b5035919050565b6000806040838503121561261957600080fd5b61262283612529565b946020939093013593505050565b60006020828403121561264257600080fd5b6116c982612529565b6000806040838503121561265e57600080fd5b8235915061258160208401612529565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156126ac576126ac61266e565b604052919050565b60006001600160401b038211156126cd576126cd61266e565b5060051b60200190565b600082601f8301126126e857600080fd5b813560206126fd6126f8836126b4565b612684565b82815260059290921b8401810191818101908684111561271c57600080fd5b8286015b848110156127375780358352918301918301612720565b509695505050505050565b60008060006060848603121561275757600080fd5b83359250602084013561ffff8116811461277057600080fd5b915060408401356001600160401b0381111561278b57600080fd5b612797868287016126d7565b9150509250925092565b6000806000606084860312156127b657600080fd5b6127bf84612529565b92506127cd60208501612529565b9150604084013590509250925092565b600080604083850312156127f057600080fd5b50508035926020909101359150565b8015158114610c5c57600080fd5b60006020828403121561281f57600080fd5b81356116c9816127ff565b6000806020838503121561283d57600080fd5b82356001600160401b038082111561285457600080fd5b818501915085601f83011261286857600080fd5b81358181111561287757600080fd5b8660208260051b850101111561288c57600080fd5b60209290920196919550909350505050565b600081518084526020808501945080840160005b838110156128ce578151875295820195908201906001016128b2565b509495945050505050565b6020815260006116c9602083018461289e565b600080602083850312156128ff57600080fd5b82356001600160401b038082111561291657600080fd5b818501915085601f83011261292a57600080fd5b81358181111561293957600080fd5b86602082850101111561288c57600080fd5b60008060006060848603121561296057600080fd5b8335925061297060208501612529565b915061297e60408501612540565b90509250925092565b6000806040838503121561299a57600080fd5b6129a383612529565b915060208301356129b3816127ff565b809150509250929050565b600080600080608085870312156129d457600080fd5b6129dd85612529565b935060206129ec818701612529565b93506040860135925060608601356001600160401b0380821115612a0f57600080fd5b818801915088601f830112612a2357600080fd5b813581811115612a3557612a3561266e565b612a47601f8201601f19168501612684565b91508082528984828501011115612a5d57600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215612a9057600080fd5b82356001600160401b03811115612aa657600080fd5b612ab2858286016126d7565b92505061258160208401612529565b60008060408385031215612ad457600080fd5b612add83612529565b915061258160208401612529565b803563ffffffff811681146110f657600080fd5b80356001600160401b03811681146110f657600080fd5b60008060008060008060c08789031215612b2f57600080fd5b86359550612b3f60208801612aeb565b9450612b4d60408801612aeb565b9350612b5b60608801612aff565b9250612b6960808801612aff565b9150612b7760a08801612aff565b90509295509295509295565b600181811c90821680612b9757607f821691505b602082108103612bb757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4d756c74697369674f776e61626c653a2063616c6c6572206973206e6f74207460408201526c3432903932b0b61037bbb732b960991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ae157610ae1612c0a565b6001600160401b03818116838216019080821115612c5357612c53612c0a565b5092915050565b80820180821115610ae157610ae1612c0a565b8082028115828204841417610ae157610ae1612c0a565b634e487b7160e01b600052600160045260246000fd5b600082612cb757634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610c1b57600081815260208120601f850160051c81016020861015612ce35750805b601f850160051c820191505b81811015611e2257828155600101612cef565b6001600160401b03831115612d1957612d1961266e565b612d2d83612d278354612b83565b83612cbc565b6000601f841160018114612d615760008515612d495750838201355b600019600387901b1c1916600186901b178355612dbb565b600083815260209020601f19861690835b82811015612d925786850135825560209485019460019092019101612d72565b5086821015612daf5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60008351612dd481846020880161258a565b835190830190612de881836020880161258a565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831681526040602082018190526000906113c39083018461289e565b60006020808385031215612e8857600080fd5b82516001600160401b03811115612e9e57600080fd5b8301601f81018513612eaf57600080fd5b8051612ebd6126f8826126b4565b81815260059190911b82018301908381019087831115612edc57600080fd5b928401925b82841015612efa57835182529284019290840190612ee1565b979650505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612f38908301846125ae565b9695505050505050565b600060208284031215612f5457600080fd5b81516116c9816124f6565b600060018201612f7157612f71612c0a565b5060010190565b600060208284031215612f8a57600080fd5b81516116c9816127ff56feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122047ae1731246bb11b4dbd2177283133607c6756fa6a3ddccb632e9b2819e24a2964736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061031a5760003560e01c80635944c753116101ab578063ab7b4993116100f7578063e985e9c511610095578063efe7aa491161006f578063efe7aa4914610a24578063f2fde38b14610a6d578063f71a5d8814610a8d578063fb796e6c14610aad57600080fd5b8063e985e9c514610994578063eb3f3e01146109dd578063ed9aab51146109fd57600080fd5b8063b88d4fde116100d1578063b88d4fde14610921578063bad5d48314610934578063c87b56dd14610954578063d6649f801461097457600080fd5b8063ab7b4993146108c1578063abd017ea146108e1578063b7c0b8e81461090157600080fd5b80637bcbf5711161016457806395d89b411161013e57806395d89b41146107d2578063a22cb465146107e7578063a4d8008614610807578063a7ec1765146108ac57600080fd5b80637bcbf5711461077f5780638d0f7c16146107945780638da5cb5b146107b457600080fd5b80635944c753146106e05780635b477e19146107005780636352211e1461071557806370a0823114610735578063715018a614610755578063719bebbd1461076a57600080fd5b80631df270f31161026a5780633960be691161022357806346fff98d116101fd57806346fff98d1461065e5780634d8afe271461067e5780635594c545146106ab57806355f804b3146106c057600080fd5b80633960be69146105e85780633ccfd60b1461063657806342842e0e1461064b57600080fd5b80631df270f3146105025780631ed7852a1461052257806323b872dd146105425780632a55205a146105555780632cff67701461059457806332cb6b0c146105b457600080fd5b806309af3f9a116102d757806318160ddd116102b157806318160ddd1461047a57806318443df51461049757806319024047146104b75780631a9ec177146104ef57600080fd5b806309af3f9a14610407578063122e04a81461042757806312b365101461045b57600080fd5b806301ffc9a71461031f57806304634d8d14610354578063060406181461037657806306fdde031461039a578063081812fc146103bc578063095ea7b3146103f4575b600080fd5b34801561032b57600080fd5b5061033f61033a36600461250c565b610ac7565b60405190151581526020015b60405180910390f35b34801561036057600080fd5b5061037461036f366004612557565b610ae7565b005b34801561038257600080fd5b5061038c600f5481565b60405190815260200161034b565b3480156103a657600080fd5b506103af610afd565b60405161034b91906125da565b3480156103c857600080fd5b506103dc6103d73660046125ed565b610b8f565b6040516001600160a01b03909116815260200161034b565b610374610402366004612606565b610bd3565b34801561041357600080fd5b50610374610422366004612630565b610c20565b34801561043357600080fd5b506103dc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561046757600080fd5b50600e5461033f90610100900460ff1681565b34801561048657600080fd5b50600554600454036000190161038c565b3480156104a357600080fd5b506103746104b2366004612630565b610c5f565b3480156104c357600080fd5b5061038c6104d236600461264b565b601160209081526000928352604080842090915290825290205481565b6103746104fd366004612742565b610cb8565b34801561050e57600080fd5b506003546103dc906001600160a01b031681565b34801561052e57600080fd5b5061038c61053d3660046125ed565b6110e4565b6103746105503660046127a1565b6110fb565b34801561056157600080fd5b506105756105703660046127dd565b611131565b604080516001600160a01b03909316835260208301919091520161034b565b3480156105a057600080fd5b506103746105af366004612630565b6111dd565b3480156105c057600080fd5b5061038c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105f457600080fd5b5061061e6106033660046125ed565b6012602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161034b565b34801561064257600080fd5b50610374611229565b6103746106593660046127a1565b6112c5565b34801561066a57600080fd5b5061037461067936600461280d565b6112e0565b34801561068a57600080fd5b5061069e61069936600461282a565b611334565b60405161034b91906128d9565b3480156106b757600080fd5b5061038c600381565b3480156106cc57600080fd5b506103746106db3660046128ec565b6113cb565b3480156106ec57600080fd5b506103746106fb36600461294b565b6113e0565b34801561070c57600080fd5b5061038c600281565b34801561072157600080fd5b506103dc6107303660046125ed565b6113f3565b34801561074157600080fd5b5061038c610750366004612630565b6113fe565b34801561076157600080fd5b5061037461144c565b34801561077657600080fd5b50610374611460565b34801561078b57600080fd5b506103746114f1565b3480156107a057600080fd5b5061038c6107af3660046125ed565b611506565b3480156107c057600080fd5b506002546001600160a01b03166103dc565b3480156107de57600080fd5b506103af611519565b3480156107f357600080fd5b50610374610802366004612987565b611528565b34801561081357600080fd5b5061086e6108223660046125ed565b60106020526000908152604090205463ffffffff808216916401000000008104909116906001600160401b03600160401b8204811691600160801b8104821691600160c01b9091041685565b6040805163ffffffff96871681529590941660208601526001600160401b03928316938501939093528116606084015216608082015260a00161034b565b3480156108b857600080fd5b5061038c600181565b3480156108cd57600080fd5b506103746108dc366004612630565b611570565b3480156108ed57600080fd5b50600e5461033f9062010000900460ff1681565b34801561090d57600080fd5b5061037461091c36600461280d565b6115a4565b61037461092f3660046129be565b6115bf565b34801561094057600080fd5b5061033f61094f366004612a7d565b611603565b34801561096057600080fd5b506103af61096f3660046125ed565b61164c565b34801561098057600080fd5b5061033f61098f366004612a7d565b6116d0565b3480156109a057600080fd5b5061033f6109af366004612ac1565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b3480156109e957600080fd5b506103746109f8366004612b16565b611719565b348015610a0957600080fd5b50600e546103dc90630100000090046001600160a01b031681565b348015610a3057600080fd5b50601354610a4e9060ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161034b565b348015610a7957600080fd5b50610374610a88366004612630565b611872565b348015610a9957600080fd5b50610374610aa83660046125ed565b6118e8565b348015610ab957600080fd5b50600e5461033f9060ff1681565b6000610ad2826118f5565b80610ae15750610ae182611943565b92915050565b610aef611978565b610af982826119d2565b5050565b606060068054610b0c90612b83565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3890612b83565b8015610b855780601f10610b5a57610100808354040283529160200191610b85565b820191906000526020600020905b815481529060010190602001808311610b6857829003601f168201915b5050505050905090565b6000610b9a82611a8c565b610bb7576040516333d1c03960e21b815260040160405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b81600e5460ff1615610be857610be881611ac1565b600e54610100900460ff1615610c1157604051630b95754760e31b815260040160405180910390fd5b610c1b8383611b05565b505050565b6003546001600160a01b03163314610c535760405162461bcd60e51b8152600401610c4a90612bbd565b60405180910390fd5b610c5c81611872565b50565b610c67611978565b604080518082019091526013805460ff811615158084526001600160a01b039490941660209093018390526001600160a81b031916610100600160a81b031990931692909217610100909102179055565b600083815260106020908152604091829020825160a081018452905463ffffffff8082168352640100000000820416928201929092526001600160401b03600160401b8304811693820193909352600160801b820483166060820152600160c01b9091049091166080820152600f5484141580610d3a5750805163ffffffff16155b80610d4b5750805163ffffffff1642105b80610d605750806020015163ffffffff164210155b15610d7e57604051639546a99360e01b815260040160405180910390fd5b60018403610dd857610d908233611603565b1515600114610dd35760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21036b4b73a32b91760891b6044820152606401610c4a565b610e2d565b60028403610e2d57610dea82336116d0565b1515600114610e2d5760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21036b4b73a32b91760891b6044820152606401610c4a565b60008481526011602090815260408083203384529091529020546060820151610e609082906001600160401b0316612c20565b8461ffff161115610e8457604051630236501f60e61b815260040160405180910390fd5b60008581526012602052604090205460808301516001600160401b039182169116610eb38261ffff8816612c33565b6001600160401b03161115610edb5760405163b45a22f960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008561ffff16610f0e6004546000190190565b610f189190612c5a565b1115610f3757604051634c9c5c3360e11b815260040160405180910390fd5b60008561ffff1684604001516001600160401b0316610f569190612c6d565b905080341015610f795760405163356680b760e01b815260040160405180910390fd5b6000878152601160209081526040808320338452825280832061ffff8a168781019091558a84526012909252909120805467ffffffffffffffff19169184016001600160401b03169190911790556001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610ffd57610ffd612c84565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b505090508061109157604051631d42c86760e21b815260040160405180910390fd5b61109f338861ffff16611ba5565b60405188815261ffff88169033907f0b3fa6d1ad76d7cf2bed405eb629252cc4f3dfe6a400576cf13f39d60bcc3ed69060200160405180910390a35050505050505050565b60006110ee611978565b50600d819055805b919050565b826001600160a01b038116331461112057600e5460ff16156111205761112033611ac1565b61112b848484611c8c565b50505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916111a65750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6020810151600090612710906111c5906001600160601b031687612c6d565b6111cf9190612c9a565b915196919550909350505050565b6003546001600160a01b031633146112075760405162461bcd60e51b8152600401610c4a90612bbd565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b611231611978565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461129e576040519150601f19603f3d011682016040523d82523d6000602084013e6112a3565b606091505b5050905080610c5c57604051631d42c86760e21b815260040160405180910390fd5b610c1b838383604051806020016040528060008152506115bf565b6112e8611978565b600e54630100000090046001600160a01b031661131857604051630e048e7160e41b815260040160405180910390fd5b600e8054911515620100000262ff000019909216919091179055565b6040805180820190915260135460ff811615158083526101009091046001600160a01b031660208301526060919061137f57604051630871f9a360e21b815260040160405180910390fd5b6113c3338585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050602085015160019150611e2a565b949350505050565b6113d3611978565b6014610c1b828483612d02565b6113e8611978565b610c1b838383611ee2565b6000610ae182611fad565b60006001600160a01b038216611427576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600960205260409020546001600160401b031690565b611454611978565b61145e600061201c565b565b611468611978565b6040805180820190915260135460ff81161515825261010090046001600160a01b0316602082018190526114af57604051638b0277bb60e01b815260040160405180910390fd5b6040805180820190915260018082526020928301516001600160a01b031692909101829052601380546001600160a81b03191661010090930292909217179055565b6114f9611978565b600e805461ff0019169055565b6000611510611978565b50600c81905590565b606060078054610b0c90612b83565b81600e5460ff161561153d5761153d81611ac1565b600e54610100900460ff161561156657604051630b95754760e31b815260040160405180910390fd5b610c1b838361206e565b611578611978565b600e80546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b6115ac611978565b600e805460ff1916911515919091179055565b6115ca8484846110fb565b6001600160a01b0383163b1561112b576115e6848484846120da565b61112b576040516368d2bf6b60e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606083901b16602082015260009081906034016040516020818303038152906040528051906020012090506113c384600c54836121c2565b606061165782611a8c565b61167457604051630a14c4b560e41b815260040160405180910390fd5b600061167e6121d8565b9050805160000361169e57604051806020016040528060008152506116c9565b806116a8846121e7565b6040516020016116b9929190612dc2565b6040516020818303038152906040525b9392505050565b6040516bffffffffffffffffffffffff19606083901b16602082015260009081906034016040516020818303038152906040528051906020012090506113c384600d54836121c2565b611721611978565b63ffffffff85161580611738575063ffffffff8416155b8061174a57506001600160401b038316155b1561176857604051638531df0f60e01b815260040160405180910390fd5b8363ffffffff168563ffffffff161061179457604051638531df0f60e01b815260040160405180910390fd5b6040805160a08101825263ffffffff968716815294861660208087019182526001600160401b0395861687840190815294861660608801908152938616608088019081526000998a526010909152919097209451855497519351925191518516600160c01b026001600160c01b03928616600160801b0267ffffffffffffffff60801b1994909616600160401b029390931677ffffffffffffffffffffffffffffffff0000000000000000199488166401000000000267ffffffffffffffff1990991691909716179690961791909116939093171792909216179055565b61187a611978565b6001600160a01b0381166118df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c4a565b610c5c8161201c565b6118f0611978565b600f55565b60006301ffc9a760e01b6001600160e01b03198316148061192657506380ac58cd60e01b6001600160e01b03198316145b80610ae15750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b1480610ae157506301ffc9a760e01b6001600160e01b0319831614610ae1565b6002546001600160a01b0316331461145e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c4a565b6127106001600160601b03821611156119fd5760405162461bcd60e51b8152600401610c4a90612df1565b6001600160a01b038216611a535760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610c4a565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b600081600111158015611aa0575060045482105b8015610ae1575050600090815260086020526040902054600160e01b161590565b69c617113400112233445560005230601a5280603a52600080604460166daaeb6d7670e522a718067333cd4e5afa611afd573d6000803e3d6000fd5b6000603a5250565b6000611b10826113f3565b9050336001600160a01b03821614611b4957611b2c81336109af565b611b49576040516367d9dca160e11b815260040160405180910390fd5b6000828152600a602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6004546000829003611bca5760405163b562e8dd60e01b815260040160405180910390fd5b611bd7600084838561222b565b6001600160a01b03831660008181526009602090815260408083208054680100000000000000018802019055848352600890915281206001851460e11b4260a01b17831790558284019083908390600080516020612f968339815191528180a4600183015b818114611c625780836000600080516020612f96833981519152600080a4600101611c3c565b5081600003611c8357604051622e076360e81b815260040160405180910390fd5b60045550505050565b6000611c9782611fad565b9050836001600160a01b0316816001600160a01b031614611cca5760405162a1148160e81b815260040160405180910390fd5b6000828152600a602052604090208054611cf68187335b6001600160a01b039081169116811491141790565b611d2157611d0486336109af565b611d2157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516611d4857604051633a954ecd60e21b815260040160405180910390fd5b611d55868686600161222b565b8015611d6057600082555b6001600160a01b038681166000908152600960205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260086020526040812091909155600160e11b84169003611df257600184016000818152600860205260408120549003611df0576004548114611df05760008181526008602052604090208490555b505b83856001600160a01b0316876001600160a01b0316600080516020612f9683398151915260405160405180910390a45b505050505050565b606060005b8451811015611e6357611e5b858281518110611e4d57611e4d612e3b565b6020026020010151856122a2565b600101611e2f565b50604051635fb4271b60e01b81526001600160a01b03831690635fb4271b90611e929088908890600401612e51565b6000604051808303816000875af1158015611eb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ed99190810190612e75565b95945050505050565b6127106001600160601b0382161115611f0d5760405162461bcd60e51b8152600401610c4a90612df1565b6001600160a01b038216611f635760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610c4a565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b60008180600111612003576004548110156120035760008181526008602052604081205490600160e01b82169003612001575b806000036116c9575060001901600081815260086020526040902054611fe0565b505b604051636f96cda160e11b815260040160405180910390fd5b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061210f903390899088908890600401612f05565b6020604051808303816000875af192505050801561214a575060408051601f3d908101601f1916820190925261214791810190612f42565b60015b6121a8573d808015612178576040519150601f19603f3d011682016040523d82523d6000602084013e61217d565b606091505b5080516000036121a0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113c3565b6000826121cf85846123e9565b14949350505050565b606060148054610b0c90612b83565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806122015750819003601f19909101908152919050565b600e54610100900460ff16801561224a57506001600160a01b03841615155b801561225e57506001600160a01b03831615155b1561227c57604051630b95754760e31b815260040160405180910390fd5b61228533612436565b61112b576040516326406c5f60e11b815260040160405180910390fd5b60006122ad83611fad565b9050806000806122cb866000908152600a6020526040902080549091565b91509150841561230b576122e0818433611ce1565b61230b576122ee83336109af565b61230b57604051632ce44b5f60e11b815260040160405180910390fd5b61231983600088600161222b565b801561232457600082555b6001600160a01b038316600081815260096020526040902080546fffffffffffffffffffffffffffffffff0190554260a01b17600360e01b17600087815260086020526040812091909155600160e11b851690036123b2576001860160008181526008602052604081205490036123b05760045481146123b05760008181526008602052604090208590555b505b60405186906000906001600160a01b03861690600080516020612f96833981519152908390a4505060058054600101905550505050565b600081815b845181101561242e5761241a8286838151811061240d5761240d612e3b565b60200260200101516124ca565b91508061242681612f5f565b9150506123ee565b509392505050565b600e5460009062010000900460ff16156124c257600e546040516370c5e04560e11b81526001600160a01b038481166004830152630100000090920490911690819063e18bc08a90602401602060405180830381865afa15801561249e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190612f78565b506001919050565b60008183106124e65760008281526020849052604090206116c9565b5060009182526020526040902090565b6001600160e01b031981168114610c5c57600080fd5b60006020828403121561251e57600080fd5b81356116c9816124f6565b80356001600160a01b03811681146110f657600080fd5b80356001600160601b03811681146110f657600080fd5b6000806040838503121561256a57600080fd5b61257383612529565b915061258160208401612540565b90509250929050565b60005b838110156125a557818101518382015260200161258d565b50506000910152565b600081518084526125c681602086016020860161258a565b601f01601f19169290920160200192915050565b6020815260006116c960208301846125ae565b6000602082840312156125ff57600080fd5b5035919050565b6000806040838503121561261957600080fd5b61262283612529565b946020939093013593505050565b60006020828403121561264257600080fd5b6116c982612529565b6000806040838503121561265e57600080fd5b8235915061258160208401612529565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156126ac576126ac61266e565b604052919050565b60006001600160401b038211156126cd576126cd61266e565b5060051b60200190565b600082601f8301126126e857600080fd5b813560206126fd6126f8836126b4565b612684565b82815260059290921b8401810191818101908684111561271c57600080fd5b8286015b848110156127375780358352918301918301612720565b509695505050505050565b60008060006060848603121561275757600080fd5b83359250602084013561ffff8116811461277057600080fd5b915060408401356001600160401b0381111561278b57600080fd5b612797868287016126d7565b9150509250925092565b6000806000606084860312156127b657600080fd5b6127bf84612529565b92506127cd60208501612529565b9150604084013590509250925092565b600080604083850312156127f057600080fd5b50508035926020909101359150565b8015158114610c5c57600080fd5b60006020828403121561281f57600080fd5b81356116c9816127ff565b6000806020838503121561283d57600080fd5b82356001600160401b038082111561285457600080fd5b818501915085601f83011261286857600080fd5b81358181111561287757600080fd5b8660208260051b850101111561288c57600080fd5b60209290920196919550909350505050565b600081518084526020808501945080840160005b838110156128ce578151875295820195908201906001016128b2565b509495945050505050565b6020815260006116c9602083018461289e565b600080602083850312156128ff57600080fd5b82356001600160401b038082111561291657600080fd5b818501915085601f83011261292a57600080fd5b81358181111561293957600080fd5b86602082850101111561288c57600080fd5b60008060006060848603121561296057600080fd5b8335925061297060208501612529565b915061297e60408501612540565b90509250925092565b6000806040838503121561299a57600080fd5b6129a383612529565b915060208301356129b3816127ff565b809150509250929050565b600080600080608085870312156129d457600080fd5b6129dd85612529565b935060206129ec818701612529565b93506040860135925060608601356001600160401b0380821115612a0f57600080fd5b818801915088601f830112612a2357600080fd5b813581811115612a3557612a3561266e565b612a47601f8201601f19168501612684565b91508082528984828501011115612a5d57600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215612a9057600080fd5b82356001600160401b03811115612aa657600080fd5b612ab2858286016126d7565b92505061258160208401612529565b60008060408385031215612ad457600080fd5b612add83612529565b915061258160208401612529565b803563ffffffff811681146110f657600080fd5b80356001600160401b03811681146110f657600080fd5b60008060008060008060c08789031215612b2f57600080fd5b86359550612b3f60208801612aeb565b9450612b4d60408801612aeb565b9350612b5b60608801612aff565b9250612b6960808801612aff565b9150612b7760a08801612aff565b90509295509295509295565b600181811c90821680612b9757607f821691505b602082108103612bb757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4d756c74697369674f776e61626c653a2063616c6c6572206973206e6f74207460408201526c3432903932b0b61037bbb732b960991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ae157610ae1612c0a565b6001600160401b03818116838216019080821115612c5357612c53612c0a565b5092915050565b80820180821115610ae157610ae1612c0a565b8082028115828204841417610ae157610ae1612c0a565b634e487b7160e01b600052600160045260246000fd5b600082612cb757634e487b7160e01b600052601260045260246000fd5b500490565b601f821115610c1b57600081815260208120601f850160051c81016020861015612ce35750805b601f850160051c820191505b81811015611e2257828155600101612cef565b6001600160401b03831115612d1957612d1961266e565b612d2d83612d278354612b83565b83612cbc565b6000601f841160018114612d615760008515612d495750838201355b600019600387901b1c1916600186901b178355612dbb565b600083815260209020601f19861690835b82811015612d925786850135825560209485019460019092019101612d72565b5086821015612daf5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60008351612dd481846020880161258a565b835190830190612de881836020880161258a565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831681526040602082018190526000906113c39083018461289e565b60006020808385031215612e8857600080fd5b82516001600160401b03811115612e9e57600080fd5b8301601f81018513612eaf57600080fd5b8051612ebd6126f8826126b4565b81815260059190911b82018301908381019087831115612edc57600080fd5b928401925b82841015612efa57835182529284019290840190612ee1565b979650505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612f38908301846125ae565b9695505050505050565b600060208284031215612f5457600080fd5b81516116c9816124f6565b600060018201612f7157612f71612c0a565b5060010190565b600060208284031215612f8a57600080fd5b81516116c9816127ff56feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122047ae1731246bb11b4dbd2177283133607c6756fa6a3ddccb632e9b2819e24a2964736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 148,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)145_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2496,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "realOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3718,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3720,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3722,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3724,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3728,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3732,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3737,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)3650_storage)"
      },
      {
        "astId": 3743,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3429,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "gtdMerkleRoot",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 3431,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "fcfsMerkleRoot",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 2615,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "operatorFilteringEnabled",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2618,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "initialTransferLockOn",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2621,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "isRegistryActive",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2623,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "registryAddress",
        "offset": 3,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2647,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "currentPeriod",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2652,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "periodInfo",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(PeriodInfo)2645_storage)"
      },
      {
        "astId": 2658,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "individualMintedInPeriod",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2662,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "totalMintedInPeriod",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 2670,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "redeemInfo",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(RedeemInfo)2667_storage"
      },
      {
        "astId": 2672,
        "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(PeriodInfo)2645_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SpheraKitBag.PeriodInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodInfo)2645_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)145_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)3650_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)3650_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PeriodInfo)2645_storage": {
        "encoding": "inplace",
        "label": "struct SpheraKitBag.PeriodInfo",
        "members": [
          {
            "astId": 2636,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2638,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "endTime",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2640,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "price",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2642,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "MAX_MINT_ALLOWED",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2644,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "MAX_SUPPLY",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RedeemInfo)2667_storage": {
        "encoding": "inplace",
        "label": "struct SpheraKitBag.RedeemInfo",
        "members": [
          {
            "astId": 2664,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "redeemBagOpen",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2666,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "BagRedeemer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)145_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)3650_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 3649,
            "contract": "contracts/SpheraKitBag.sol:SpheraKitBag",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}