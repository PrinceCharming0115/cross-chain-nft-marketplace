{
  "address": "0x4931347Ac39cDCcb3e3496d361B7d946d1CD2bC5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_azukiAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalPresaleAndAuctionSupply",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_withdrawAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllowlistMintNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionMintNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeanCannotBeClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeanRedeemerNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChunkAlreadyProcessed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimWindowNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ForceRedeemBeanOwnerMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitialTransferLockOn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAuctionSetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidContractSetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPresaleSetup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxAuctionMintForAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxPresaleOrAuctionMintSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintingTooMuchInPresale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedArrays",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedTokenOwnerForClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedByRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OverMaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PresaleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemBeanNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistryNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chunkNum",
          "type": "uint256"
        }
      ],
      "name": "AirdroppedChunk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sourceAzukiId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "beanId",
          "type": "uint256"
        }
      ],
      "name": "ClaimedBean",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        }
      ],
      "name": "PresaleMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AZUKI",
      "outputs": [
        {
          "internalType": "contract Azuki",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PER_ADDRESS_PUBLIC_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_BATCH_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_PRESALE_AND_AUCTION_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ADDRESS",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "chunkNum",
          "type": "uint256"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowlistMintsAlloc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionInfo",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "auctionSaleStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "auctionStartPrice",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "auctionEndPrice",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "auctionPriceCurveLength",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "auctionDropInterval",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "auctionMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "breakTransferLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "azukiTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBeanOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beanOwner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "beanIds",
          "type": "uint256[]"
        }
      ],
      "name": "forceRedeemBeans",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "azukiIds",
          "type": "uint256[]"
        }
      ],
      "name": "getCanClaims",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getNumAuctionMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialTransferLockOn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegistryActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numMintedInPresale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openRedeemBeanState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilteringEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleInfo",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "presaleStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "presaleEndTime",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "presalePrice",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "amount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxAllowedForPresaleForAddr",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "privilegedMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "beanIds",
          "type": "uint256[]"
        }
      ],
      "name": "redeemBeans",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "redeemBeanOpen",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "beanRedeemer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setAllowlistMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setAllowlistMintsAlloc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_startPriceWei",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_endPriceWei",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_priceCurveNumSeconds",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_dropIntervalNumSeconds",
          "type": "uint32"
        }
      ],
      "name": "setAuctionParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "setAuctionSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setBeanRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "azukiIds",
          "type": "uint256[]"
        }
      ],
      "name": "setCanClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_claimBeanOpen",
          "type": "bool"
        }
      ],
      "name": "setClaimBeanState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isRegistryActive",
          "type": "bool"
        }
      ],
      "name": "setIsRegistryActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setOffchainSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setOperatorFilteringEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_presaleStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_presaleEndTime",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_presalePrice",
          "type": "uint64"
        }
      ],
      "name": "setPresaleParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPresaleAndAuctionMinted",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferLowerOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRealOwner",
          "type": "address"
        }
      ],
      "name": "transferRealOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b0da1f26e530fd3bf8d3bbc225bf2ed8712a51ffdaf836c2d785d40b98789d9",
  "receipt": {
    "to": null,
    "from": "0x43b1DB0EC2167C8811cA0216A35B3bEfc339689c",
    "contractAddress": "0x4931347Ac39cDCcb3e3496d361B7d946d1CD2bC5",
    "transactionIndex": 70,
    "gasUsed": "4044776",
    "logsBloom": "0x
    "blockHash": "0x0139a254b0a3c3444a6908e6d0d3f46e97558bc4452941592461107a0e4b91c7",
    "transactionHash": "0x6b0da1f26e530fd3bf8d3bbc225bf2ed8712a51ffdaf836c2d785d40b98789d9",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 5294711,
        "transactionHash": "0x6b0da1f26e530fd3bf8d3bbc225bf2ed8712a51ffdaf836c2d785d40b98789d9",
        "address": "0x4931347Ac39cDCcb3e3496d361B7d946d1CD2bC5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000043b1db0ec2167c8811ca0216a35b3befc339689c"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x0139a254b0a3c3444a6908e6d0d3f46e97558bc4452941592461107a0e4b91c7"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 5294711,
        "transactionHash": "0x6b0da1f26e530fd3bf8d3bbc225bf2ed8712a51ffdaf836c2d785d40b98789d9",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb59",
          "0x0000000000000000000000004931347ac39cdccb3e3496d361b7d946d1cd2bc5",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 95,
        "blockHash": "0x0139a254b0a3c3444a6908e6d0d3f46e97558bc4452941592461107a0e4b91c7"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 5294711,
        "transactionHash": "0x6b0da1f26e530fd3bf8d3bbc225bf2ed8712a51ffdaf836c2d785d40b98789d9",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x0038c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8",
          "0x0000000000000000000000004931347ac39cdccb3e3496d361b7d946d1cd2bc5",
          "0x0000000000000000000000003cc6cdda760b79bafa08df41ecfa224f810dceb6",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 96,
        "blockHash": "0x0139a254b0a3c3444a6908e6d0d3f46e97558bc4452941592461107a0e4b91c7"
      }
    ],
    "blockNumber": 5294711,
    "cumulativeGasUsed": "13811828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9DF66E7019fd1C02346ae835B06d67a68096F6eb",
    20000,
    10000,
    "0x43b1DB0EC2167C8811cA0216A35B3bEfc339689c"
  ],
  "numDeployments": 1,
  "solcInputHash": "97d2274a533cec76ead5db9c8f567870",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_azukiAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPresaleAndAuctionSupply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_withdrawAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowlistMintNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionMintNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeanCannotBeClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeanRedeemerNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChunkAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimWindowNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForceRedeemBeanOwnerMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialTransferLockOn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuctionSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPresaleSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxAuctionMintForAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPresaleOrAuctionMintSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingTooMuchInPresale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedTokenOwnerForClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedByRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemBeanNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistryNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chunkNum\",\"type\":\"uint256\"}],\"name\":\"AirdroppedChunk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sourceAzukiId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"beanId\",\"type\":\"uint256\"}],\"name\":\"ClaimedBean\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"PresaleMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AZUKI\",\"outputs\":[{\"internalType\":\"contract Azuki\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS_PUBLIC_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_PRESALE_AND_AUCTION_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"chunkNum\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistMintsAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"auctionStartPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"auctionEndPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"auctionPriceCurveLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"auctionDropInterval\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"auctionMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breakTransferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"azukiTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBeanOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beanOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"beanIds\",\"type\":\"uint256[]\"}],\"name\":\"forceRedeemBeans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"azukiIds\",\"type\":\"uint256[]\"}],\"name\":\"getCanClaims\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNumAuctionMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTransferLockOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numMintedInPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openRedeemBeanState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilteringEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"presaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"presaleEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"presalePrice\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxAllowedForPresaleForAddr\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"privilegedMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"beanIds\",\"type\":\"uint256[]\"}],\"name\":\"redeemBeans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"redeemBeanOpen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beanRedeemer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAllowlistMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setAllowlistMintsAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_startPriceWei\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_endPriceWei\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_priceCurveNumSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_dropIntervalNumSeconds\",\"type\":\"uint32\"}],\"name\":\"setAuctionParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"setAuctionSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setBeanRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"azukiIds\",\"type\":\"uint256[]\"}],\"name\":\"setCanClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claimBeanOpen\",\"type\":\"bool\"}],\"name\":\"setClaimBeanState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegistryActive\",\"type\":\"bool\"}],\"name\":\"setIsRegistryActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setOffchainSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setOperatorFilteringEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_presaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_presaleEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_presalePrice\",\"type\":\"uint64\"}],\"name\":\"setPresaleParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPresaleAndAuctionMinted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLowerOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRealOwner\",\"type\":\"address\"}],\"name\":\"transferRealOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Azuki/MysteryBean.sol\":\"MysteryBean\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Azuki/MultisigOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\r\\n// Source: https://github.com/tubby-cats/dual-ownership-nft\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\nabstract contract MultisigOwnable is Ownable {\\r\\n  address public realOwner;\\r\\n\\r\\n  constructor() {\\r\\n    realOwner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyRealOwner() {\\r\\n    require(\\r\\n      realOwner == msg.sender,\\r\\n      'MultisigOwnable: caller is not the real owner'\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function transferRealOwnership(address newRealOwner) public onlyRealOwner {\\r\\n    realOwner = newRealOwner;\\r\\n  }\\r\\n\\r\\n  function transferLowerOwnership(address newOwner) public onlyRealOwner {\\r\\n    transferOwnership(newOwner);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x3d1435ebece0a40b4106757b85cc37cefb9226a715fff0e85d4a73e8b84ec2d3\",\"license\":\"CC0-1.0\"},\"contracts/Azuki/MysteryBean.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {BitMaps} from \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\r\\nimport \\\"./closedsea/OperatorFilterer.sol\\\";\\r\\nimport \\\"./MultisigOwnable.sol\\\";\\r\\n\\r\\nerror InvalidPresaleSetup();\\r\\nerror InvalidAuctionSetup();\\r\\nerror ChunkAlreadyProcessed();\\r\\nerror MismatchedArrays();\\r\\nerror AuctionMintNotOpen();\\r\\nerror MaxPresaleOrAuctionMintSupplyReached();\\r\\nerror RedeemBeanNotOpen();\\r\\nerror BeanRedeemerNotSet();\\r\\nerror ForceRedeemBeanOwnerMismatch();\\r\\nerror RegistryNotSet();\\r\\nerror NotAllowedByRegistry();\\r\\nerror WithdrawFailed();\\r\\nerror ClaimWindowNotOpen();\\r\\nerror MismatchedTokenOwnerForClaim();\\r\\nerror BeanCannotBeClaimed();\\r\\nerror InitialTransferLockOn();\\r\\nerror MaxAuctionMintForAddress();\\r\\nerror InsufficientFunds();\\r\\nerror RefundFailed();\\r\\nerror InvalidSignature();\\r\\nerror OverMaxSupply();\\r\\nerror AllowlistMintNotOpen();\\r\\nerror PresaleNotOpen();\\r\\nerror MintingTooMuchInPresale();\\r\\nerror InvalidContractSetup();\\r\\n\\r\\ninterface IBeanRedeemer {\\r\\n    function redeemBeans(address to, uint256[] calldata beanIds)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n}\\r\\n\\r\\ninterface IRegistry {\\r\\n    function isAllowedOperator(address operator) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface Azuki {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n}\\r\\n\\r\\ncontract MysteryBean is ERC2981, MultisigOwnable, OperatorFilterer, ERC721A {\\r\\n    using ECDSA for bytes32;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using BitMaps for BitMaps.BitMap;\\r\\n\\r\\n    event AirdroppedChunk(uint256 indexed chunkNum);\\r\\n    event ClaimedBean(uint256 indexed sourceAzukiId, uint256 indexed beanId);\\r\\n    event PresaleMint(address indexed minter, uint16 indexed amount);\\r\\n\\r\\n    // The set of chunks processed for the airdrop.\\r\\n    // Intent is to help prevent double processing of chunks.\\r\\n    EnumerableSet.UintSet private _processedChunksForAirdrop;\\r\\n\\r\\n    bool public operatorFilteringEnabled = true;\\r\\n    bool public initialTransferLockOn = true;\\r\\n    bool public isRegistryActive = false;\\r\\n    address public registryAddress;\\r\\n\\r\\n    bool public claimBeanOpen = false;\\r\\n    // Keys are azuki token ids\\r\\n    BitMaps.BitMap private _azukiCanClaim;\\r\\n\\r\\n    uint256 public immutable TOTAL_PRESALE_AND_AUCTION_SUPPLY;\\r\\n    uint16 public totalPresaleAndAuctionMinted;\\r\\n\\r\\n    struct PresaleInfo {\\r\\n        uint32 presaleStartTime;\\r\\n        uint32 presaleEndTime;\\r\\n        uint64 presalePrice;\\r\\n    }\\r\\n    PresaleInfo public presaleInfo;\\r\\n    mapping(address => uint256) public numMintedInPresale;\\r\\n\\r\\n    struct AuctionInfo {\\r\\n        uint32 auctionSaleStartTime;\\r\\n        uint64 auctionStartPrice;\\r\\n        uint64 auctionEndPrice;\\r\\n        uint32 auctionPriceCurveLength;\\r\\n        uint32 auctionDropInterval;\\r\\n    }\\r\\n    AuctionInfo public auctionInfo;\\r\\n\\r\\n    address private _offchainSigner;\\r\\n\\r\\n    struct RedeemInfo {\\r\\n        bool redeemBeanOpen;\\r\\n        address beanRedeemer;\\r\\n    }\\r\\n    RedeemInfo public redeemInfo;\\r\\n\\r\\n    mapping(address => uint256) public allowlistMintsAlloc;\\r\\n    uint256 public allowlistMintPrice;\\r\\n\\r\\n    uint256 public immutable MAX_SUPPLY;\\r\\n\\r\\n    string private _baseTokenURI;\\r\\n\\r\\n    Azuki public immutable AZUKI;\\r\\n    address payable public immutable WITHDRAW_ADDRESS;\\r\\n\\r\\n    uint256 public constant MINT_BATCH_SIZE = 10;\\r\\n\\r\\n    constructor(\\r\\n        address _azukiAddress,\\r\\n        uint256 _maxSupply,\\r\\n        uint256 _totalPresaleAndAuctionSupply,\\r\\n        address payable _withdrawAddress\\r\\n    ) ERC721A(\\\"MysteryBean\\\", \\\"MBEAN\\\") {\\r\\n        AZUKI = Azuki(_azukiAddress);\\r\\n        MAX_SUPPLY = _maxSupply;\\r\\n        TOTAL_PRESALE_AND_AUCTION_SUPPLY = _totalPresaleAndAuctionSupply;\\r\\n        WITHDRAW_ADDRESS = _withdrawAddress;\\r\\n\\r\\n        if (TOTAL_PRESALE_AND_AUCTION_SUPPLY >= MAX_SUPPLY)\\r\\n            revert InvalidContractSetup();\\r\\n\\r\\n        _registerForOperatorFiltering();\\r\\n        operatorFilteringEnabled = true;\\r\\n    }\\r\\n\\r\\n    // ---------------------------\\r\\n    // Airdrop and privileged mint\\r\\n    // ---------------------------\\r\\n\\r\\n    // Thin wrapper around privilegedMint which does chunkNum checks to reduce chance of double processing chunks in a manual airdrop.\\r\\n    function airdrop(\\r\\n        address[] calldata receivers,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 chunkNum\\r\\n    ) external onlyOwner {\\r\\n        if (_processedChunksForAirdrop.contains(chunkNum))\\r\\n            revert ChunkAlreadyProcessed();\\r\\n        _processedChunksForAirdrop.add(chunkNum);\\r\\n        privilegedMint(receivers, amounts);\\r\\n        emit AirdroppedChunk(chunkNum);\\r\\n    }\\r\\n\\r\\n    // Used for airdrop and minting any of the total supply that's unminted.\\r\\n    // Does not use safeMint (assumes the caller has checked whether contract receivers can receive 721s)\\r\\n    function privilegedMint(\\r\\n        address[] calldata receivers,\\r\\n        uint256[] calldata amounts\\r\\n    ) public onlyOwner {\\r\\n        if (receivers.length != amounts.length || receivers.length == 0)\\r\\n            revert MismatchedArrays();\\r\\n        for (uint256 i; i < receivers.length; ) {\\r\\n            _mintWrapperNoSafeReceiverCheck(receivers[i], amounts[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        if (_totalMinted() > MAX_SUPPLY) {\\r\\n            revert OverMaxSupply();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mintWrapperSafeReceiverCheck(address to, uint256 amount) private {\\r\\n        uint256 numBatches = amount / MINT_BATCH_SIZE;\\r\\n        for (uint256 i; i < numBatches; ) {\\r\\n            _safeMint(to, MINT_BATCH_SIZE, \\\"\\\");\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        if (amount % MINT_BATCH_SIZE > 0) {\\r\\n            _safeMint(to, amount % MINT_BATCH_SIZE, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mintWrapperNoSafeReceiverCheck(address to, uint256 amount)\\r\\n        private\\r\\n    {\\r\\n        uint256 numBatches = amount / MINT_BATCH_SIZE;\\r\\n        for (uint256 i; i < numBatches; ) {\\r\\n            _mint(to, MINT_BATCH_SIZE);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        if (amount % MINT_BATCH_SIZE > 0) {\\r\\n            _mint(to, amount % MINT_BATCH_SIZE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------\\r\\n    // Claim Window\\r\\n    // ----------------------------------------------\\r\\n\\r\\n    function claim(uint256[] calldata azukiTokenIds) external {\\r\\n        if (!claimBeanOpen) {\\r\\n            revert ClaimWindowNotOpen();\\r\\n        }\\r\\n        uint256 numToClaim = azukiTokenIds.length;\\r\\n        if (_totalMinted() + numToClaim > MAX_SUPPLY) {\\r\\n            revert OverMaxSupply();\\r\\n        }\\r\\n        uint256 nextTokenId = _nextTokenId();\\r\\n        for (uint256 i; i < numToClaim; ) {\\r\\n            uint256 azukiId = azukiTokenIds[i];\\r\\n            if (AZUKI.ownerOf(azukiId) != msg.sender)\\r\\n                revert MismatchedTokenOwnerForClaim();\\r\\n            if (!_azukiCanClaim.get(azukiId)) revert BeanCannotBeClaimed();\\r\\n            _azukiCanClaim.unset(azukiId);\\r\\n            emit ClaimedBean(azukiId, nextTokenId + i);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        _mintWrapperSafeReceiverCheck(msg.sender, numToClaim);\\r\\n    }\\r\\n\\r\\n    function setClaimBeanState(bool _claimBeanOpen) external onlyOwner {\\r\\n        claimBeanOpen = _claimBeanOpen;\\r\\n    }\\r\\n\\r\\n    function setCanClaim(uint256[] calldata azukiIds) external onlyOwner {\\r\\n        for (uint256 i; i < azukiIds.length; ) {\\r\\n            _azukiCanClaim.set(azukiIds[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCanClaims(uint256[] calldata azukiIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool[] memory)\\r\\n    {\\r\\n        bool[] memory result = new bool[](azukiIds.length);\\r\\n        for (uint256 i; i < azukiIds.length; ) {\\r\\n            result[i] = _azukiCanClaim.get(azukiIds[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Presale mint\\r\\n    // ------------\\r\\n    // maxAllowedForPresaleForAddr: the number the holder is allowed to mint during the entirety of the presale.\\r\\n    // Its value is verified through the signature. We do this instead of seeding the contract with state to avoid a more complex contract setup.\\r\\n    function presaleMint(\\r\\n        uint16 amount,\\r\\n        uint16 maxAllowedForPresaleForAddr,\\r\\n        bytes calldata _signature\\r\\n    ) external payable {\\r\\n        PresaleInfo memory info = presaleInfo;\\r\\n        if (\\r\\n            info.presaleStartTime == 0 ||\\r\\n            block.timestamp < info.presaleStartTime ||\\r\\n            block.timestamp >= info.presaleEndTime\\r\\n        ) {\\r\\n            revert PresaleNotOpen();\\r\\n        }\\r\\n        uint256 numMintedInPresaleLoc = numMintedInPresale[msg.sender];\\r\\n        if (amount > maxAllowedForPresaleForAddr - numMintedInPresaleLoc) {\\r\\n            revert MintingTooMuchInPresale();\\r\\n        }\\r\\n\\r\\n        uint16 totalPresaleAndAuctionMintedLocal = totalPresaleAndAuctionMinted;\\r\\n        if (\\r\\n            amount + totalPresaleAndAuctionMintedLocal >\\r\\n            TOTAL_PRESALE_AND_AUCTION_SUPPLY\\r\\n        ) {\\r\\n            revert MaxPresaleOrAuctionMintSupplyReached();\\r\\n        }\\r\\n\\r\\n        if (_totalMinted() + amount > MAX_SUPPLY) {\\r\\n            revert OverMaxSupply();\\r\\n        }\\r\\n\\r\\n        if (!_verifyPresaleSig(amount, maxAllowedForPresaleForAddr, _signature))\\r\\n            revert InvalidSignature();\\r\\n\\r\\n        uint256 totalCost = uint256(info.presalePrice) * amount;\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientFunds();\\r\\n        }\\r\\n        unchecked {\\r\\n            numMintedInPresale[msg.sender] = amount + numMintedInPresaleLoc;\\r\\n            totalPresaleAndAuctionMinted =\\r\\n                totalPresaleAndAuctionMintedLocal +\\r\\n                amount;\\r\\n        }\\r\\n        _mintWrapperNoSafeReceiverCheck(msg.sender, amount);\\r\\n        emit PresaleMint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _verifyPresaleSig(\\r\\n        uint16 amount,\\r\\n        uint16 maxAllowedForPresaleForAddr,\\r\\n        bytes memory _signature\\r\\n    ) private view returns (bool) {\\r\\n        bytes32 hashVal = keccak256(\\r\\n            abi.encodePacked(amount, msg.sender, maxAllowedForPresaleForAddr)\\r\\n        );\\r\\n        bytes32 signedHash = hashVal.toEthSignedMessageHash();\\r\\n        address signingAddress = signedHash.recover(_signature);\\r\\n        return signingAddress == _offchainSigner;\\r\\n    }\\r\\n\\r\\n    // Presale price to match starting price of dutch auction\\r\\n    function setPresaleParams(\\r\\n        uint32 _presaleStartTime,\\r\\n        uint32 _presaleEndTime,\\r\\n        uint64 _presalePrice\\r\\n    ) external onlyOwner {\\r\\n        if (\\r\\n            _presaleStartTime == 0 || _presaleEndTime == 0 || _presalePrice == 0\\r\\n        ) {\\r\\n            revert InvalidPresaleSetup();\\r\\n        }\\r\\n        if (_presaleStartTime >= _presaleEndTime) {\\r\\n            revert InvalidPresaleSetup();\\r\\n        }\\r\\n        presaleInfo = PresaleInfo(\\r\\n            _presaleStartTime,\\r\\n            _presaleEndTime,\\r\\n            _presalePrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setOffchainSigner(address _signer) external onlyOwner {\\r\\n        _offchainSigner = _signer;\\r\\n    }\\r\\n\\r\\n    // -------------\\r\\n    // Dutch auction\\r\\n    // -------------\\r\\n    uint256 public constant MAX_PER_ADDRESS_PUBLIC_MINT = 3;\\r\\n\\r\\n    function getAuctionPrice() public view returns (uint256) {\\r\\n        AuctionInfo memory info = auctionInfo;\\r\\n        if (block.timestamp < info.auctionSaleStartTime) {\\r\\n            return info.auctionStartPrice;\\r\\n        }\\r\\n        if (\\r\\n            block.timestamp - info.auctionSaleStartTime >=\\r\\n            info.auctionPriceCurveLength\\r\\n        ) {\\r\\n            return info.auctionEndPrice;\\r\\n        } else {\\r\\n            uint256 steps = (block.timestamp - info.auctionSaleStartTime) /\\r\\n                info.auctionDropInterval;\\r\\n            uint256 auctionDropPerStep = (info.auctionStartPrice -\\r\\n                info.auctionEndPrice) /\\r\\n                (info.auctionPriceCurveLength / info.auctionDropInterval);\\r\\n            return info.auctionStartPrice - (steps * auctionDropPerStep);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier isEOA() {\\r\\n        require(tx.origin == msg.sender, \\\"The caller is another contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function auctionMint(uint8 amount, bytes calldata _signature)\\r\\n        external\\r\\n        payable\\r\\n        isEOA\\r\\n    {\\r\\n        AuctionInfo memory info = auctionInfo;\\r\\n\\r\\n        if (\\r\\n            info.auctionSaleStartTime == 0 ||\\r\\n            block.timestamp < info.auctionSaleStartTime\\r\\n        ) {\\r\\n            revert AuctionMintNotOpen();\\r\\n        }\\r\\n\\r\\n        uint16 totalPresaleAndAuctionMintedLocal = totalPresaleAndAuctionMinted;\\r\\n        if (\\r\\n            amount + totalPresaleAndAuctionMintedLocal >\\r\\n            TOTAL_PRESALE_AND_AUCTION_SUPPLY\\r\\n        ) {\\r\\n            revert MaxPresaleOrAuctionMintSupplyReached();\\r\\n        }\\r\\n\\r\\n        if (_totalMinted() + amount > MAX_SUPPLY) {\\r\\n            revert OverMaxSupply();\\r\\n        }\\r\\n\\r\\n        uint256 numAuctionMintedForThisAddr = _getAux(msg.sender);\\r\\n\\r\\n        if (\\r\\n            numAuctionMintedForThisAddr + amount > MAX_PER_ADDRESS_PUBLIC_MINT\\r\\n        ) {\\r\\n            revert MaxAuctionMintForAddress();\\r\\n        }\\r\\n\\r\\n        if (!_verifySig(_signature)) revert InvalidSignature();\\r\\n\\r\\n        uint256 totalCost = getAuctionPrice() * amount;\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientFunds();\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            _setAux(msg.sender, uint64(numAuctionMintedForThisAddr) + amount);\\r\\n            totalPresaleAndAuctionMinted =\\r\\n                totalPresaleAndAuctionMintedLocal +\\r\\n                amount;\\r\\n        }\\r\\n        _mint(msg.sender, amount);\\r\\n\\r\\n        if (msg.value > totalCost) {\\r\\n            (bool sent, ) = msg.sender.call{value: msg.value - totalCost}(\\\"\\\");\\r\\n            if (!sent) {\\r\\n                revert RefundFailed();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNumAuctionMinted(address addr) external view returns (uint256) {\\r\\n        return _getAux(addr);\\r\\n    }\\r\\n\\r\\n    function setAuctionParams(\\r\\n        uint32 _startTime,\\r\\n        uint64 _startPriceWei,\\r\\n        uint64 _endPriceWei,\\r\\n        uint32 _priceCurveNumSeconds,\\r\\n        uint32 _dropIntervalNumSeconds\\r\\n    ) public onlyOwner {\\r\\n        if (\\r\\n            _startTime != 0 &&\\r\\n            (_startPriceWei == 0 ||\\r\\n                _priceCurveNumSeconds == 0 ||\\r\\n                _dropIntervalNumSeconds == 0)\\r\\n        ) {\\r\\n            revert InvalidAuctionSetup();\\r\\n        }\\r\\n        auctionInfo = AuctionInfo(\\r\\n            _startTime,\\r\\n            _startPriceWei,\\r\\n            _endPriceWei,\\r\\n            _priceCurveNumSeconds,\\r\\n            _dropIntervalNumSeconds\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setAuctionSaleStartTime(uint32 timestamp) external onlyOwner {\\r\\n        AuctionInfo memory info = auctionInfo;\\r\\n        if (\\r\\n            timestamp != 0 &&\\r\\n            (info.auctionStartPrice == 0 ||\\r\\n                info.auctionPriceCurveLength == 0 ||\\r\\n                info.auctionDropInterval == 0)\\r\\n        ) {\\r\\n            revert InvalidAuctionSetup();\\r\\n        }\\r\\n        auctionInfo.auctionSaleStartTime = timestamp;\\r\\n    }\\r\\n\\r\\n    function _verifySig(bytes memory _signature) private view returns (bool) {\\r\\n        bytes32 hashVal = keccak256(abi.encodePacked(msg.sender));\\r\\n        bytes32 signedHash = hashVal.toEthSignedMessageHash();\\r\\n        address signingAddress = signedHash.recover(_signature);\\r\\n        return signingAddress == _offchainSigner;\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        (bool sent, ) = WITHDRAW_ADDRESS.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert WithdrawFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // -----------\\r\\n    // Redeem bean\\r\\n    // -----------\\r\\n    function redeemBeans(uint256[] calldata beanIds)\\r\\n        external\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        RedeemInfo memory info = redeemInfo;\\r\\n        if (!info.redeemBeanOpen) {\\r\\n            revert RedeemBeanNotOpen();\\r\\n        }\\r\\n        return _redeemBeansImpl(msg.sender, beanIds, true, info.beanRedeemer);\\r\\n    }\\r\\n\\r\\n    function _redeemBeansImpl(\\r\\n        address beanOwner,\\r\\n        uint256[] memory beanIds,\\r\\n        bool burnOwnerOrApprovedCheck,\\r\\n        address beanRedeemer\\r\\n    ) private returns (uint256[] memory) {\\r\\n        for (uint256 i; i < beanIds.length; ) {\\r\\n            _burn(beanIds[i], burnOwnerOrApprovedCheck);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return IBeanRedeemer(beanRedeemer).redeemBeans(beanOwner, beanIds);\\r\\n    }\\r\\n\\r\\n    function forceRedeemBeans(address beanOwner, uint256[] calldata beanIds)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        for (uint256 i; i < beanIds.length; ) {\\r\\n            if (ownerOf(beanIds[i]) != beanOwner) {\\r\\n                revert ForceRedeemBeanOwnerMismatch();\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return\\r\\n            _redeemBeansImpl(\\r\\n                beanOwner,\\r\\n                beanIds,\\r\\n                false,\\r\\n                redeemInfo.beanRedeemer\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function openRedeemBeanState() external onlyOwner {\\r\\n        RedeemInfo memory info = redeemInfo;\\r\\n        if (info.beanRedeemer == address(0)) {\\r\\n            revert BeanRedeemerNotSet();\\r\\n        }\\r\\n        redeemInfo = RedeemInfo(true, info.beanRedeemer);\\r\\n    }\\r\\n\\r\\n    function setBeanRedeemer(address contractAddress) external onlyOwner {\\r\\n        redeemInfo = RedeemInfo(redeemInfo.redeemBeanOpen, contractAddress);\\r\\n    }\\r\\n\\r\\n    // --------------\\r\\n    // Allowlist mint\\r\\n    // --------------\\r\\n    function allowlistMint() external payable {\\r\\n        if (allowlistMintPrice == 0) {\\r\\n            revert AllowlistMintNotOpen();\\r\\n        }\\r\\n        uint256 amount = allowlistMintsAlloc[msg.sender];\\r\\n\\r\\n        uint256 totalCost = allowlistMintPrice * amount;\\r\\n        if (msg.value < totalCost) {\\r\\n            revert InsufficientFunds();\\r\\n        }\\r\\n        if (_totalMinted() + amount > MAX_SUPPLY) {\\r\\n            revert OverMaxSupply();\\r\\n        }\\r\\n        allowlistMintsAlloc[msg.sender] = 0;\\r\\n\\r\\n        _safeMint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function setAllowlistMintsAlloc(\\r\\n        address[] calldata addresses,\\r\\n        uint256[] calldata amounts\\r\\n    ) external onlyOwner {\\r\\n        if (addresses.length != amounts.length || addresses.length == 0)\\r\\n            revert MismatchedArrays();\\r\\n        for (uint256 i; i < addresses.length; ) {\\r\\n            allowlistMintsAlloc[addresses[i]] = amounts[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAllowlistMintPrice(uint256 price) external onlyOwner {\\r\\n        allowlistMintPrice = price;\\r\\n    }\\r\\n\\r\\n    // -------------------\\r\\n    // Break transfer lock\\r\\n    // -------------------\\r\\n    function breakTransferLock() external onlyOwner {\\r\\n        initialTransferLockOn = false;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // Metadata\\r\\n    // --------\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // EIP-2981\\r\\n    // --------\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(\\r\\n        uint256 tokenId,\\r\\n        address receiver,\\r\\n        uint96 feeNumerator\\r\\n    ) external onlyOwner {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------\\r\\n    // OperatorFilterer overrides (overrides, values etc.)\\r\\n    // ---------------------------------------------------\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        override(ERC721A)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        if (initialTransferLockOn) revert InitialTransferLockOn();\\r\\n        super.setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n    function setOperatorFilteringEnabled(bool value) public onlyOwner {\\r\\n        operatorFilteringEnabled = value;\\r\\n    }\\r\\n\\r\\n    function _operatorFilteringEnabled() internal view override returns (bool) {\\r\\n        return operatorFilteringEnabled;\\r\\n    }\\r\\n\\r\\n    function approve(address operator, uint256 tokenId)\\r\\n        public\\r\\n        payable\\r\\n        override(ERC721A)\\r\\n        onlyAllowedOperatorApproval(operator)\\r\\n    {\\r\\n        if (initialTransferLockOn) revert InitialTransferLockOn();\\r\\n        super.approve(operator, tokenId);\\r\\n    }\\r\\n\\r\\n    // ERC721A calls transferFrom internally in its two safeTransferFrom functions, so we don't need to override those.\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable override(ERC721A) onlyAllowedOperator(from) {\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    // --------------\\r\\n    // Registry check\\r\\n    // --------------\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal override {\\r\\n        if (initialTransferLockOn && from != address(0) && to != address(0))\\r\\n            revert InitialTransferLockOn();\\r\\n        if (_isValidAgainstRegistry(msg.sender)) {\\r\\n            super._beforeTokenTransfers(from, to, startTokenId, quantity);\\r\\n        } else {\\r\\n            revert NotAllowedByRegistry();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isValidAgainstRegistry(address operator)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (isRegistryActive) {\\r\\n            IRegistry registry = IRegistry(registryAddress);\\r\\n            return registry.isAllowedOperator(operator);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setIsRegistryActive(bool _isRegistryActive) external onlyOwner {\\r\\n        if (registryAddress == address(0)) revert RegistryNotSet();\\r\\n        isRegistryActive = _isRegistryActive;\\r\\n    }\\r\\n\\r\\n    function setRegistryAddress(address _registryAddress) external onlyOwner {\\r\\n        registryAddress = _registryAddress;\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------\\r\\n    // EIP-165\\r\\n    // ----------------------------------------------\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721A, ERC2981)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            ERC721A.supportsInterface(interfaceId) ||\\r\\n            ERC2981.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb7bf32e27af34808f73e9849678f85ac8c9aabcda09ecaa131271217860a8c1d\",\"license\":\"MIT\"},\"contracts/Azuki/closedsea/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\\r\\n/// mandatory on-chain royalty enforcement in order for new collections to\\r\\n/// receive royalties.\\r\\n/// For more information, see:\\r\\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\\r\\nabstract contract OperatorFilterer {\\r\\n    /// @dev The default OpenSea operator blocklist subscription.\\r\\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\r\\n\\r\\n    /// @dev The OpenSea operator filter registry.\\r\\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\\r\\n\\r\\n    /// @dev Registers the current contract to OpenSea's operator filter,\\r\\n    /// and subscribe to the default OpenSea operator blocklist.\\r\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\r\\n    function _registerForOperatorFiltering() internal virtual {\\r\\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\\r\\n    }\\r\\n\\r\\n    /// @dev Registers the current contract to OpenSea's operator filter.\\r\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\r\\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\\r\\n\\r\\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\\r\\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\\r\\n\\r\\n            for {} iszero(subscribe) {} {\\r\\n                if iszero(subscriptionOrRegistrantToCopy) {\\r\\n                    functionSelector := 0x4420e486 // `register(address)`.\\r\\n                    break\\r\\n                }\\r\\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\\r\\n                break\\r\\n            }\\r\\n            // Store the function selector.\\r\\n            mstore(0x00, shl(224, functionSelector))\\r\\n            // Store the `address(this)`.\\r\\n            mstore(0x04, address())\\r\\n            // Store the `subscriptionOrRegistrantToCopy`.\\r\\n            mstore(0x24, subscriptionOrRegistrantToCopy)\\r\\n            // Register into the registry.\\r\\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\\r\\n                // If the function selector has not been overwritten,\\r\\n                // it is an out-of-gas error.\\r\\n                if eq(shr(224, mload(0x00)), functionSelector) {\\r\\n                    // To prevent gas under-estimation.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n            }\\r\\n            // Restore the part of the free memory pointer that was overwritten,\\r\\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\\r\\n            mstore(0x24, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\\r\\n    modifier onlyAllowedOperator(address from) virtual {\\r\\n        if (from != msg.sender) {\\r\\n            if (!_isPriorityOperator(msg.sender)) {\\r\\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier to guard a function from approving a blocked operator..\\r\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\r\\n        if (!_isPriorityOperator(operator)) {\\r\\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\\r\\n    function _revertIfBlocked(address operator) private view {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Store the function selector of `isOperatorAllowed(address,address)`,\\r\\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\\r\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\r\\n            mstore(0x00, 0xc6171134001122334455)\\r\\n            // Store the `address(this)`.\\r\\n            mstore(0x1a, address())\\r\\n            // Store the `operator`.\\r\\n            mstore(0x3a, operator)\\r\\n\\r\\n            // `isOperatorAllowed` always returns true if it does not revert.\\r\\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\\r\\n                // Bubble up the revert if the staticcall reverts.\\r\\n                returndatacopy(0x00, 0x00, returndatasize())\\r\\n                revert(0x00, returndatasize())\\r\\n            }\\r\\n\\r\\n            // We'll skip checking if `from` is inside the blacklist.\\r\\n            // Even though that can block transferring out of wrapper contracts,\\r\\n            // we don't want tokens to be stuck.\\r\\n\\r\\n            // Restore the part of the free memory pointer that was overwritten,\\r\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\r\\n            mstore(0x3a, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev For deriving contracts to override, so that operator filtering\\r\\n    /// can be turned on / off.\\r\\n    /// Returns true by default.\\r\\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\\r\\n    /// skip operator filtering, helping users save gas.\\r\\n    /// Returns false for all inputs by default.\\r\\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9fb30ab66084a489ec76d887969dfc6805d1aceb3a9792a5e90c77715deca54c\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052600e805462ffffff60ff60b81b0119166101011790553480156200002857600080fd5b50604051620048e7380380620048e78339810160408190526200004b916200024a565b6040518060400160405280600b81526020016a26bcb9ba32b93ca132b0b760a91b8152506040518060400160405280600581526020016426a122a0a760d91b815250620000a7620000a16200013e60201b60201c565b62000142565b600380546001600160a01b031916331790556006620000c7838262000340565b506007620000d6828262000340565b50600060045550506001600160a01b0380851660c05260a08490526080839052811660e0528282106200011c57604051634808530f60e11b815260040160405180910390fd5b6200012662000194565b5050600e805460ff19166001179055506200040c9050565b3390565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001b5733cc6cdda760b79bafa08df41ecfa224f810dceb66001620001b7565b565b6001600160a01b0390911690637d3e3dbe81620001e75782620001e05750634420e486620001e7565b5063a0af29035b8060e01b60005230600452826024526004600060446000806daaeb6d7670e522a718067333cd4e5af162000227578060005160e01c036200022757600080fd5b5060006024525050565b6001600160a01b03811681146200024757600080fd5b50565b600080600080608085870312156200026157600080fd5b84516200026e8162000231565b8094505060208501519250604085015191506060850151620002908162000231565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002c657607f821691505b602082108103620002e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033b57600081815260208120601f850160051c81016020861015620003165750805b601f850160051c820191505b81811015620003375782815560010162000322565b5050505b505050565b81516001600160401b038111156200035c576200035c6200029b565b62000374816200036d8454620002b1565b84620002ed565b602080601f831160018114620003ac5760008415620003935750858301515b600019600386901b1c1916600185901b17855562000337565b600085815260208120601f198616915b82811015620003dd57888601518255948401946001909101908401620003bc565b5085821015620003fc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e051614462620004856000396000818161050a01526112c0015260008181610bf901526117a40152600081816106c6015281816113b9015281816114b60152818161171101528181611bd101526120a00152600081816108f001528181611b83015261204f01526144626000f3fe6080604052600436106103ef5760003560e01c806370a0823111610208578063abd017ea11610118578063e985e9c5116100ab578063f49ed4e71161007a578063f49ed4e714610d14578063f80067df14610d2a578063f99de7a014610d57578063fb796e6c14610d77578063fe6b301314610d9157600080fd5b8063e985e9c514610c3b578063ed9aab5114610c84578063efe7aa4914610cab578063f2fde38b14610cf457600080fd5b8063c78461d7116100e7578063c78461d714610ba7578063c87b56dd14610bc7578063d2c8ed4c14610be7578063d684340914610c1b57600080fd5b8063abd017ea14610b3f578063adceef0714610b5f578063b7c0b8e814610b74578063b88d4fde14610b9457600080fd5b80638da5cb5b1161019b578063a22cb4651161016a578063a22cb46514610a93578063a2623f7514610ab3578063a73762b514610aec578063a9ba0b8714610b0c578063ab7b499314610b1f57600080fd5b80638da5cb5b14610a1f578063954b801714610a3d57806395d89b4114610a5e57806395fd95fc14610a7357600080fd5b80637809c6b1116101d75780637809c6b1146109b4578063788ca64c146109c75780637bcbf571146109f55780637fd147a414610a0a57600080fd5b806370a0823114610932578063715018a614610952578063731186eb1461096757806376cba7441461098757600080fd5b806332cb6b0c1161030357806346fff98d116102965780635944c753116102655780635944c7531461087e5780636352211e1461089e5780636ba4c138146108be5780636cd10ae2146108de5780636ebc56011461091257600080fd5b806346fff98d1461079a5780634bd25c6f146107ba57806355d64d03146107cf57806355f804b31461085e57600080fd5b80633ccfd60b116102d25780633ccfd60b1461074a57806341fbddbd1461075f5780634202d18d1461076757806342842e0e1461078757600080fd5b806332cb6b0c146106b457806333d66b5b146106e8578063364a5c001461070857806337dc95411461073557600080fd5b806312b365101161038657806323b872dd1161035557806323b872dd146105ae57806324846647146105c15780632a55205a146105ee5780632cff67701461062d5780632edf08691461064d57600080fd5b806312b365101461052c578063139e633e1461054b57806318160ddd1461056b5780631df270f31461058e57600080fd5b8063081812fc116103c2578063081812fc1461048d578063095ea7b3146104c557806309af3f9a146104d8578063122e04a8146104f857600080fd5b806301ffc9a7146103f457806304634d8d1461042957806304f81b111461044b57806306fdde031461046b575b600080fd5b34801561040057600080fd5b5061041461040f366004613791565b610db1565b60405190151581526020015b60405180910390f35b34801561043557600080fd5b506104496104443660046137df565b610dd1565b005b34801561045757600080fd5b50610449610466366004613814565b610de7565b34801561047757600080fd5b50610480610e11565b6040516104209190613881565b34801561049957600080fd5b506104ad6104a8366004613894565b610ea3565b6040516001600160a01b039091168152602001610420565b6104496104d33660046138ad565b610ee7565b3480156104e457600080fd5b506104496104f3366004613814565b610f34565b34801561050457600080fd5b506104ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053857600080fd5b50600e5461041490610100900460ff1681565b34801561055757600080fd5b50610449610566366004613814565b610f73565b34801561057757600080fd5b50600554600454035b604051908152602001610420565b34801561059a57600080fd5b506003546104ad906001600160a01b031681565b6104496105bc3660046138d9565b610fcc565b3480156105cd57600080fd5b506105e16105dc36600461395e565b611002565b604051610420919061399f565b3480156105fa57600080fd5b5061060e6106093660046139e5565b6110b3565b604080516001600160a01b039093168352602083019190915201610420565b34801561063957600080fd5b50610449610648366004613814565b611161565b34801561065957600080fd5b506011546106889063ffffffff80821691600160201b810490911690600160401b90046001600160401b031683565b6040805163ffffffff94851681529390921660208401526001600160401b031690820152606001610420565b3480156106c057600080fd5b506105807f000000000000000000000000000000000000000000000000000000000000000081565b3480156106f457600080fd5b5061044961070336600461395e565b6111ad565b34801561071457600080fd5b50610728610723366004613a07565b6111f4565b6040516104209190613a96565b34801561074157600080fd5b50610580600381565b34801561075657600080fd5b506104496112bc565b610449611350565b34801561077357600080fd5b50610449610782366004613aa9565b611425565b6104496107953660046138d9565b6114fd565b3480156107a657600080fd5b506104496107b5366004613b22565b611518565b3480156107c657600080fd5b5061058061156c565b3480156107db57600080fd5b5060135461081f9063ffffffff808216916001600160401b03600160201b8204811692600160601b830490911691600160a01b8104821691600160c01b9091041685565b6040805163ffffffff96871681526001600160401b0395861660208201529390941693830193909352831660608201529116608082015260a001610420565b34801561086a57600080fd5b50610449610879366004613b80565b6116b1565b34801561088a57600080fd5b50610449610899366004613bb5565b6116c6565b3480156108aa57600080fd5b506104ad6108b9366004613894565b6116d9565b3480156108ca57600080fd5b506104496108d936600461395e565b6116e4565b3480156108ea57600080fd5b506105807f000000000000000000000000000000000000000000000000000000000000000081565b34801561091e57600080fd5b5061044961092d366004613c07565b6118fa565b34801561093e57600080fd5b5061058061094d366004613814565b6119d6565b34801561095e57600080fd5b50610449611a24565b34801561097357600080fd5b50610449610982366004613c22565b611a38565b34801561099357600080fd5b506105806109a2366004613814565b60126020526000908152604090205481565b6104496109c2366004613ca7565b611ab3565b3480156109d357600080fd5b506010546109e29061ffff1681565b60405161ffff9091168152602001610420565b348015610a0157600080fd5b50610449611d3c565b348015610a1657600080fd5b50610449611d51565b348015610a2b57600080fd5b506002546001600160a01b03166104ad565b348015610a4957600080fd5b50600e5461041490600160b81b900460ff1681565b348015610a6a57600080fd5b50610480611de2565b348015610a7f57600080fd5b50610449610a8e366004613b22565b611df1565b348015610a9f57600080fd5b50610449610aae366004613cfb565b611e17565b348015610abf57600080fd5b50610580610ace366004613814565b6001600160a01b031660009081526009602052604090205460c01c90565b348015610af857600080fd5b50610449610b07366004613d4b565b611e5f565b610449610b1a366004613db0565b611f6d565b348015610b2b57600080fd5b50610449610b3a366004613814565b61229c565b348015610b4b57600080fd5b50600e546104149062010000900460ff1681565b348015610b6b57600080fd5b50610580600a81565b348015610b8057600080fd5b50610449610b8f366004613b22565b6122d0565b610449610ba2366004613e43565b6122eb565b348015610bb357600080fd5b50610728610bc236600461395e565b61232f565b348015610bd357600080fd5b50610480610be2366004613894565b6123be565b348015610bf357600080fd5b506104ad7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c2757600080fd5b50610449610c36366004613894565b612442565b348015610c4757600080fd5b50610414610c56366004613f06565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b348015610c9057600080fd5b50600e546104ad90630100000090046001600160a01b031681565b348015610cb757600080fd5b50601554610cd59060ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b03909116602083015201610420565b348015610d0057600080fd5b50610449610d0f366004613814565b61244f565b348015610d2057600080fd5b5061058060175481565b348015610d3657600080fd5b50610580610d45366004613814565b60166020526000908152604090205481565b348015610d6357600080fd5b50610449610d72366004613aa9565b6124c5565b348015610d8357600080fd5b50600e546104149060ff1681565b348015610d9d57600080fd5b50610449610dac366004613f34565b612570565b6000610dbc8261265a565b80610dcb5750610dcb826126a8565b92915050565b610dd96126dd565b610de38282612737565b5050565b610def6126dd565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b606060068054610e2090613f6e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4c90613f6e565b8015610e995780601f10610e6e57610100808354040283529160200191610e99565b820191906000526020600020905b815481529060010190602001808311610e7c57829003601f168201915b5050505050905090565b6000610eae826127f1565b610ecb576040516333d1c03960e21b815260040160405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b81600e5460ff1615610efc57610efc81612819565b600e54610100900460ff1615610f2557604051630b95754760e31b815260040160405180910390fd5b610f2f838361285d565b505050565b6003546001600160a01b03163314610f675760405162461bcd60e51b8152600401610f5e90613fa8565b60405180910390fd5b610f708161244f565b50565b610f7b6126dd565b604080518082019091526015805460ff811615158084526001600160a01b039490941660209093018390526001600160a81b031916610100600160a81b031990931692909217610100909102179055565b826001600160a01b0381163314610ff157600e5460ff1615610ff157610ff133612819565b610ffc8484846128fd565b50505050565b60606000826001600160401b0381111561101e5761101e613dfd565b604051908082528060200260200182016040528015611047578160200160208202803683370190505b50905060005b838110156110ab5761108185858381811061106a5761106a613ff5565b90506020020135600f612a9b90919063ffffffff16565b82828151811061109357611093613ff5565b9115156020928302919091019091015260010161104d565b509392505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916111285750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611147906001600160601b031687614021565b611151919061404e565b91519350909150505b9250929050565b6003546001600160a01b0316331461118b5760405162461bcd60e51b8152600401610f5e90613fa8565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6111b56126dd565b60005b81811015610f2f576111ec8383838181106111d5576111d5613ff5565b90506020020135600f612abf90919063ffffffff16565b6001016111b8565b60606111fe6126dd565b60005b8281101561126357846001600160a01b031661123485858481811061122857611228613ff5565b905060200201356116d9565b6001600160a01b03161461125b57604051631f382b5160e01b815260040160405180910390fd5b600101611201565b506112b484848480806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060155490935061010090046001600160a01b03169150612ae89050565b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d8060008114611329576040519150601f19603f3d011682016040523d82523d6000602084013e61132e565b606091505b5050905080610f7057604051631d42c86760e21b815260040160405180910390fd5b60175460000361137357604051638438385160e01b815260040160405180910390fd5b33600090815260166020526040812054601754909190611394908390614021565b9050803410156113b75760405163356680b760e01b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000826113e260045490565b6113ec9190614062565b111561140b57604051634c9c5c3360e11b815260040160405180910390fd5b33600081815260166020526040812055610de39083612ba0565b61142d6126dd565b828114158061143a575082155b156114585760405163a121188760e01b815260040160405180910390fd5b60005b838110156114b3576114ab85858381811061147857611478613ff5565b905060200201602081019061148d9190613814565b84848481811061149f5761149f613ff5565b90506020020135612bba565b60010161145b565b507f00000000000000000000000000000000000000000000000000000000000000006114de60045490565b1115610ffc57604051634c9c5c3360e11b815260040160405180910390fd5b610f2f838383604051806020016040528060008152506122eb565b6115206126dd565b600e54630100000090046001600160a01b031661155057604051630e048e7160e41b815260040160405180910390fd5b600e8054911515620100000262ff000019909216919091179055565b6040805160a08101825260135463ffffffff8082168084526001600160401b03600160201b840481166020860152600160601b84041694840194909452600160a01b820481166060840152600160c01b9091041660808201526000914210156115e157602001516001600160401b0316919050565b6060810151815163ffffffff918216916115fc911642614075565b1061161357604001516001600160401b0316919050565b6000816080015163ffffffff16826000015163ffffffff16426116369190614075565b611640919061404e565b90506000826080015183606001516116589190614088565b63ffffffff168360400151846020015161167291906140ab565b61167c91906140d2565b6001600160401b031690506116918183614021565b83602001516001600160401b03166116a99190614075565b935050505090565b6116b96126dd565b6018610f2f828483614132565b6116ce6126dd565b610f2f838383612c0f565b6000610dcb82612cda565b600e54600160b81b900460ff1661170e576040516309ca1d3560e11b815260040160405180910390fd5b807f00000000000000000000000000000000000000000000000000000000000000008161173a60045490565b6117449190614062565b111561176357604051634c9c5c3360e11b815260040160405180910390fd5b600061176e60045490565b905060005b828110156118ef57600085858381811061178f5761178f613ff5565b905060200201359050336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016117f091815260200190565b602060405180830381865afa15801561180d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183191906141f1565b6001600160a01b0316146118585760405163242e855d60e11b815260040160405180910390fd5b600881901c6000908152600f6020526040902054600160ff83161b1661189157604051635366f67d60e11b815260040160405180910390fd5b600881901c6000908152600f602052604090208054600160ff84161b191690556118bb8284614062565b60405182907fe2301216b3a6988694011d9b19d84b3171cb7166636ac0bee7ea70ccde950f7e90600090a350600101611773565b50610ffc3383612d41565b6119026126dd565b6040805160a08101825260135463ffffffff80821683526001600160401b03600160201b830481166020850152600160601b83041693830193909352600160a01b810483166060830152600160c01b9004821660808201529082161580159061199b575060208101516001600160401b031615806119885750606081015163ffffffff16155b8061199b5750608081015163ffffffff16155b156119b957604051630b21892f60e11b815260040160405180910390fd5b506013805463ffffffff191663ffffffff92909216919091179055565b60006001600160a01b0382166119ff576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600960205260409020546001600160401b031690565b611a2c6126dd565b611a366000612db6565b565b611a406126dd565b611a4b600c82612e08565b15611a6957604051639acc88ef60e01b815260040160405180910390fd5b611a74600c82612e20565b50611a8185858585611425565b60405181907f413cafed652c0749798b60dc0fc27072e4370c1e64b5074b303140f24ccc78fe90600090a25050505050565b6040805160608101825260115463ffffffff808216808452600160201b83049091166020840152600160401b9091046001600160401b031692820192909252901580611b055750805163ffffffff1642105b80611b1a5750806020015163ffffffff164210155b15611b3857604051637963e2b560e01b815260040160405180910390fd5b33600090815260126020526040902054611b568161ffff8716614075565b8661ffff161115611b7a57604051630b39b31760e11b815260040160405180910390fd5b60105461ffff167f0000000000000000000000000000000000000000000000000000000000000000611bac828961420e565b61ffff161115611bcf576040516314231de560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008761ffff16611bfe60045490565b611c089190614062565b1115611c2757604051634c9c5c3360e11b815260040160405180910390fd5b611c68878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e2c92505050565b611c8557604051638baa579f60e01b815260040160405180910390fd5b60008761ffff1684604001516001600160401b0316611ca49190614021565b905080341015611cc75760405163356680b760e01b815260040160405180910390fd5b33600081815260126020526040902061ffff8a81168681019092556010805461ffff1916868d01909216919091179055611d019190612bba565b60405161ffff89169033907f0389e698beae4e95f3527cf960f0140615c9c3db399008f23fcc79f61853d91090600090a35050505050505050565b611d446126dd565b600e805461ff0019169055565b611d596126dd565b6040805180820190915260155460ff81161515825261010090046001600160a01b031660208201819052611da057604051630296fadb60e51b815260040160405180910390fd5b6040805180820190915260018082526020928301516001600160a01b031692909101829052601580546001600160a81b03191661010090930292909217179055565b606060078054610e2090613f6e565b611df96126dd565b600e8054911515600160b81b0260ff60b81b19909216919091179055565b81600e5460ff1615611e2c57611e2c81612819565b600e54610100900460ff1615611e5557604051630b95754760e31b815260040160405180910390fd5b610f2f8383612ee3565b611e676126dd565b63ffffffff851615801590611ea057506001600160401b0384161580611e91575063ffffffff8216155b80611ea0575063ffffffff8116155b15611ebe57604051630b21892f60e11b815260040160405180910390fd5b6040805160a08101825263ffffffff9687168082526001600160401b03968716602083018190529590961691810182905292861660608401819052919095166080909201829052601380546001600160601b031916909417600160201b909302929092176bffffffffffffffffffffffff60601b1916600160601b90940263ffffffff60a01b191693909317600160a01b9091021763ffffffff60c01b1916600160c01b909202919091179055565b323314611fbc5760405162461bcd60e51b815260206004820152601e60248201527f5468652063616c6c657220697320616e6f7468657220636f6e747261637400006044820152606401610f5e565b6040805160a08101825260135463ffffffff8082168084526001600160401b03600160201b840481166020860152600160601b84041694840194909452600160a01b820481166060840152600160c01b9091041660808201529015806120285750805163ffffffff1642105b1561204657604051635ccb0f5960e01b815260040160405180910390fd5b60105461ffff167f000000000000000000000000000000000000000000000000000000000000000061207b8260ff881661420e565b61ffff16111561209e576040516314231de560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008560ff166120cc60045490565b6120d69190614062565b11156120f557604051634c9c5c3360e11b815260040160405180910390fd5b3360009081526009602052604090205460c01c600361211760ff881683614062565b111561213657604051639e3ef52560e01b815260040160405180910390fd5b61217585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f4f92505050565b61219257604051638baa579f60e01b815260040160405180910390fd5b60008660ff166121a061156c565b6121aa9190614021565b9050803410156121cd5760405163356680b760e01b815260040160405180910390fd5b33600090815260096020526040902080546001600160c01b031660ff8916840160c01b1790556010805461ffff191660ff891685810161ffff1691909117909155612219903390612fe6565b803411156122935760003361222e8334614075565b604051600081818185875af1925050503d806000811461226a576040519150601f19603f3d011682016040523d82523d6000602084013e61226f565b606091505b505090508061229157604051633c31275160e21b815260040160405180910390fd5b505b50505050505050565b6122a46126dd565b600e80546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b6122d86126dd565b600e805460ff1916911515919091179055565b6122f6848484610fcc565b6001600160a01b0383163b15610ffc57612312848484846130cd565b610ffc576040516368d2bf6b60e11b815260040160405180910390fd5b6040805180820190915260155460ff811615158083526101009091046001600160a01b031660208301526060919061237a576040516372a58b2b60e11b815260040160405180910390fd5b6112b4338585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050602085015160019150612ae8565b60606123c9826127f1565b6123e657604051630a14c4b560e41b815260040160405180910390fd5b60006123f06131b5565b90508051600003612410576040518060200160405280600081525061243b565b8061241a846131c4565b60405160200161242b929190614229565b6040516020818303038152906040525b9392505050565b61244a6126dd565b601755565b6124576126dd565b6001600160a01b0381166124bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f5e565b610f7081612db6565b6124cd6126dd565b82811415806124da575082155b156124f85760405163a121188760e01b815260040160405180910390fd5b60005b838110156125695782828281811061251557612515613ff5565b905060200201356016600087878581811061253257612532613ff5565b90506020020160208101906125479190613814565b6001600160a01b031681526020810191909152604001600020556001016124fb565b5050505050565b6125786126dd565b63ffffffff8316158061258f575063ffffffff8216155b806125a157506001600160401b038116155b156125bf57604051638299f4c360e01b815260040160405180910390fd5b8163ffffffff168363ffffffff16106125eb57604051638299f4c360e01b815260040160405180910390fd5b6040805160608101825263ffffffff94851680825293909416602085018190526001600160401b039290921693018390526011805467ffffffffffffffff1916909217600160201b909102176fffffffffffffffff00000000000000001916600160401b909202919091179055565b60006301ffc9a760e01b6001600160e01b03198316148061268b57506380ac58cd60e01b6001600160e01b03198316145b80610dcb5750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b1480610dcb57506301ffc9a760e01b6001600160e01b0319831614610dcb565b6002546001600160a01b03163314611a365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f5e565b6127106001600160601b03821611156127625760405162461bcd60e51b8152600401610f5e90614258565b6001600160a01b0382166127b85760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610f5e565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b600060045482108015610dcb575050600090815260086020526040902054600160e01b161590565b69c617113400112233445560005230601a5280603a52600080604460166daaeb6d7670e522a718067333cd4e5afa612855573d6000803e3d6000fd5b6000603a5250565b6000612868826116d9565b9050336001600160a01b038216146128a1576128848133610c56565b6128a1576040516367d9dca160e11b815260040160405180910390fd5b6000828152600a602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061290882612cda565b9050836001600160a01b0316816001600160a01b03161461293b5760405162a1148160e81b815260040160405180910390fd5b6000828152600a6020526040902080546129678187335b6001600160a01b039081169116811491141790565b612992576129758633610c56565b61299257604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166129b957604051633a954ecd60e21b815260040160405180910390fd5b6129c68686866001613208565b80156129d157600082555b6001600160a01b038681166000908152600960205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260086020526040812091909155600160e11b84169003612a6357600184016000818152600860205260408120549003612a61576004548114612a615760008181526008602052604090208490555b505b83856001600160a01b0316876001600160a01b031660008051602061440d83398151915260405160405180910390a45b505050505050565b600881901c600090815260208390526040902054600160ff83161b16151592915050565b600881901c600090815260209290925260409091208054600160ff9093169290921b9091179055565b606060005b8451811015612b2157612b19858281518110612b0b57612b0b613ff5565b60200260200101518561327f565b600101612aed565b506040516301a8875f60e71b81526001600160a01b0383169063d443af8090612b5090889088906004016142a2565b6000604051808303816000875af1158015612b6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b9791908101906142c6565b95945050505050565b610de38282604051806020016040528060008152506133c6565b6000612bc7600a8361404e565b905060005b81811015612be757612bdf84600a612fe6565b600101612bcc565b506000612bf5600a8461436b565b1115610f2f57610f2f83612c0a600a8561436b565b612fe6565b6127106001600160601b0382161115612c3a5760405162461bcd60e51b8152600401610f5e90614258565b6001600160a01b038216612c905760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610f5e565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b600081600454811015612d285760008181526008602052604081205490600160e01b82169003612d26575b8060000361243b575060001901600081815260086020526040902054612d05565b505b604051636f96cda160e11b815260040160405180910390fd5b6000612d4e600a8361404e565b905060005b81811015612d7e57612d7684600a604051806020016040528060008152506133c6565b600101612d53565b506000612d8c600a8461436b565b1115610f2f57610f2f83612da1600a8561436b565b604051806020016040528060008152506133c6565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600183016020526040812054151561243b565b600061243b838361342c565b6040516001600160f01b031960f085811b821660208401526001600160601b03193360601b16602284015284901b16603682015260009081906038016040516020818303038152906040528051906020012090506000612eb9827f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90506000612ec7828661347b565b6014546001600160a01b03908116911614979650505050505050565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040516001600160601b03193360601b16602082015260009081906034016040516020818303038152906040528051906020012090506000612fbe827f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90506000612fcc828661347b565b6014546001600160a01b0391821691161495945050505050565b600454600082900361300b5760405163b562e8dd60e01b815260040160405180910390fd5b6130186000848385613208565b6001600160a01b03831660008181526009602090815260408083208054680100000000000000018802019055848352600890915281206001851460e11b4260a01b1783179055828401908390839060008051602061440d8339815191528180a4600183015b8181146130a3578083600060008051602061440d833981519152600080a460010161307d565b50816000036130c457604051622e076360e81b815260040160405180910390fd5b60045550505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061310290339089908890889060040161437f565b6020604051808303816000875af192505050801561313d575060408051601f3d908101601f1916820190925261313a918101906143bc565b60015b61319b573d80801561316b576040519150601f19603f3d011682016040523d82523d6000602084013e613170565b606091505b508051600003613193576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112b4565b606060188054610e2090613f6e565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806131de5750819003601f19909101908152919050565b600e54610100900460ff16801561322757506001600160a01b03841615155b801561323b57506001600160a01b03831615155b1561325957604051630b95754760e31b815260040160405180910390fd5b61326233613497565b610ffc576040516326406c5f60e11b815260040160405180910390fd5b600061328a83612cda565b9050806000806132a8866000908152600a6020526040902080549091565b9150915084156132e8576132bd818433612952565b6132e8576132cb8333610c56565b6132e857604051632ce44b5f60e11b815260040160405180910390fd5b6132f6836000886001613208565b801561330157600082555b6001600160a01b038316600081815260096020526040902080546fffffffffffffffffffffffffffffffff0190554260a01b17600360e01b17600087815260086020526040812091909155600160e11b8516900361338f5760018601600081815260086020526040812054900361338d57600454811461338d5760008181526008602052604090208590555b505b60405186906000906001600160a01b0386169060008051602061440d833981519152908390a4505060058054600101905550505050565b6133d08383612fe6565b6001600160a01b0383163b15610f2f576004548281035b6133fa60008683806001019450866130cd565b613417576040516368d2bf6b60e11b815260040160405180910390fd5b8181106133e757816004541461256957600080fd5b600081815260018301602052604081205461347357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dcb565b506000610dcb565b600080600061348a858561352b565b915091506110ab8161356d565b600e5460009062010000900460ff161561352357600e546040516370c5e04560e11b81526001600160a01b038481166004830152630100000090920490911690819063e18bc08a90602401602060405180830381865afa1580156134ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243b91906143d9565b506001919050565b60008082516041036135615760208301516040840151606085015160001a613555878285856136b7565b9450945050505061115a565b5060009050600261115a565b6000816004811115613581576135816143f6565b036135895750565b600181600481111561359d5761359d6143f6565b036135ea5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610f5e565b60028160048111156135fe576135fe6143f6565b0361364b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610f5e565b600381600481111561365f5761365f6143f6565b03610f705760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610f5e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156136ee5750600090506003613772565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613742573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661376b57600060019250925050613772565b9150600090505b94509492505050565b6001600160e01b031981168114610f7057600080fd5b6000602082840312156137a357600080fd5b813561243b8161377b565b6001600160a01b0381168114610f7057600080fd5b80356001600160601b03811681146137da57600080fd5b919050565b600080604083850312156137f257600080fd5b82356137fd816137ae565b915061380b602084016137c3565b90509250929050565b60006020828403121561382657600080fd5b813561243b816137ae565b60005b8381101561384c578181015183820152602001613834565b50506000910152565b6000815180845261386d816020860160208601613831565b601f01601f19169290920160200192915050565b60208152600061243b6020830184613855565b6000602082840312156138a657600080fd5b5035919050565b600080604083850312156138c057600080fd5b82356138cb816137ae565b946020939093013593505050565b6000806000606084860312156138ee57600080fd5b83356138f9816137ae565b92506020840135613909816137ae565b929592945050506040919091013590565b60008083601f84011261392c57600080fd5b5081356001600160401b0381111561394357600080fd5b6020830191508360208260051b850101111561115a57600080fd5b6000806020838503121561397157600080fd5b82356001600160401b0381111561398757600080fd5b6139938582860161391a565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156139d95783511515835292840192918401916001016139bb565b50909695505050505050565b600080604083850312156139f857600080fd5b50508035926020909101359150565b600080600060408486031215613a1c57600080fd5b8335613a27816137ae565b925060208401356001600160401b03811115613a4257600080fd5b613a4e8682870161391a565b9497909650939450505050565b600081518084526020808501945080840160005b83811015613a8b57815187529582019590820190600101613a6f565b509495945050505050565b60208152600061243b6020830184613a5b565b60008060008060408587031215613abf57600080fd5b84356001600160401b0380821115613ad657600080fd5b613ae28883890161391a565b90965094506020870135915080821115613afb57600080fd5b50613b088782880161391a565b95989497509550505050565b8015158114610f7057600080fd5b600060208284031215613b3457600080fd5b813561243b81613b14565b60008083601f840112613b5157600080fd5b5081356001600160401b03811115613b6857600080fd5b60208301915083602082850101111561115a57600080fd5b60008060208385031215613b9357600080fd5b82356001600160401b03811115613ba957600080fd5b61399385828601613b3f565b600080600060608486031215613bca57600080fd5b833592506020840135613bdc816137ae565b9150613bea604085016137c3565b90509250925092565b803563ffffffff811681146137da57600080fd5b600060208284031215613c1957600080fd5b61243b82613bf3565b600080600080600060608688031215613c3a57600080fd5b85356001600160401b0380821115613c5157600080fd5b613c5d89838a0161391a565b90975095506020880135915080821115613c7657600080fd5b50613c838882890161391a565b96999598509660400135949350505050565b803561ffff811681146137da57600080fd5b60008060008060608587031215613cbd57600080fd5b613cc685613c95565b9350613cd460208601613c95565b925060408501356001600160401b03811115613cef57600080fd5b613b0887828801613b3f565b60008060408385031215613d0e57600080fd5b8235613d19816137ae565b91506020830135613d2981613b14565b809150509250929050565b80356001600160401b03811681146137da57600080fd5b600080600080600060a08688031215613d6357600080fd5b613d6c86613bf3565b9450613d7a60208701613d34565b9350613d8860408701613d34565b9250613d9660608701613bf3565b9150613da460808701613bf3565b90509295509295909350565b600080600060408486031215613dc557600080fd5b833560ff81168114613dd657600080fd5b925060208401356001600160401b03811115613df157600080fd5b613a4e86828701613b3f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e3b57613e3b613dfd565b604052919050565b60008060008060808587031215613e5957600080fd5b8435613e64816137ae565b9350602085810135613e75816137ae565b93506040860135925060608601356001600160401b0380821115613e9857600080fd5b818801915088601f830112613eac57600080fd5b813581811115613ebe57613ebe613dfd565b613ed0601f8201601f19168501613e13565b91508082528984828501011115613ee657600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215613f1957600080fd5b8235613f24816137ae565b91506020830135613d29816137ae565b600080600060608486031215613f4957600080fd5b613f5284613bf3565b9250613f6060208501613bf3565b9150613bea60408501613d34565b600181811c90821680613f8257607f821691505b602082108103613fa257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4d756c74697369674f776e61626c653a2063616c6c6572206973206e6f74207460408201526c3432903932b0b61037bbb732b960991b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610dcb57610dcb61400b565b634e487b7160e01b600052601260045260246000fd5b60008261405d5761405d614038565b500490565b80820180821115610dcb57610dcb61400b565b81810381811115610dcb57610dcb61400b565b600063ffffffff8084168061409f5761409f614038565b92169190910492915050565b6001600160401b038281168282160390808211156140cb576140cb61400b565b5092915050565b60006001600160401b038084168061409f5761409f614038565b601f821115610f2f57600081815260208120601f850160051c810160208610156141135750805b601f850160051c820191505b81811015612a935782815560010161411f565b6001600160401b0383111561414957614149613dfd565b61415d836141578354613f6e565b836140ec565b6000601f84116001811461419157600085156141795750838201355b600019600387901b1c1916600186901b178355612569565b600083815260209020601f19861690835b828110156141c257868501358255602094850194600190920191016141a2565b50868210156141df5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561420357600080fd5b815161243b816137ae565b61ffff8181168382160190808211156140cb576140cb61400b565b6000835161423b818460208801613831565b83519083019061424f818360208801613831565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160a01b03831681526040602082018190526000906112b490830184613a5b565b600060208083850312156142d957600080fd5b82516001600160401b03808211156142f057600080fd5b818501915085601f83011261430457600080fd5b81518181111561431657614316613dfd565b8060051b9150614327848301613e13565b818152918301840191848101908884111561434157600080fd5b938501935b8385101561435f57845182529385019390850190614346565b98975050505050505050565b60008261437a5761437a614038565b500690565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906143b290830184613855565b9695505050505050565b6000602082840312156143ce57600080fd5b815161243b8161377b565b6000602082840312156143eb57600080fd5b815161243b81613b14565b634e487b7160e01b600052602160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220613f4455bfda66e554d6109ae1ed94160f6c1709a44b7ba543944c62537bdc1864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106103ef5760003560e01c806370a0823111610208578063abd017ea11610118578063e985e9c5116100ab578063f49ed4e71161007a578063f49ed4e714610d14578063f80067df14610d2a578063f99de7a014610d57578063fb796e6c14610d77578063fe6b301314610d9157600080fd5b8063e985e9c514610c3b578063ed9aab5114610c84578063efe7aa4914610cab578063f2fde38b14610cf457600080fd5b8063c78461d7116100e7578063c78461d714610ba7578063c87b56dd14610bc7578063d2c8ed4c14610be7578063d684340914610c1b57600080fd5b8063abd017ea14610b3f578063adceef0714610b5f578063b7c0b8e814610b74578063b88d4fde14610b9457600080fd5b80638da5cb5b1161019b578063a22cb4651161016a578063a22cb46514610a93578063a2623f7514610ab3578063a73762b514610aec578063a9ba0b8714610b0c578063ab7b499314610b1f57600080fd5b80638da5cb5b14610a1f578063954b801714610a3d57806395d89b4114610a5e57806395fd95fc14610a7357600080fd5b80637809c6b1116101d75780637809c6b1146109b4578063788ca64c146109c75780637bcbf571146109f55780637fd147a414610a0a57600080fd5b806370a0823114610932578063715018a614610952578063731186eb1461096757806376cba7441461098757600080fd5b806332cb6b0c1161030357806346fff98d116102965780635944c753116102655780635944c7531461087e5780636352211e1461089e5780636ba4c138146108be5780636cd10ae2146108de5780636ebc56011461091257600080fd5b806346fff98d1461079a5780634bd25c6f146107ba57806355d64d03146107cf57806355f804b31461085e57600080fd5b80633ccfd60b116102d25780633ccfd60b1461074a57806341fbddbd1461075f5780634202d18d1461076757806342842e0e1461078757600080fd5b806332cb6b0c146106b457806333d66b5b146106e8578063364a5c001461070857806337dc95411461073557600080fd5b806312b365101161038657806323b872dd1161035557806323b872dd146105ae57806324846647146105c15780632a55205a146105ee5780632cff67701461062d5780632edf08691461064d57600080fd5b806312b365101461052c578063139e633e1461054b57806318160ddd1461056b5780631df270f31461058e57600080fd5b8063081812fc116103c2578063081812fc1461048d578063095ea7b3146104c557806309af3f9a146104d8578063122e04a8146104f857600080fd5b806301ffc9a7146103f457806304634d8d1461042957806304f81b111461044b57806306fdde031461046b575b600080fd5b34801561040057600080fd5b5061041461040f366004613791565b610db1565b60405190151581526020015b60405180910390f35b34801561043557600080fd5b506104496104443660046137df565b610dd1565b005b34801561045757600080fd5b50610449610466366004613814565b610de7565b34801561047757600080fd5b50610480610e11565b6040516104209190613881565b34801561049957600080fd5b506104ad6104a8366004613894565b610ea3565b6040516001600160a01b039091168152602001610420565b6104496104d33660046138ad565b610ee7565b3480156104e457600080fd5b506104496104f3366004613814565b610f34565b34801561050457600080fd5b506104ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053857600080fd5b50600e5461041490610100900460ff1681565b34801561055757600080fd5b50610449610566366004613814565b610f73565b34801561057757600080fd5b50600554600454035b604051908152602001610420565b34801561059a57600080fd5b506003546104ad906001600160a01b031681565b6104496105bc3660046138d9565b610fcc565b3480156105cd57600080fd5b506105e16105dc36600461395e565b611002565b604051610420919061399f565b3480156105fa57600080fd5b5061060e6106093660046139e5565b6110b3565b604080516001600160a01b039093168352602083019190915201610420565b34801561063957600080fd5b50610449610648366004613814565b611161565b34801561065957600080fd5b506011546106889063ffffffff80821691600160201b810490911690600160401b90046001600160401b031683565b6040805163ffffffff94851681529390921660208401526001600160401b031690820152606001610420565b3480156106c057600080fd5b506105807f000000000000000000000000000000000000000000000000000000000000000081565b3480156106f457600080fd5b5061044961070336600461395e565b6111ad565b34801561071457600080fd5b50610728610723366004613a07565b6111f4565b6040516104209190613a96565b34801561074157600080fd5b50610580600381565b34801561075657600080fd5b506104496112bc565b610449611350565b34801561077357600080fd5b50610449610782366004613aa9565b611425565b6104496107953660046138d9565b6114fd565b3480156107a657600080fd5b506104496107b5366004613b22565b611518565b3480156107c657600080fd5b5061058061156c565b3480156107db57600080fd5b5060135461081f9063ffffffff808216916001600160401b03600160201b8204811692600160601b830490911691600160a01b8104821691600160c01b9091041685565b6040805163ffffffff96871681526001600160401b0395861660208201529390941693830193909352831660608201529116608082015260a001610420565b34801561086a57600080fd5b50610449610879366004613b80565b6116b1565b34801561088a57600080fd5b50610449610899366004613bb5565b6116c6565b3480156108aa57600080fd5b506104ad6108b9366004613894565b6116d9565b3480156108ca57600080fd5b506104496108d936600461395e565b6116e4565b3480156108ea57600080fd5b506105807f000000000000000000000000000000000000000000000000000000000000000081565b34801561091e57600080fd5b5061044961092d366004613c07565b6118fa565b34801561093e57600080fd5b5061058061094d366004613814565b6119d6565b34801561095e57600080fd5b50610449611a24565b34801561097357600080fd5b50610449610982366004613c22565b611a38565b34801561099357600080fd5b506105806109a2366004613814565b60126020526000908152604090205481565b6104496109c2366004613ca7565b611ab3565b3480156109d357600080fd5b506010546109e29061ffff1681565b60405161ffff9091168152602001610420565b348015610a0157600080fd5b50610449611d3c565b348015610a1657600080fd5b50610449611d51565b348015610a2b57600080fd5b506002546001600160a01b03166104ad565b348015610a4957600080fd5b50600e5461041490600160b81b900460ff1681565b348015610a6a57600080fd5b50610480611de2565b348015610a7f57600080fd5b50610449610a8e366004613b22565b611df1565b348015610a9f57600080fd5b50610449610aae366004613cfb565b611e17565b348015610abf57600080fd5b50610580610ace366004613814565b6001600160a01b031660009081526009602052604090205460c01c90565b348015610af857600080fd5b50610449610b07366004613d4b565b611e5f565b610449610b1a366004613db0565b611f6d565b348015610b2b57600080fd5b50610449610b3a366004613814565b61229c565b348015610b4b57600080fd5b50600e546104149062010000900460ff1681565b348015610b6b57600080fd5b50610580600a81565b348015610b8057600080fd5b50610449610b8f366004613b22565b6122d0565b610449610ba2366004613e43565b6122eb565b348015610bb357600080fd5b50610728610bc236600461395e565b61232f565b348015610bd357600080fd5b50610480610be2366004613894565b6123be565b348015610bf357600080fd5b506104ad7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c2757600080fd5b50610449610c36366004613894565b612442565b348015610c4757600080fd5b50610414610c56366004613f06565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b348015610c9057600080fd5b50600e546104ad90630100000090046001600160a01b031681565b348015610cb757600080fd5b50601554610cd59060ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b03909116602083015201610420565b348015610d0057600080fd5b50610449610d0f366004613814565b61244f565b348015610d2057600080fd5b5061058060175481565b348015610d3657600080fd5b50610580610d45366004613814565b60166020526000908152604090205481565b348015610d6357600080fd5b50610449610d72366004613aa9565b6124c5565b348015610d8357600080fd5b50600e546104149060ff1681565b348015610d9d57600080fd5b50610449610dac366004613f34565b612570565b6000610dbc8261265a565b80610dcb5750610dcb826126a8565b92915050565b610dd96126dd565b610de38282612737565b5050565b610def6126dd565b601480546001600160a01b0319166001600160a01b0392909216919091179055565b606060068054610e2090613f6e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4c90613f6e565b8015610e995780601f10610e6e57610100808354040283529160200191610e99565b820191906000526020600020905b815481529060010190602001808311610e7c57829003601f168201915b5050505050905090565b6000610eae826127f1565b610ecb576040516333d1c03960e21b815260040160405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b81600e5460ff1615610efc57610efc81612819565b600e54610100900460ff1615610f2557604051630b95754760e31b815260040160405180910390fd5b610f2f838361285d565b505050565b6003546001600160a01b03163314610f675760405162461bcd60e51b8152600401610f5e90613fa8565b60405180910390fd5b610f708161244f565b50565b610f7b6126dd565b604080518082019091526015805460ff811615158084526001600160a01b039490941660209093018390526001600160a81b031916610100600160a81b031990931692909217610100909102179055565b826001600160a01b0381163314610ff157600e5460ff1615610ff157610ff133612819565b610ffc8484846128fd565b50505050565b60606000826001600160401b0381111561101e5761101e613dfd565b604051908082528060200260200182016040528015611047578160200160208202803683370190505b50905060005b838110156110ab5761108185858381811061106a5761106a613ff5565b90506020020135600f612a9b90919063ffffffff16565b82828151811061109357611093613ff5565b9115156020928302919091019091015260010161104d565b509392505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916111285750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611147906001600160601b031687614021565b611151919061404e565b91519350909150505b9250929050565b6003546001600160a01b0316331461118b5760405162461bcd60e51b8152600401610f5e90613fa8565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6111b56126dd565b60005b81811015610f2f576111ec8383838181106111d5576111d5613ff5565b90506020020135600f612abf90919063ffffffff16565b6001016111b8565b60606111fe6126dd565b60005b8281101561126357846001600160a01b031661123485858481811061122857611228613ff5565b905060200201356116d9565b6001600160a01b03161461125b57604051631f382b5160e01b815260040160405180910390fd5b600101611201565b506112b484848480806020026020016040519081016040528093929190818152602001838360200280828437600092018290525060155490935061010090046001600160a01b03169150612ae89050565b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d8060008114611329576040519150601f19603f3d011682016040523d82523d6000602084013e61132e565b606091505b5050905080610f7057604051631d42c86760e21b815260040160405180910390fd5b60175460000361137357604051638438385160e01b815260040160405180910390fd5b33600090815260166020526040812054601754909190611394908390614021565b9050803410156113b75760405163356680b760e01b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000826113e260045490565b6113ec9190614062565b111561140b57604051634c9c5c3360e11b815260040160405180910390fd5b33600081815260166020526040812055610de39083612ba0565b61142d6126dd565b828114158061143a575082155b156114585760405163a121188760e01b815260040160405180910390fd5b60005b838110156114b3576114ab85858381811061147857611478613ff5565b905060200201602081019061148d9190613814565b84848481811061149f5761149f613ff5565b90506020020135612bba565b60010161145b565b507f00000000000000000000000000000000000000000000000000000000000000006114de60045490565b1115610ffc57604051634c9c5c3360e11b815260040160405180910390fd5b610f2f838383604051806020016040528060008152506122eb565b6115206126dd565b600e54630100000090046001600160a01b031661155057604051630e048e7160e41b815260040160405180910390fd5b600e8054911515620100000262ff000019909216919091179055565b6040805160a08101825260135463ffffffff8082168084526001600160401b03600160201b840481166020860152600160601b84041694840194909452600160a01b820481166060840152600160c01b9091041660808201526000914210156115e157602001516001600160401b0316919050565b6060810151815163ffffffff918216916115fc911642614075565b1061161357604001516001600160401b0316919050565b6000816080015163ffffffff16826000015163ffffffff16426116369190614075565b611640919061404e565b90506000826080015183606001516116589190614088565b63ffffffff168360400151846020015161167291906140ab565b61167c91906140d2565b6001600160401b031690506116918183614021565b83602001516001600160401b03166116a99190614075565b935050505090565b6116b96126dd565b6018610f2f828483614132565b6116ce6126dd565b610f2f838383612c0f565b6000610dcb82612cda565b600e54600160b81b900460ff1661170e576040516309ca1d3560e11b815260040160405180910390fd5b807f00000000000000000000000000000000000000000000000000000000000000008161173a60045490565b6117449190614062565b111561176357604051634c9c5c3360e11b815260040160405180910390fd5b600061176e60045490565b905060005b828110156118ef57600085858381811061178f5761178f613ff5565b905060200201359050336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016117f091815260200190565b602060405180830381865afa15801561180d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183191906141f1565b6001600160a01b0316146118585760405163242e855d60e11b815260040160405180910390fd5b600881901c6000908152600f6020526040902054600160ff83161b1661189157604051635366f67d60e11b815260040160405180910390fd5b600881901c6000908152600f602052604090208054600160ff84161b191690556118bb8284614062565b60405182907fe2301216b3a6988694011d9b19d84b3171cb7166636ac0bee7ea70ccde950f7e90600090a350600101611773565b50610ffc3383612d41565b6119026126dd565b6040805160a08101825260135463ffffffff80821683526001600160401b03600160201b830481166020850152600160601b83041693830193909352600160a01b810483166060830152600160c01b9004821660808201529082161580159061199b575060208101516001600160401b031615806119885750606081015163ffffffff16155b8061199b5750608081015163ffffffff16155b156119b957604051630b21892f60e11b815260040160405180910390fd5b506013805463ffffffff191663ffffffff92909216919091179055565b60006001600160a01b0382166119ff576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600960205260409020546001600160401b031690565b611a2c6126dd565b611a366000612db6565b565b611a406126dd565b611a4b600c82612e08565b15611a6957604051639acc88ef60e01b815260040160405180910390fd5b611a74600c82612e20565b50611a8185858585611425565b60405181907f413cafed652c0749798b60dc0fc27072e4370c1e64b5074b303140f24ccc78fe90600090a25050505050565b6040805160608101825260115463ffffffff808216808452600160201b83049091166020840152600160401b9091046001600160401b031692820192909252901580611b055750805163ffffffff1642105b80611b1a5750806020015163ffffffff164210155b15611b3857604051637963e2b560e01b815260040160405180910390fd5b33600090815260126020526040902054611b568161ffff8716614075565b8661ffff161115611b7a57604051630b39b31760e11b815260040160405180910390fd5b60105461ffff167f0000000000000000000000000000000000000000000000000000000000000000611bac828961420e565b61ffff161115611bcf576040516314231de560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008761ffff16611bfe60045490565b611c089190614062565b1115611c2757604051634c9c5c3360e11b815260040160405180910390fd5b611c68878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e2c92505050565b611c8557604051638baa579f60e01b815260040160405180910390fd5b60008761ffff1684604001516001600160401b0316611ca49190614021565b905080341015611cc75760405163356680b760e01b815260040160405180910390fd5b33600081815260126020526040902061ffff8a81168681019092556010805461ffff1916868d01909216919091179055611d019190612bba565b60405161ffff89169033907f0389e698beae4e95f3527cf960f0140615c9c3db399008f23fcc79f61853d91090600090a35050505050505050565b611d446126dd565b600e805461ff0019169055565b611d596126dd565b6040805180820190915260155460ff81161515825261010090046001600160a01b031660208201819052611da057604051630296fadb60e51b815260040160405180910390fd5b6040805180820190915260018082526020928301516001600160a01b031692909101829052601580546001600160a81b03191661010090930292909217179055565b606060078054610e2090613f6e565b611df96126dd565b600e8054911515600160b81b0260ff60b81b19909216919091179055565b81600e5460ff1615611e2c57611e2c81612819565b600e54610100900460ff1615611e5557604051630b95754760e31b815260040160405180910390fd5b610f2f8383612ee3565b611e676126dd565b63ffffffff851615801590611ea057506001600160401b0384161580611e91575063ffffffff8216155b80611ea0575063ffffffff8116155b15611ebe57604051630b21892f60e11b815260040160405180910390fd5b6040805160a08101825263ffffffff9687168082526001600160401b03968716602083018190529590961691810182905292861660608401819052919095166080909201829052601380546001600160601b031916909417600160201b909302929092176bffffffffffffffffffffffff60601b1916600160601b90940263ffffffff60a01b191693909317600160a01b9091021763ffffffff60c01b1916600160c01b909202919091179055565b323314611fbc5760405162461bcd60e51b815260206004820152601e60248201527f5468652063616c6c657220697320616e6f7468657220636f6e747261637400006044820152606401610f5e565b6040805160a08101825260135463ffffffff8082168084526001600160401b03600160201b840481166020860152600160601b84041694840194909452600160a01b820481166060840152600160c01b9091041660808201529015806120285750805163ffffffff1642105b1561204657604051635ccb0f5960e01b815260040160405180910390fd5b60105461ffff167f000000000000000000000000000000000000000000000000000000000000000061207b8260ff881661420e565b61ffff16111561209e576040516314231de560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008560ff166120cc60045490565b6120d69190614062565b11156120f557604051634c9c5c3360e11b815260040160405180910390fd5b3360009081526009602052604090205460c01c600361211760ff881683614062565b111561213657604051639e3ef52560e01b815260040160405180910390fd5b61217585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f4f92505050565b61219257604051638baa579f60e01b815260040160405180910390fd5b60008660ff166121a061156c565b6121aa9190614021565b9050803410156121cd5760405163356680b760e01b815260040160405180910390fd5b33600090815260096020526040902080546001600160c01b031660ff8916840160c01b1790556010805461ffff191660ff891685810161ffff1691909117909155612219903390612fe6565b803411156122935760003361222e8334614075565b604051600081818185875af1925050503d806000811461226a576040519150601f19603f3d011682016040523d82523d6000602084013e61226f565b606091505b505090508061229157604051633c31275160e21b815260040160405180910390fd5b505b50505050505050565b6122a46126dd565b600e80546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b6122d86126dd565b600e805460ff1916911515919091179055565b6122f6848484610fcc565b6001600160a01b0383163b15610ffc57612312848484846130cd565b610ffc576040516368d2bf6b60e11b815260040160405180910390fd5b6040805180820190915260155460ff811615158083526101009091046001600160a01b031660208301526060919061237a576040516372a58b2b60e11b815260040160405180910390fd5b6112b4338585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050602085015160019150612ae8565b60606123c9826127f1565b6123e657604051630a14c4b560e41b815260040160405180910390fd5b60006123f06131b5565b90508051600003612410576040518060200160405280600081525061243b565b8061241a846131c4565b60405160200161242b929190614229565b6040516020818303038152906040525b9392505050565b61244a6126dd565b601755565b6124576126dd565b6001600160a01b0381166124bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f5e565b610f7081612db6565b6124cd6126dd565b82811415806124da575082155b156124f85760405163a121188760e01b815260040160405180910390fd5b60005b838110156125695782828281811061251557612515613ff5565b905060200201356016600087878581811061253257612532613ff5565b90506020020160208101906125479190613814565b6001600160a01b031681526020810191909152604001600020556001016124fb565b5050505050565b6125786126dd565b63ffffffff8316158061258f575063ffffffff8216155b806125a157506001600160401b038116155b156125bf57604051638299f4c360e01b815260040160405180910390fd5b8163ffffffff168363ffffffff16106125eb57604051638299f4c360e01b815260040160405180910390fd5b6040805160608101825263ffffffff94851680825293909416602085018190526001600160401b039290921693018390526011805467ffffffffffffffff1916909217600160201b909102176fffffffffffffffff00000000000000001916600160401b909202919091179055565b60006301ffc9a760e01b6001600160e01b03198316148061268b57506380ac58cd60e01b6001600160e01b03198316145b80610dcb5750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b1480610dcb57506301ffc9a760e01b6001600160e01b0319831614610dcb565b6002546001600160a01b03163314611a365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f5e565b6127106001600160601b03821611156127625760405162461bcd60e51b8152600401610f5e90614258565b6001600160a01b0382166127b85760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610f5e565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b600060045482108015610dcb575050600090815260086020526040902054600160e01b161590565b69c617113400112233445560005230601a5280603a52600080604460166daaeb6d7670e522a718067333cd4e5afa612855573d6000803e3d6000fd5b6000603a5250565b6000612868826116d9565b9050336001600160a01b038216146128a1576128848133610c56565b6128a1576040516367d9dca160e11b815260040160405180910390fd5b6000828152600a602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061290882612cda565b9050836001600160a01b0316816001600160a01b03161461293b5760405162a1148160e81b815260040160405180910390fd5b6000828152600a6020526040902080546129678187335b6001600160a01b039081169116811491141790565b612992576129758633610c56565b61299257604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166129b957604051633a954ecd60e21b815260040160405180910390fd5b6129c68686866001613208565b80156129d157600082555b6001600160a01b038681166000908152600960205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260086020526040812091909155600160e11b84169003612a6357600184016000818152600860205260408120549003612a61576004548114612a615760008181526008602052604090208490555b505b83856001600160a01b0316876001600160a01b031660008051602061440d83398151915260405160405180910390a45b505050505050565b600881901c600090815260208390526040902054600160ff83161b16151592915050565b600881901c600090815260209290925260409091208054600160ff9093169290921b9091179055565b606060005b8451811015612b2157612b19858281518110612b0b57612b0b613ff5565b60200260200101518561327f565b600101612aed565b506040516301a8875f60e71b81526001600160a01b0383169063d443af8090612b5090889088906004016142a2565b6000604051808303816000875af1158015612b6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b9791908101906142c6565b95945050505050565b610de38282604051806020016040528060008152506133c6565b6000612bc7600a8361404e565b905060005b81811015612be757612bdf84600a612fe6565b600101612bcc565b506000612bf5600a8461436b565b1115610f2f57610f2f83612c0a600a8561436b565b612fe6565b6127106001600160601b0382161115612c3a5760405162461bcd60e51b8152600401610f5e90614258565b6001600160a01b038216612c905760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610f5e565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b600081600454811015612d285760008181526008602052604081205490600160e01b82169003612d26575b8060000361243b575060001901600081815260086020526040902054612d05565b505b604051636f96cda160e11b815260040160405180910390fd5b6000612d4e600a8361404e565b905060005b81811015612d7e57612d7684600a604051806020016040528060008152506133c6565b600101612d53565b506000612d8c600a8461436b565b1115610f2f57610f2f83612da1600a8561436b565b604051806020016040528060008152506133c6565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600183016020526040812054151561243b565b600061243b838361342c565b6040516001600160f01b031960f085811b821660208401526001600160601b03193360601b16602284015284901b16603682015260009081906038016040516020818303038152906040528051906020012090506000612eb9827f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90506000612ec7828661347b565b6014546001600160a01b03908116911614979650505050505050565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040516001600160601b03193360601b16602082015260009081906034016040516020818303038152906040528051906020012090506000612fbe827f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90506000612fcc828661347b565b6014546001600160a01b0391821691161495945050505050565b600454600082900361300b5760405163b562e8dd60e01b815260040160405180910390fd5b6130186000848385613208565b6001600160a01b03831660008181526009602090815260408083208054680100000000000000018802019055848352600890915281206001851460e11b4260a01b1783179055828401908390839060008051602061440d8339815191528180a4600183015b8181146130a3578083600060008051602061440d833981519152600080a460010161307d565b50816000036130c457604051622e076360e81b815260040160405180910390fd5b60045550505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061310290339089908890889060040161437f565b6020604051808303816000875af192505050801561313d575060408051601f3d908101601f1916820190925261313a918101906143bc565b60015b61319b573d80801561316b576040519150601f19603f3d011682016040523d82523d6000602084013e613170565b606091505b508051600003613193576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112b4565b606060188054610e2090613f6e565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806131de5750819003601f19909101908152919050565b600e54610100900460ff16801561322757506001600160a01b03841615155b801561323b57506001600160a01b03831615155b1561325957604051630b95754760e31b815260040160405180910390fd5b61326233613497565b610ffc576040516326406c5f60e11b815260040160405180910390fd5b600061328a83612cda565b9050806000806132a8866000908152600a6020526040902080549091565b9150915084156132e8576132bd818433612952565b6132e8576132cb8333610c56565b6132e857604051632ce44b5f60e11b815260040160405180910390fd5b6132f6836000886001613208565b801561330157600082555b6001600160a01b038316600081815260096020526040902080546fffffffffffffffffffffffffffffffff0190554260a01b17600360e01b17600087815260086020526040812091909155600160e11b8516900361338f5760018601600081815260086020526040812054900361338d57600454811461338d5760008181526008602052604090208590555b505b60405186906000906001600160a01b0386169060008051602061440d833981519152908390a4505060058054600101905550505050565b6133d08383612fe6565b6001600160a01b0383163b15610f2f576004548281035b6133fa60008683806001019450866130cd565b613417576040516368d2bf6b60e11b815260040160405180910390fd5b8181106133e757816004541461256957600080fd5b600081815260018301602052604081205461347357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dcb565b506000610dcb565b600080600061348a858561352b565b915091506110ab8161356d565b600e5460009062010000900460ff161561352357600e546040516370c5e04560e11b81526001600160a01b038481166004830152630100000090920490911690819063e18bc08a90602401602060405180830381865afa1580156134ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243b91906143d9565b506001919050565b60008082516041036135615760208301516040840151606085015160001a613555878285856136b7565b9450945050505061115a565b5060009050600261115a565b6000816004811115613581576135816143f6565b036135895750565b600181600481111561359d5761359d6143f6565b036135ea5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610f5e565b60028160048111156135fe576135fe6143f6565b0361364b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610f5e565b600381600481111561365f5761365f6143f6565b03610f705760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610f5e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156136ee5750600090506003613772565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613742573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661376b57600060019250925050613772565b9150600090505b94509492505050565b6001600160e01b031981168114610f7057600080fd5b6000602082840312156137a357600080fd5b813561243b8161377b565b6001600160a01b0381168114610f7057600080fd5b80356001600160601b03811681146137da57600080fd5b919050565b600080604083850312156137f257600080fd5b82356137fd816137ae565b915061380b602084016137c3565b90509250929050565b60006020828403121561382657600080fd5b813561243b816137ae565b60005b8381101561384c578181015183820152602001613834565b50506000910152565b6000815180845261386d816020860160208601613831565b601f01601f19169290920160200192915050565b60208152600061243b6020830184613855565b6000602082840312156138a657600080fd5b5035919050565b600080604083850312156138c057600080fd5b82356138cb816137ae565b946020939093013593505050565b6000806000606084860312156138ee57600080fd5b83356138f9816137ae565b92506020840135613909816137ae565b929592945050506040919091013590565b60008083601f84011261392c57600080fd5b5081356001600160401b0381111561394357600080fd5b6020830191508360208260051b850101111561115a57600080fd5b6000806020838503121561397157600080fd5b82356001600160401b0381111561398757600080fd5b6139938582860161391a565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156139d95783511515835292840192918401916001016139bb565b50909695505050505050565b600080604083850312156139f857600080fd5b50508035926020909101359150565b600080600060408486031215613a1c57600080fd5b8335613a27816137ae565b925060208401356001600160401b03811115613a4257600080fd5b613a4e8682870161391a565b9497909650939450505050565b600081518084526020808501945080840160005b83811015613a8b57815187529582019590820190600101613a6f565b509495945050505050565b60208152600061243b6020830184613a5b565b60008060008060408587031215613abf57600080fd5b84356001600160401b0380821115613ad657600080fd5b613ae28883890161391a565b90965094506020870135915080821115613afb57600080fd5b50613b088782880161391a565b95989497509550505050565b8015158114610f7057600080fd5b600060208284031215613b3457600080fd5b813561243b81613b14565b60008083601f840112613b5157600080fd5b5081356001600160401b03811115613b6857600080fd5b60208301915083602082850101111561115a57600080fd5b60008060208385031215613b9357600080fd5b82356001600160401b03811115613ba957600080fd5b61399385828601613b3f565b600080600060608486031215613bca57600080fd5b833592506020840135613bdc816137ae565b9150613bea604085016137c3565b90509250925092565b803563ffffffff811681146137da57600080fd5b600060208284031215613c1957600080fd5b61243b82613bf3565b600080600080600060608688031215613c3a57600080fd5b85356001600160401b0380821115613c5157600080fd5b613c5d89838a0161391a565b90975095506020880135915080821115613c7657600080fd5b50613c838882890161391a565b96999598509660400135949350505050565b803561ffff811681146137da57600080fd5b60008060008060608587031215613cbd57600080fd5b613cc685613c95565b9350613cd460208601613c95565b925060408501356001600160401b03811115613cef57600080fd5b613b0887828801613b3f565b60008060408385031215613d0e57600080fd5b8235613d19816137ae565b91506020830135613d2981613b14565b809150509250929050565b80356001600160401b03811681146137da57600080fd5b600080600080600060a08688031215613d6357600080fd5b613d6c86613bf3565b9450613d7a60208701613d34565b9350613d8860408701613d34565b9250613d9660608701613bf3565b9150613da460808701613bf3565b90509295509295909350565b600080600060408486031215613dc557600080fd5b833560ff81168114613dd657600080fd5b925060208401356001600160401b03811115613df157600080fd5b613a4e86828701613b3f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e3b57613e3b613dfd565b604052919050565b60008060008060808587031215613e5957600080fd5b8435613e64816137ae565b9350602085810135613e75816137ae565b93506040860135925060608601356001600160401b0380821115613e9857600080fd5b818801915088601f830112613eac57600080fd5b813581811115613ebe57613ebe613dfd565b613ed0601f8201601f19168501613e13565b91508082528984828501011115613ee657600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215613f1957600080fd5b8235613f24816137ae565b91506020830135613d29816137ae565b600080600060608486031215613f4957600080fd5b613f5284613bf3565b9250613f6060208501613bf3565b9150613bea60408501613d34565b600181811c90821680613f8257607f821691505b602082108103613fa257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4d756c74697369674f776e61626c653a2063616c6c6572206973206e6f74207460408201526c3432903932b0b61037bbb732b960991b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610dcb57610dcb61400b565b634e487b7160e01b600052601260045260246000fd5b60008261405d5761405d614038565b500490565b80820180821115610dcb57610dcb61400b565b81810381811115610dcb57610dcb61400b565b600063ffffffff8084168061409f5761409f614038565b92169190910492915050565b6001600160401b038281168282160390808211156140cb576140cb61400b565b5092915050565b60006001600160401b038084168061409f5761409f614038565b601f821115610f2f57600081815260208120601f850160051c810160208610156141135750805b601f850160051c820191505b81811015612a935782815560010161411f565b6001600160401b0383111561414957614149613dfd565b61415d836141578354613f6e565b836140ec565b6000601f84116001811461419157600085156141795750838201355b600019600387901b1c1916600186901b178355612569565b600083815260209020601f19861690835b828110156141c257868501358255602094850194600190920191016141a2565b50868210156141df5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561420357600080fd5b815161243b816137ae565b61ffff8181168382160190808211156140cb576140cb61400b565b6000835161423b818460208801613831565b83519083019061424f818360208801613831565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160a01b03831681526040602082018190526000906112b490830184613a5b565b600060208083850312156142d957600080fd5b82516001600160401b03808211156142f057600080fd5b818501915085601f83011261430457600080fd5b81518181111561431657614316613dfd565b8060051b9150614327848301613e13565b818152918301840191848101908884111561434157600080fd5b938501935b8385101561435f57845182529385019390850190614346565b98975050505050505050565b60008261437a5761437a614038565b500690565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906143b290830184613855565b9695505050505050565b6000602082840312156143ce57600080fd5b815161243b8161377b565b6000602082840312156143eb57600080fd5b815161243b81613b14565b634e487b7160e01b600052602160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220613f4455bfda66e554d6109ae1ed94160f6c1709a44b7ba543944c62537bdc1864736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 148,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)145_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4055,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "realOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6125,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6127,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6129,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 6131,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 6135,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6139,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6144,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)6057_storage)"
      },
      {
        "astId": 6150,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4227,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_processedChunksForAirdrop",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(UintSet)2582_storage"
      },
      {
        "astId": 4230,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "operatorFilteringEnabled",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4233,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "initialTransferLockOn",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4236,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "isRegistryActive",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4238,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "registryAddress",
        "offset": 3,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 4241,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "claimBeanOpen",
        "offset": 23,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4244,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_azukiCanClaim",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(BitMap)1969_storage"
      },
      {
        "astId": 4248,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "totalPresaleAndAuctionMinted",
        "offset": 0,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 4258,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "presaleInfo",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(PresaleInfo)4255_storage"
      },
      {
        "astId": 4262,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "numMintedInPresale",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4276,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "auctionInfo",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(AuctionInfo)4273_storage"
      },
      {
        "astId": 4278,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_offchainSigner",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 4286,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "redeemInfo",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(RedeemInfo)4283_storage"
      },
      {
        "astId": 4290,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "allowlistMintsAlloc",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4292,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "allowlistMintPrice",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 4296,
        "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "24",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)145_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)6057_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)6057_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AuctionInfo)4273_storage": {
        "encoding": "inplace",
        "label": "struct MysteryBean.AuctionInfo",
        "members": [
          {
            "astId": 4264,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "auctionSaleStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4266,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "auctionStartPrice",
            "offset": 4,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4268,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "auctionEndPrice",
            "offset": 12,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4270,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "auctionPriceCurveLength",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4272,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "auctionDropInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)1969_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 1968,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PresaleInfo)4255_storage": {
        "encoding": "inplace",
        "label": "struct MysteryBean.PresaleInfo",
        "members": [
          {
            "astId": 4250,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "presaleStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4252,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "presaleEndTime",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 4254,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "presalePrice",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RedeemInfo)4283_storage": {
        "encoding": "inplace",
        "label": "struct MysteryBean.RedeemInfo",
        "members": [
          {
            "astId": 4280,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "redeemBeanOpen",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4282,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "beanRedeemer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)145_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)2110_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2105,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2109,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenApprovalRef)6057_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 6056,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)2582_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2581,
            "contract": "contracts/Azuki/MysteryBean.sol:MysteryBean",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2110_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}